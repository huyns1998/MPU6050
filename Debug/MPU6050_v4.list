
MPU6050_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  08008288  08008288  00018288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f2c  08008f2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f34  08008f34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f34  08008f34  00018f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e0  08009120  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08009120  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022186  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a95  00000000  00000000  00042396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00044e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  00046238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c42e  00000000  00000000  000475b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a2  00000000  00000000  000639e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e39  00000000  00000000  00075a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a8c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006830  00000000  00000000  0010a914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008270 	.word	0x08008270

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008270 	.word	0x08008270

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;
        
        Quaternion() {
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f5e:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
        }
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_ZN11VectorInt16C1Ev>:
    public:
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
            x = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	801a      	strh	r2, [r3, #0]
            y = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	805a      	strh	r2, [r3, #2]
            z = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	809a      	strh	r2, [r3, #4]
        }
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
            x = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
            y = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
            z = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
        }
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_ZN7MPU605013dmpInitializeEv>:
    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,
    0x01,   0x62,   0x02,   0x00, 0x00,
    0x00,   0x60,   0x04,   0x00, 0x40, 0x00, 0x00
};

uint8_t MPU6050::dmpInitialize() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ac      	sub	sp, #176	; 0xb0
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]





	reset();
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f001 f934 	bl	8002252 <_ZN7MPU60505resetEv>
		HAL_Delay(30); // wait after reset
 8000fea:	201e      	movs	r0, #30
 8000fec:	f001 ff20 	bl	8002e30 <HAL_Delay>

		setSleepEnabled(false);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f001 f93c 	bl	8002270 <_ZN7MPU605015setSleepEnabledEb>

		setMemoryBank(0x10, true, true);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f001 fa82 	bl	8002508 <_ZN7MPU605013setMemoryBankEhbb>

		setMemoryStartAddress(0x06);
 8001004:	2106      	movs	r1, #6
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 faa8 	bl	800255c <_ZN7MPU605021setMemoryStartAddressEh>

		uint8_t hwRevision = readMemoryByte();
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f001 fab6 	bl	800257e <_ZN7MPU605014readMemoryByteEv>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

		setMemoryBank(0, false, false);
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 fa72 	bl	8002508 <_ZN7MPU605013setMemoryBankEhbb>

		uint8_t otpValid = getOTPBankValid();
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f977 	bl	8002318 <_ZN7MPU605015getOTPBankValidEv>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

		int8_t xgOffsetTC = getXGyroOffsetTC();
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f001 f996 	bl	8002362 <_ZN7MPU605016getXGyroOffsetTCEv>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		int8_t ygOffsetTC = getYGyroOffsetTC();
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 f9ba 	bl	80023b6 <_ZN7MPU605016getYGyroOffsetTCEv>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		int8_t zgOffsetTC = getZGyroOffsetTC();
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f001 f9de 	bl	800240a <_ZN7MPU605016getZGyroOffsetTCEv>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

		setSlaveAddress(0, 0x7F);
 8001054:	227f      	movs	r2, #127	; 0x7f
 8001056:	2100      	movs	r1, #0
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 ffd8 	bl	800200e <_ZN7MPU605015setSlaveAddressEhh>

		setI2CMasterModeEnabled(false);
 800105e:	2100      	movs	r1, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f001 f8c7 	bl	80021f4 <_ZN7MPU605023setI2CMasterModeEnabledEb>

		setSlaveAddress(0, 0x68);
 8001066:	2268      	movs	r2, #104	; 0x68
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 ffcf 	bl	800200e <_ZN7MPU605015setSlaveAddressEhh>

		resetI2CMaster();
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 f8df 	bl	8002234 <_ZN7MPU605014resetI2CMasterEv>
		HAL_Delay(20);
 8001076:	2014      	movs	r0, #20
 8001078:	f001 feda 	bl	8002e30 <HAL_Delay>

		if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true)) {
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2300      	movs	r3, #0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	f240 7289 	movw	r2, #1929	; 0x789
 800108a:	4949      	ldr	r1, [pc, #292]	; (80011b0 <_ZN7MPU605013dmpInitializeEv+0x1d4>)
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fb5c 	bl	800274a <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 8085 	beq.w	80011a4 <_ZN7MPU605013dmpInitializeEv+0x1c8>
			if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800109a:	22c0      	movs	r2, #192	; 0xc0
 800109c:	4945      	ldr	r1, [pc, #276]	; (80011b4 <_ZN7MPU605013dmpInitializeEv+0x1d8>)
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 fc36 	bl	8002910 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d07a      	beq.n	80011a0 <_ZN7MPU605013dmpInitializeEv+0x1c4>
				setClockSource(MPU6050_CLOCK_PLL_YGYRO);
 80010aa:	2102      	movs	r1, #2
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 f8f0 	bl	8002292 <_ZN7MPU605014setClockSourceEh>

				setIntEnabled(0x12);
 80010b2:	2112      	movs	r1, #18
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 ffc7 	bl	8002048 <_ZN7MPU605013setIntEnabledEh>

				setRate(4); // khz / (1 + 4) = 200 Hz
 80010ba:	2104      	movs	r1, #4
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 ff49 	bl	8001f54 <_ZN7MPU60507setRateEh>

				setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 80010c2:	2101      	movs	r1, #1
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 ff56 	bl	8001f76 <_ZN7MPU605020setExternalFrameSyncEh>

				setDLPFMode(MPU6050_DLPF_BW_42);
 80010ca:	2103      	movs	r1, #3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 ff65 	bl	8001f9c <_ZN7MPU605011setDLPFModeEh>

				setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80010d2:	2103      	movs	r1, #3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 ff74 	bl	8001fc2 <_ZN7MPU605021setFullScaleGyroRangeEh>


				setDMPConfig1(0x03);
 80010da:	2103      	movs	r1, #3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f001 fc29 	bl	8002934 <_ZN7MPU605013setDMPConfig1Eh>
				setDMPConfig2(0x00);
 80010e2:	2100      	movs	r1, #0
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f001 fc36 	bl	8002956 <_ZN7MPU605013setDMPConfig2Eh>

				setOTPBankValid(false);
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 f927 	bl	8002340 <_ZN7MPU605015setOTPBankValidEb>

				setXGyroOffsetTC(xgOffsetTC);
 80010f2:	f997 30a5 	ldrsb.w	r3, [r7, #165]	; 0xa5
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f001 f949 	bl	8002390 <_ZN7MPU605016setXGyroOffsetTCEa>
				setYGyroOffsetTC(ygOffsetTC);
 80010fe:	f997 30a4 	ldrsb.w	r3, [r7, #164]	; 0xa4
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 f96d 	bl	80023e4 <_ZN7MPU605016setYGyroOffsetTCEa>
				setZGyroOffsetTC(zgOffsetTC);
 800110a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f991 	bl	8002438 <_ZN7MPU605016setZGyroOffsetTCEa>

				setXGyroOffset(0);
 8001116:	2100      	movs	r1, #0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 f9b1 	bl	8002480 <_ZN7MPU605014setXGyroOffsetEs>
				setYGyroOffset(0);
 800111e:	2100      	movs	r1, #0
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 f9be 	bl	80024a2 <_ZN7MPU605014setYGyroOffsetEs>
				setZGyroOffset(0);
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f001 f9cb 	bl	80024c4 <_ZN7MPU605014setZGyroOffsetEs>

				uint8_t dmpUpdate[16], j;
				uint16_t pos = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

				uint8_t fifoBuffer[128];

				setFIFOEnabled(true);
 8001134:	2101      	movs	r1, #1
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f001 f84b 	bl	80021d2 <_ZN7MPU605014setFIFOEnabledEb>

				setDMPEnabled(true);
 800113c:	2101      	movs	r1, #1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f001 f9d1 	bl	80024e6 <_ZN7MPU605013setDMPEnabledEb>

				uint16_t fifoCount;
				while ((fifoCount = getFIFOCount()) < 3);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f001 f8b7 	bl	80022b8 <_ZN7MPU605012getFIFOCountEv>
 800114a:	4603      	mov	r3, r0
 800114c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001150:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001154:	2b02      	cmp	r3, #2
 8001156:	bf94      	ite	ls
 8001158:	2301      	movls	r3, #1
 800115a:	2300      	movhi	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d000      	beq.n	8001164 <_ZN7MPU605013dmpInitializeEv+0x188>
 8001162:	e7ef      	b.n	8001144 <_ZN7MPU605013dmpInitializeEv+0x168>

				getFIFOBytes(fifoBuffer, fifoCount);
 8001164:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001168:	b2da      	uxtb	r2, r3
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4619      	mov	r1, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f001 f8bd 	bl	80022f0 <_ZN7MPU605012getFIFOBytesEPhh>

				uint8_t mpuIntStatus = getIntStatus();
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 ff77 	bl	800206a <_ZN7MPU605012getIntStatusEv>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

				setDMPEnabled(false);
 8001182:	2100      	movs	r1, #0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 f9ae 	bl	80024e6 <_ZN7MPU605013setDMPEnabledEb>

				dmpPacketSize = 42;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	222a      	movs	r2, #42	; 0x2a
 800118e:	809a      	strh	r2, [r3, #4]

				resetFIFO();
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f001 f840 	bl	8002216 <_ZN7MPU60509resetFIFOEv>
				getIntStatus();
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 ff67 	bl	800206a <_ZN7MPU605012getIntStatusEv>
				return 2; // configuration block loading failed
			}
		} else {
			return 1; // main binary block loading failed
		}
		return 0; // success
 800119c:	2300      	movs	r3, #0
 800119e:	e002      	b.n	80011a6 <_ZN7MPU605013dmpInitializeEv+0x1ca>
				return 2; // configuration block loading failed
 80011a0:	2302      	movs	r3, #2
 80011a2:	e000      	b.n	80011a6 <_ZN7MPU605013dmpInitializeEv+0x1ca>
			return 1; // main binary block loading failed
 80011a4:	2301      	movs	r3, #1


}
 80011a6:	4618      	mov	r0, r3
 80011a8:	37a8      	adds	r7, #168	; 0xa8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	080082e8 	.word	0x080082e8
 80011b4:	08008a74 	.word	0x08008a74

080011b8 <_ZN7MPU605016dmpGetQuaternionEPsPKh>:
    data[1] = ((packet[4] << 24) + (packet[5] << 16) + (packet[6] << 8) + packet[7]);
    data[2] = ((packet[8] << 24) + (packet[9] << 16) + (packet[10] << 8) + packet[11]);
    data[3] = ((packet[12] << 24) + (packet[13] << 16) + (packet[14] << 8) + packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <_ZN7MPU605016dmpGetQuaternionEPsPKh+0x18>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	607b      	str	r3, [r7, #4]
    data[0] = ((packet[0] << 8) + packet[1]);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	801a      	strh	r2, [r3, #0]
    data[1] = ((packet[4] << 8) + packet[5]);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3305      	adds	r3, #5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b29a      	uxth	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	3302      	adds	r3, #2
 8001208:	b212      	sxth	r2, r2
 800120a:	801a      	strh	r2, [r3, #0]
    data[2] = ((packet[8] << 8) + packet[9]);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3308      	adds	r3, #8
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3309      	adds	r3, #9
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b29a      	uxth	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	3304      	adds	r3, #4
 8001228:	b212      	sxth	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]
    data[3] = ((packet[12] << 8) + packet[13]);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	330c      	adds	r3, #12
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	330d      	adds	r3, #13
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4413      	add	r3, r2
 8001242:	b29a      	uxth	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3306      	adds	r3, #6
 8001248:	b212      	sxth	r2, r2
 800124a:	801a      	strh	r2, [r3, #0]
    return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4619      	mov	r1, r3
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ffa1 	bl	80011b8 <_ZN7MPU605016dmpGetQuaternionEPsPKh>
 8001276:	4603      	mov	r3, r0
 8001278:	77fb      	strb	r3, [r7, #31]
    if (status == 0) {
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d135      	bne.n	80012ec <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x90>
        q -> w = (float)qI[0] / 16384.0f;
 8001280:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80012f8 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	edc3 7a00 	vstr	s15, [r3]
        q -> x = (float)qI[1] / 16384.0f;
 800129a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a6:	eddf 6a14 	vldr	s13, [pc, #80]	; 80012f8 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 80012aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
        q -> y = (float)qI[2] / 16384.0f;
 80012b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012f8 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	edc3 7a02 	vstr	s15, [r3, #8]
        q -> z = (float)qI[3] / 16384.0f;
 80012ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012f8 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 80012de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	edc3 7a03 	vstr	s15, [r3, #12]
        return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e000      	b.n	80012ee <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x92>
    }
    return status; // int16 return value, indicates error if this line is reached
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	46800000 	.word	0x46800000

080012fc <_ZN7MPU605020dmpGetFIFOPacketSizeEv>:
// uint8_t MPU6050::dmpSetGyroDataSource(uint_fast8_t source);
// uint8_t MPU6050::dmpDecodeQuantizedAccel();
// uint32_t MPU6050::dmpGetGyroSumOfSquare();
// uint32_t MPU6050::dmpGetAccelSumOfSquare();
// void MPU6050::dmpOverrideQuaternion(long *q);
uint16_t MPU6050::dmpGetFIFOPacketSize() {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    return dmpPacketSize;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	889b      	ldrh	r3, [r3, #4]
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_Z16MPU_dmpDataReadyv>:
*
* @param 		-		None
*
* @return		-	 	None
*/
void_t MPU_dmpDataReady(void_t) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	g_boMpuInterrupt = TRUE;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <_Z16MPU_dmpDataReadyv+0x14>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20000288 	.word	0x20000288

0800132c <_Z8MPU_InitP17I2C_HandleTypeDef>:
  * @param 	[iwGyroZOffset]		:		gyroZ offset
  * @param 	[iwAccelZOffset]	:		Accel Z offset
  * @return		:	 	1 if success and 0 if fail
  */
u8_t MPU_Init(I2C_HandleTypeDef* hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	I2Cdev_init(hi2c);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fbd3 	bl	8001ae0 <_Z11I2Cdev_initP17I2C_HandleTypeDef>
	g_mpu.initialize();
 800133a:	481d      	ldr	r0, [pc, #116]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 800133c:	f000 fdf2 	bl	8001f24 <_ZN7MPU605010initializeEv>

	// load and configure the DMP
	g_byDevStatus = g_mpu.dmpInitialize();
 8001340:	481b      	ldr	r0, [pc, #108]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 8001342:	f7ff fe4b 	bl	8000fdc <_ZN7MPU605013dmpInitializeEv>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <_Z8MPU_InitP17I2C_HandleTypeDef+0x88>)
 800134c:	701a      	strb	r2, [r3, #0]

	// make sure it worked (returns 0 if so)
	if (g_byDevStatus == 0) {
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <_Z8MPU_InitP17I2C_HandleTypeDef+0x88>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d127      	bne.n	80013a6 <_Z8MPU_InitP17I2C_HandleTypeDef+0x7a>
//		g_mpu.setXGyroOffset(g_iwGx_offset);
//		g_mpu.setYGyroOffset(g_iwGy_offset);
//		g_mpu.setZGyroOffset(g_iwGz_offset);
//		g_mpu.setZAccelOffset(g_iwAz_offset); // 1688 factory default for my test chip

		g_mpu.setXGyroOffset(110);
 8001356:	216e      	movs	r1, #110	; 0x6e
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 800135a:	f001 f891 	bl	8002480 <_ZN7MPU605014setXGyroOffsetEs>
		g_mpu.setYGyroOffset(98);
 800135e:	2162      	movs	r1, #98	; 0x62
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 8001362:	f001 f89e 	bl	80024a2 <_ZN7MPU605014setYGyroOffsetEs>
		g_mpu.setZGyroOffset(47);
 8001366:	212f      	movs	r1, #47	; 0x2f
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 800136a:	f001 f8ab 	bl	80024c4 <_ZN7MPU605014setZGyroOffsetEs>
		g_mpu.setZAccelOffset(1236); // 1688 factory default for my test chip
 800136e:	f240 41d4 	movw	r1, #1236	; 0x4d4
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 8001374:	f001 f873 	bl	800245e <_ZN7MPU605015setZAccelOffsetEs>

		// turn on the DMP, now that it's ready
		g_mpu.setDMPEnabled(true);
 8001378:	2101      	movs	r1, #1
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 800137c:	f001 f8b3 	bl	80024e6 <_ZN7MPU605013setDMPEnabledEb>

		// enable Arduino interrupt detection

		//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
		g_byMpuIntStatus = g_mpu.getIntStatus();
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 8001382:	f000 fe72 	bl	800206a <_ZN7MPU605012getIntStatusEv>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <_Z8MPU_InitP17I2C_HandleTypeDef+0x8c>)
 800138c:	701a      	strb	r2, [r3, #0]

		// set our DMP Ready flag so the main loop() function knows it's okay to use it
		g_boDmpReady = true;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <_Z8MPU_InitP17I2C_HandleTypeDef+0x90>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]

		// get expected DMP packet size for later comparison
		g_wPacketSize = g_mpu.dmpGetFIFOPacketSize();
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x84>)
 8001396:	f7ff ffb1 	bl	80012fc <_ZN7MPU605020dmpGetFIFOPacketSizeEv>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_Z8MPU_InitP17I2C_HandleTypeDef+0x94>)
 80013a0:	801a      	strh	r2, [r3, #0]
		return MPU_SUCCESS;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <_Z8MPU_InitP17I2C_HandleTypeDef+0x7c>
	}
	else
	{
	  return MPU_FAIL;
 80013a6:	2301      	movs	r3, #1
	}
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000270 	.word	0x20000270
 80013b4:	200001fd 	.word	0x200001fd
 80013b8:	20000289 	.word	0x20000289
 80013bc:	200001fc 	.word	0x200001fc
 80013c0:	200001fe 	.word	0x200001fe

080013c4 <_ZL7readDMPv>:
* @param 		-		None
*
* @return		-	 	None
*/
static u8_t readDMP(void_t)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	// if programming failed, don't try to do anything
	  if (!g_boDmpReady) return READ_MPU_DMP_FAIL;
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <_ZL7readDMPv+0xd0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <_ZL7readDMPv+0x10>
 80013d0:	2303      	movs	r3, #3
 80013d2:	e05c      	b.n	800148e <_ZL7readDMPv+0xca>

	  // wait for MPU interrupt or extra packet(s) available
	  while (!g_boMpuInterrupt && g_wFifoCount < g_wPacketSize) {
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <_ZL7readDMPv+0xd4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <_ZL7readDMPv+0x2a>
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <_ZL7readDMPv+0xd8>)
 80013e0:	881a      	ldrh	r2, [r3, #0]
 80013e2:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <_ZL7readDMPv+0xdc>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d201      	bcs.n	80013ee <_ZL7readDMPv+0x2a>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <_ZL7readDMPv+0x2c>
 80013ee:	2300      	movs	r3, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d000      	beq.n	80013f6 <_ZL7readDMPv+0x32>
 80013f4:	e7ee      	b.n	80013d4 <_ZL7readDMPv+0x10>
		  // .
		  // .
	  }

	  // reset interrupt flag and get INT_STATUS byte
	  g_boMpuInterrupt = false;
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <_ZL7readDMPv+0xd4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
	  g_byMpuIntStatus = g_mpu.getIntStatus();
 80013fc:	4829      	ldr	r0, [pc, #164]	; (80014a4 <_ZL7readDMPv+0xe0>)
 80013fe:	f000 fe34 	bl	800206a <_ZN7MPU605012getIntStatusEv>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <_ZL7readDMPv+0xe4>)
 8001408:	701a      	strb	r2, [r3, #0]

	  // get current FIFO count
	  g_wFifoCount = g_mpu.getFIFOCount();
 800140a:	4826      	ldr	r0, [pc, #152]	; (80014a4 <_ZL7readDMPv+0xe0>)
 800140c:	f000 ff54 	bl	80022b8 <_ZN7MPU605012getFIFOCountEv>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <_ZL7readDMPv+0xd8>)
 8001416:	801a      	strh	r2, [r3, #0]

	  // check for overflow (this should never happen unless our code is too inefficient)
	  if ((g_byMpuIntStatus & 0x10) || g_wFifoCount == 1024) {
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <_ZL7readDMPv+0xe4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <_ZL7readDMPv+0x6a>
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <_ZL7readDMPv+0xd8>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142c:	d103      	bne.n	8001436 <_ZL7readDMPv+0x72>
		  // reset so we can continue cleanly
		  g_mpu.resetFIFO();
 800142e:	481d      	ldr	r0, [pc, #116]	; (80014a4 <_ZL7readDMPv+0xe0>)
 8001430:	f000 fef1 	bl	8002216 <_ZN7MPU60509resetFIFOEv>
	  }
	  else
	  {
		  return READ_MPU_I2C_LOST;
	  }
}
 8001434:	e02b      	b.n	800148e <_ZL7readDMPv+0xca>
	  } else if (g_byMpuIntStatus & 0x02) {
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <_ZL7readDMPv+0xe4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d024      	beq.n	800148c <_ZL7readDMPv+0xc8>
		  while (g_wFifoCount < g_wPacketSize) g_wFifoCount = g_mpu.getFIFOCount();
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <_ZL7readDMPv+0xd8>)
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <_ZL7readDMPv+0xdc>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d207      	bcs.n	800145e <_ZL7readDMPv+0x9a>
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <_ZL7readDMPv+0xe0>)
 8001450:	f000 ff32 	bl	80022b8 <_ZN7MPU605012getFIFOCountEv>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <_ZL7readDMPv+0xd8>)
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	e7f1      	b.n	8001442 <_ZL7readDMPv+0x7e>
		  g_mpu.getFIFOBytes(g_byFifoBuffer, g_wPacketSize);
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_ZL7readDMPv+0xdc>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4911      	ldr	r1, [pc, #68]	; (80014ac <_ZL7readDMPv+0xe8>)
 8001468:	480e      	ldr	r0, [pc, #56]	; (80014a4 <_ZL7readDMPv+0xe0>)
 800146a:	f000 ff41 	bl	80022f0 <_ZN7MPU605012getFIFOBytesEPhh>
		  g_wFifoCount -= g_wPacketSize;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <_ZL7readDMPv+0xd8>)
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <_ZL7readDMPv+0xdc>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <_ZL7readDMPv+0xd8>)
 800147c:	801a      	strh	r2, [r3, #0]
			  g_mpu.dmpGetQuaternion(&g_q, g_byFifoBuffer);
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <_ZL7readDMPv+0xe8>)
 8001480:	490b      	ldr	r1, [pc, #44]	; (80014b0 <_ZL7readDMPv+0xec>)
 8001482:	4808      	ldr	r0, [pc, #32]	; (80014a4 <_ZL7readDMPv+0xe0>)
 8001484:	f7ff feea 	bl	800125c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
		  return READ_MPU_SUCCESS;
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <_ZL7readDMPv+0xca>
		  return READ_MPU_I2C_LOST;
 800148c:	2302      	movs	r3, #2
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001fc 	.word	0x200001fc
 8001498:	20000288 	.word	0x20000288
 800149c:	20000200 	.word	0x20000200
 80014a0:	200001fe 	.word	0x200001fe
 80014a4:	20000270 	.word	0x20000270
 80014a8:	20000289 	.word	0x20000289
 80014ac:	20000204 	.word	0x20000204
 80014b0:	20000244 	.word	0x20000244
 80014b4:	00000000 	.word	0x00000000

080014b8 <_Z15MPU_GetDMPValueR10DMP_data_t>:
 * @param 	[&]		:		return result
 *
 * @return	[status]	:		status
 */
u8_t MPU_GetDMPValue(DMP_data_t &d)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	u8_t status = readDMP();
 80014c0:	f7ff ff80 	bl	80013c4 <_ZL7readDMPv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]

	d.qw = g_q.w;
 80014c8:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
	d.qx = g_q.x;
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
	d.qy = g_q.y;
 80014d8:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
	d.qz = g_q.z;
 80014e0:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]

	d.accelX = g_mpu.getAccelerationX()/16384.0;
 80014e8:	4844      	ldr	r0, [pc, #272]	; (80015fc <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 80014ea:	f000 fdd0 	bl	800208e <_ZN7MPU605016getAccelerationXEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f81f 	bl	8000534 <__aeabi_i2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <_Z15MPU_GetDMPValueR10DMP_data_t+0x148>)
 80014fc:	f7ff f9ae 	bl	800085c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fb56 	bl	8000bb8 <__aeabi_d2f>
 800150c:	4602      	mov	r2, r0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	61da      	str	r2, [r3, #28]
	d.accelY = g_mpu.getAccelerationY()/16384.0;
 8001512:	483a      	ldr	r0, [pc, #232]	; (80015fc <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 8001514:	f000 fdd6 	bl	80020c4 <_ZN7MPU605016getAccelerationYEv>
 8001518:	4603      	mov	r3, r0
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f80a 	bl	8000534 <__aeabi_i2d>
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <_Z15MPU_GetDMPValueR10DMP_data_t+0x148>)
 8001526:	f7ff f999 	bl	800085c <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fb41 	bl	8000bb8 <__aeabi_d2f>
 8001536:	4602      	mov	r2, r0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	621a      	str	r2, [r3, #32]
	d.accelZ = g_mpu.getAccelerationZ()/16384.0;
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 800153e:	f000 fddc 	bl	80020fa <_ZN7MPU605016getAccelerationZEv>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fff5 	bl	8000534 <__aeabi_i2d>
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <_Z15MPU_GetDMPValueR10DMP_data_t+0x148>)
 8001550:	f7ff f984 	bl	800085c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fb2c 	bl	8000bb8 <__aeabi_d2f>
 8001560:	4602      	mov	r2, r0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

	d.gyroX = g_mpu.getRotationX()/16.4;
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 8001568:	f000 fde2 	bl	8002130 <_ZN7MPU605012getRotationXEv>
 800156c:	4603      	mov	r3, r0
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffe0 	bl	8000534 <__aeabi_i2d>
 8001574:	a31e      	add	r3, pc, #120	; (adr r3, 80015f0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x138>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f96f 	bl	800085c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb17 	bl	8000bb8 <__aeabi_d2f>
 800158a:	4602      	mov	r2, r0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	611a      	str	r2, [r3, #16]
	d.gyroY = g_mpu.getRotationY()/16.4;
 8001590:	481a      	ldr	r0, [pc, #104]	; (80015fc <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 8001592:	f000 fde8 	bl	8002166 <_ZN7MPU605012getRotationYEv>
 8001596:	4603      	mov	r3, r0
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffcb 	bl	8000534 <__aeabi_i2d>
 800159e:	a314      	add	r3, pc, #80	; (adr r3, 80015f0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x138>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f95a 	bl	800085c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb02 	bl	8000bb8 <__aeabi_d2f>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	615a      	str	r2, [r3, #20]
	d.gyroZ = g_mpu.getRotationZ()/16.4;
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 80015bc:	f000 fdee 	bl	800219c <_ZN7MPU605012getRotationZEv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffb6 	bl	8000534 <__aeabi_i2d>
 80015c8:	a309      	add	r3, pc, #36	; (adr r3, 80015f0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x138>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f945 	bl	800085c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff faed 	bl	8000bb8 <__aeabi_d2f>
 80015de:	4602      	mov	r2, r0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]

	return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	66666666 	.word	0x66666666
 80015f4:	40306666 	.word	0x40306666
 80015f8:	20000244 	.word	0x20000244
 80015fc:	20000270 	.word	0x20000270
 8001600:	40d00000 	.word	0x40d00000

08001604 <_Z41__static_initialization_and_destruction_0ii>:
	}
	if(g_iwState == 2)
	{
		meansensors();
	}
}
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d113      	bne.n	800163c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161a:	4293      	cmp	r3, r2
 800161c:	d10e      	bne.n	800163c <_Z41__static_initialization_and_destruction_0ii+0x38>
Quaternion g_q;           // [w, x, y, z]         quaternion container
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001620:	f7ff fc96 	bl	8000f50 <_ZN10QuaternionC1Ev>
VectorInt16 g_Aa;         // [x, y, z]            accel sensor measurements
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001626:	f7ff fcae 	bl	8000f86 <_ZN11VectorInt16C1Ev>
VectorInt16 g_AaReal;     // [x, y, z]            gravity-free accel sensor measurements
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800162c:	f7ff fcab 	bl	8000f86 <_ZN11VectorInt16C1Ev>
VectorFloat g_gravity;    // [x, y, z]            gravity vector
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001632:	f7ff fcbc 	bl	8000fae <_ZN11VectorFloatC1Ev>
MPU6050 g_mpu;
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001638:	f000 fc66 	bl	8001f08 <_ZN7MPU6050C1Ev>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000244 	.word	0x20000244
 8001648:	20000254 	.word	0x20000254
 800164c:	2000025c 	.word	0x2000025c
 8001650:	20000264 	.word	0x20000264
 8001654:	20000270 	.word	0x20000270

08001658 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
 800165c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff ffcf 	bl	8001604 <_Z41__static_initialization_and_destruction_0ii>
 8001666:	bd80      	pop	{r7, pc}

08001668 <main>:
Quaternion_t q;
YPRAngle_t   y;
Accel_gyro_t a;
DMP_data_t d;
int main(void)
{
 8001668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800166c:	b088      	sub	sp, #32
 800166e:	af06      	add	r7, sp, #24

	HAL_Init();
 8001670:	f001 fb6c 	bl	8002d4c <HAL_Init>

	SystemClock_Config();
 8001674:	f000 f898 	bl	80017a8 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 8001678:	f000 f9cc 	bl	8001a14 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800167c:	f000 f972 	bl	8001964 <_ZL19MX_USART2_UART_Initv>
	MX_I2C3_Init();
 8001680:	f000 f93c 	bl	80018fc <_ZL12MX_I2C3_Initv>
	MX_I2C1_Init();
 8001684:	f000 f906 	bl	8001894 <_Z12MX_I2C1_Initv>
	sprintf(data,"Calibrating...\r\n");
 8001688:	493f      	ldr	r1, [pc, #252]	; (8001788 <main+0x120>)
 800168a:	4840      	ldr	r0, [pc, #256]	; (800178c <main+0x124>)
 800168c:	f004 fc98 	bl	8005fc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001690:	483e      	ldr	r0, [pc, #248]	; (800178c <main+0x124>)
 8001692:	f7fe fda5 	bl	80001e0 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	493b      	ldr	r1, [pc, #236]	; (800178c <main+0x124>)
 800169e:	483c      	ldr	r0, [pc, #240]	; (8001790 <main+0x128>)
 80016a0:	f003 fc3b 	bl	8004f1a <HAL_UART_Transmit>
	if(MPU_Init(&hi2c1) == MPU_FAIL)
 80016a4:	483b      	ldr	r0, [pc, #236]	; (8001794 <main+0x12c>)
 80016a6:	f7ff fe41 	bl	800132c <_Z8MPU_InitP17I2C_HandleTypeDef>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00f      	beq.n	80016da <main+0x72>
	{
		sprintf(data,"MPU Init fail\r\n");
 80016ba:	4937      	ldr	r1, [pc, #220]	; (8001798 <main+0x130>)
 80016bc:	4833      	ldr	r0, [pc, #204]	; (800178c <main+0x124>)
 80016be:	f004 fc7f 	bl	8005fc0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 80016c2:	4832      	ldr	r0, [pc, #200]	; (800178c <main+0x124>)
 80016c4:	f7fe fd8c 	bl	80001e0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	492f      	ldr	r1, [pc, #188]	; (800178c <main+0x124>)
 80016d0:	482f      	ldr	r0, [pc, #188]	; (8001790 <main+0x128>)
 80016d2:	f003 fc22 	bl	8004f1a <HAL_UART_Transmit>
		return 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e051      	b.n	800177e <main+0x116>
	}
	sprintf(data,"Calibration successful\r\n");
 80016da:	4930      	ldr	r1, [pc, #192]	; (800179c <main+0x134>)
 80016dc:	482b      	ldr	r0, [pc, #172]	; (800178c <main+0x124>)
 80016de:	f004 fc6f 	bl	8005fc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 80016e2:	482a      	ldr	r0, [pc, #168]	; (800178c <main+0x124>)
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <main+0x124>)
 80016f0:	4827      	ldr	r0, [pc, #156]	; (8001790 <main+0x128>)
 80016f2:	f003 fc12 	bl	8004f1a <HAL_UART_Transmit>
	u8_t status;
	while (1)
	{
		status = MPU_GetDMPValue(d);
 80016f6:	482a      	ldr	r0, [pc, #168]	; (80017a0 <main+0x138>)
 80016f8:	f7ff fede 	bl	80014b8 <_Z15MPU_GetDMPValueR10DMP_data_t>
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
		if(status == READ_MPU_SUCCESS)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d135      	bne.n	8001772 <main+0x10a>
//			sprintf(data,"DMP:  %.2f,  %.2f, %.2f, %.2f, %.2f, %.2f\r\n", d.accelX, d.accelY, d.accelZ, d.gyroX, d.gyroY, d.gyroZ);
//			HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);

//			sprintf(data,"DMP:  %.2f,  %.2f, %.2f, %.2f, %.2f, %.2f\r\n", a.accelX, a.accelY, a.accelZ, a.gyroX, a.gyroY, a.gyroZ);
//			HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
			sprintf(data,"DMP:  %.2f,  %.2f, %.2f, %.2f\r\n",d.qw, d.qx, d.qy, d.qz);
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <main+0x138>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff24 	bl	8000558 <__aeabi_f2d>
 8001710:	4682      	mov	sl, r0
 8001712:	468b      	mov	fp, r1
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <main+0x138>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff1d 	bl	8000558 <__aeabi_f2d>
 800171e:	4604      	mov	r4, r0
 8001720:	460d      	mov	r5, r1
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <main+0x138>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff16 	bl	8000558 <__aeabi_f2d>
 800172c:	4680      	mov	r8, r0
 800172e:	4689      	mov	r9, r1
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <main+0x138>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff0f 	bl	8000558 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001742:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001746:	e9cd 4500 	strd	r4, r5, [sp]
 800174a:	4652      	mov	r2, sl
 800174c:	465b      	mov	r3, fp
 800174e:	4915      	ldr	r1, [pc, #84]	; (80017a4 <main+0x13c>)
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <main+0x124>)
 8001752:	f004 fc35 	bl	8005fc0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <main+0x124>)
 8001758:	f7fe fd42 	bl	80001e0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	490a      	ldr	r1, [pc, #40]	; (800178c <main+0x124>)
 8001764:	480a      	ldr	r0, [pc, #40]	; (8001790 <main+0x128>)
 8001766:	f003 fbd8 	bl	8004f1a <HAL_UART_Transmit>
			HAL_Delay(100);
 800176a:	2064      	movs	r0, #100	; 0x64
 800176c:	f001 fb60 	bl	8002e30 <HAL_Delay>
 8001770:	e7c1      	b.n	80016f6 <main+0x8e>
		}
		else
		{
			if(status == READ_MPU_I2C_LOST)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d1be      	bne.n	80016f6 <main+0x8e>
			{
				MX_I2C1_Init();
 8001778:	f000 f88c 	bl	8001894 <_Z12MX_I2C1_Initv>
		status = MPU_GetDMPValue(d);
 800177c:	e7bb      	b.n	80016f6 <main+0x8e>
			}
		}
	}
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001788:	08008288 	.word	0x08008288
 800178c:	20000378 	.word	0x20000378
 8001790:	20000334 	.word	0x20000334
 8001794:	2000028c 	.word	0x2000028c
 8001798:	0800829c 	.word	0x0800829c
 800179c:	080082ac 	.word	0x080082ac
 80017a0:	200003ac 	.word	0x200003ac
 80017a4:	080082c8 	.word	0x080082c8

080017a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	; 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fece 	bl	8005558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <_Z18SystemClock_Configv+0xe4>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a2d      	ldr	r2, [pc, #180]	; (800188c <_Z18SystemClock_Configv+0xe4>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <_Z18SystemClock_Configv+0xe4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <_Z18SystemClock_Configv+0xe8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017f4:	4a26      	ldr	r2, [pc, #152]	; (8001890 <_Z18SystemClock_Configv+0xe8>)
 80017f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <_Z18SystemClock_Configv+0xe8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001808:	2302      	movs	r3, #2
 800180a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001810:	2310      	movs	r3, #16
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800181c:	2310      	movs	r3, #16
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001820:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001826:	2304      	movs	r3, #4
 8001828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800182a:	2307      	movs	r3, #7
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fedc 	bl	80045f0 <HAL_RCC_OscConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001848:	f000 f944 	bl	8001ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	230f      	movs	r3, #15
 800184e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2102      	movs	r1, #2
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f939 	bl	8004ae0 <HAL_RCC_ClockConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800187e:	f000 f929 	bl	8001ad4 <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3750      	adds	r7, #80	; 0x50
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000

08001894 <_Z12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <_Z12MX_I2C1_Initv+0x60>)
 800189c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <_Z12MX_I2C1_Initv+0x64>)
 80018a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <_Z12MX_I2C1_Initv+0x5c>)
 80018d2:	f001 fd67 	bl	80033a4 <HAL_I2C_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <_Z12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80018e6:	f000 f8f5 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
//  I2Cdev_init(&hi2c1);
  /* USER CODE END I2C1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000028c 	.word	0x2000028c
 80018f4:	40005400 	.word	0x40005400
 80018f8:	00061a80 	.word	0x00061a80

080018fc <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <_ZL12MX_I2C3_Initv+0x60>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <_ZL12MX_I2C3_Initv+0x64>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <_ZL12MX_I2C3_Initv+0x5c>)
 800193a:	f001 fd33 	bl	80033a4 <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800194e:	f000 f8c1 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
//  I2Cdev_init(&hi2c3);
  /* USER CODE END I2C3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200002e0 	.word	0x200002e0
 800195c:	40005c00 	.word	0x40005c00
 8001960:	000186a0 	.word	0x000186a0

08001964 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800196a:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800196c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001970:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800199c:	f003 fa70 	bl	8004e80 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80019b0:	f000 f890 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000334 	.word	0x20000334
 80019bc:	40004400 	.word	0x40004400

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x38>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_EXTI_IRQHandler+0x2e>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e0:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x38>)
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f807 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
	MPU_dmpDataReady();
 8001a06:	f7ff fc85 	bl	8001314 <_Z16MPU_dmpDataReadyv>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a26      	ldr	r2, [pc, #152]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <_ZL12MX_GPIO_Initv+0xb8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <_ZL12MX_GPIO_Initv+0xbc>)
 8001ab0:	f001 faf4 	bl	800309c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2017      	movs	r0, #23
 8001aba:	f001 fab8 	bl	800302e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001abe:	2017      	movs	r0, #23
 8001ac0:	f001 fad1 	bl	8003066 <HAL_NVIC_EnableIRQ>

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	e7fe      	b.n	8001adc <Error_Handler+0x8>
	...

08001ae0 <_Z11I2Cdev_initP17I2C_HandleTypeDef>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <_Z11I2Cdev_initP17I2C_HandleTypeDef+0x1c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200004d4 	.word	0x200004d4

08001b00 <_Z14I2Cdev_readBithhhPht>:
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	71bb      	strb	r3, [r7, #6]
 8001b10:	4613      	mov	r3, r2
 8001b12:	717b      	strb	r3, [r7, #5]
	uint8_t b;
	uint8_t count = I2Cdev_readByte(devAddr, regAddr, &b, timeout);
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	f107 020e 	add.w	r2, r7, #14
 8001b1a:	79b9      	ldrb	r1, [r7, #6]
 8001b1c:	79f8      	ldrb	r0, [r7, #7]
 8001b1e:	f000 f856 	bl	8001bce <_Z15I2Cdev_readBytehhPht>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
	*data = b & (1 << bitNum);
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4013      	ands	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	701a      	strb	r2, [r3, #0]
	return count;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_Z15I2Cdev_readBitshhhhPht>:
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71bb      	strb	r3, [r7, #6]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	717b      	strb	r3, [r7, #5]
 8001b62:	4613      	mov	r3, r2
 8001b64:	713b      	strb	r3, [r7, #4]
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
   uint8_t count, b;
   if ((count = I2Cdev_readByte(devAddr, regAddr, &b, timeout)) != 0)
 8001b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b68:	f107 020d 	add.w	r2, r7, #13
 8001b6c:	79b9      	ldrb	r1, [r7, #6]
 8001b6e:	79f8      	ldrb	r0, [r7, #7]
 8001b70:	f000 f82d 	bl	8001bce <_Z15I2Cdev_readBytehhPht>
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01d      	beq.n	8001bc4 <_Z15I2Cdev_readBitshhhhPht+0x7c>
   {
	   uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001b88:	793b      	ldrb	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	7979      	ldrb	r1, [r7, #5]
 8001b94:	793b      	ldrb	r3, [r7, #4]
 8001b96:	1acb      	subs	r3, r1, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	73bb      	strb	r3, [r7, #14]
	   b &= mask;
 8001ba0:	7b7a      	ldrb	r2, [r7, #13]
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	737b      	strb	r3, [r7, #13]
	   b >>= (bitStart - length + 1);
 8001baa:	7b7b      	ldrb	r3, [r7, #13]
 8001bac:	4619      	mov	r1, r3
 8001bae:	797a      	ldrb	r2, [r7, #5]
 8001bb0:	793b      	ldrb	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	fa41 f303 	asr.w	r3, r1, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	737b      	strb	r3, [r7, #13]
	   *data = b;
 8001bbe:	7b7a      	ldrb	r2, [r7, #13]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	701a      	strb	r2, [r3, #0]
   }
   return count;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}

08001bce <_Z15I2Cdev_readBytehhPht>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af02      	add	r7, sp, #8
 8001bd4:	603a      	str	r2, [r7, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	71bb      	strb	r3, [r7, #6]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80bb      	strh	r3, [r7, #4]
	 return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 8001be4:	79b9      	ldrb	r1, [r7, #6]
 8001be6:	79f8      	ldrb	r0, [r7, #7]
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f000 f806 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <_Z16I2Cdev_readByteshhhPht>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	71bb      	strb	r3, [r7, #6]
 8001c10:	4613      	mov	r3, r2
 8001c12:	717b      	strb	r3, [r7, #5]
	  uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8001c14:	8b3b      	ldrh	r3, [r7, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_Z16I2Cdev_readByteshhhPht+0x1e>
 8001c1a:	8b3b      	ldrh	r3, [r7, #24]
 8001c1c:	e001      	b.n	8001c22 <_Z16I2Cdev_readByteshhhPht+0x22>
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	81fb      	strh	r3, [r7, #14]

	  HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <_Z16I2Cdev_readByteshhhPht+0x78>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	1dba      	adds	r2, r7, #6
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	f001 fcf8 	bl	800362c <HAL_I2C_Master_Transmit>
	  if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <_Z16I2Cdev_readByteshhhPht+0x78>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b299      	uxth	r1, r3
 8001c48:	797b      	ldrb	r3, [r7, #5]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	89fb      	ldrh	r3, [r7, #14]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	f001 fde8 	bl	8003828 <HAL_I2C_Master_Receive>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <_Z16I2Cdev_readByteshhhPht+0x6c>
 8001c68:	797b      	ldrb	r3, [r7, #5]
 8001c6a:	e000      	b.n	8001c6e <_Z16I2Cdev_readByteshhhPht+0x6e>
	  return -1;
 8001c6c:	23ff      	movs	r3, #255	; 0xff
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200004d4 	.word	0x200004d4

08001c7c <_Z15I2Cdev_writeBithhhh>:
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4604      	mov	r4, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	717b      	strb	r3, [r7, #5]
 8001c96:	4613      	mov	r3, r2
 8001c98:	713b      	strb	r3, [r7, #4]
	//first reading registery value
	uint8_t b;
	I2Cdev_readByte(devAddr, regAddr, &b, I2Cdev_readTimeout);
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <_Z15I2Cdev_writeBithhhh+0x7c>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f107 020f 	add.w	r2, r7, #15
 8001ca2:	79b9      	ldrb	r1, [r7, #6]
 8001ca4:	79f8      	ldrb	r0, [r7, #7]
 8001ca6:	f7ff ff92 	bl	8001bce <_Z15I2Cdev_readBytehhPht>
	b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001caa:	793b      	ldrb	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <_Z15I2Cdev_writeBithhhh+0x4a>
 8001cb0:	797b      	ldrb	r3, [r7, #5]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	b25a      	sxtb	r2, r3
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	e00b      	b.n	8001cde <_Z15I2Cdev_writeBithhhh+0x62>
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	b25a      	sxtb	r2, r3
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	73fb      	strb	r3, [r7, #15]
	return I2Cdev_writeByte(devAddr, regAddr, b);
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	79b9      	ldrb	r1, [r7, #6]
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f85f 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <_Z16I2Cdev_writeBitshhhhh>:
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71bb      	strb	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	717b      	strb	r3, [r7, #5]
 8001d16:	4613      	mov	r3, r2
 8001d18:	713b      	strb	r3, [r7, #4]
  // 00011100 mask byte
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value
	uint8_t b;
	if (I2Cdev_readByte(devAddr, regAddr, &b, 100) != 0)
 8001d1a:	f107 020e 	add.w	r2, r7, #14
 8001d1e:	79b9      	ldrb	r1, [r7, #6]
 8001d20:	79f8      	ldrb	r0, [r7, #7]
 8001d22:	2364      	movs	r3, #100	; 0x64
 8001d24:	f7ff ff53 	bl	8001bce <_Z15I2Cdev_readBytehhPht>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d033      	beq.n	8001da0 <_Z16I2Cdev_writeBitshhhhh+0xa4>
	{
		uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001d38:	793b      	ldrb	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	7979      	ldrb	r1, [r7, #5]
 8001d44:	793b      	ldrb	r3, [r7, #4]
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	73fb      	strb	r3, [r7, #15]
		data <<= (bitStart - length + 1); // shift data into correct position
 8001d50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d54:	7979      	ldrb	r1, [r7, #5]
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	1acb      	subs	r3, r1, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	f887 3020 	strb.w	r3, [r7, #32]
		data &= mask; // zero all non-important bits in data
 8001d64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	f887 3020 	strb.w	r3, [r7, #32]
		b &= ~(mask); // zero all important bits in existing byte
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	b25a      	sxtb	r2, r3
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	73bb      	strb	r3, [r7, #14]
		b |= data; // combine data with existing byte
 8001d84:	7bba      	ldrb	r2, [r7, #14]
 8001d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	73bb      	strb	r3, [r7, #14]
		return I2Cdev_writeByte(devAddr, regAddr, b);
 8001d90:	7bba      	ldrb	r2, [r7, #14]
 8001d92:	79b9      	ldrb	r1, [r7, #6]
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f807 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	e000      	b.n	8001da2 <_Z16I2Cdev_writeBitshhhhh+0xa6>
	}
	else
	{
		return 0;
 8001da0:	2300      	movs	r3, #0
	}
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}

08001daa <_Z16I2Cdev_writeBytehhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	460b      	mov	r3, r1
 8001db6:	71bb      	strb	r3, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	717b      	strb	r3, [r7, #5]
	return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 8001dbc:	1d7b      	adds	r3, r7, #5
 8001dbe:	79b9      	ldrb	r1, [r7, #6]
 8001dc0:	79f8      	ldrb	r0, [r7, #7]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f000 f81a 	bl	8001dfc <_Z17I2Cdev_writeByteshhhPh>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_Z16I2Cdev_writeWordhht>:
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	71bb      	strb	r3, [r7, #6]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80bb      	strh	r3, [r7, #4]
	return I2Cdev_writeWords(devAddr, regAddr, 1, &data);
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	79b9      	ldrb	r1, [r7, #6]
 8001de8:	79f8      	ldrb	r0, [r7, #7]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f000 f832 	bl	8001e54 <_Z17I2Cdev_writeWordshhhPt>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <_Z17I2Cdev_writeByteshhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	71bb      	strb	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <_Z17I2Cdev_writeByteshhhPh+0x54>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e28:	9402      	str	r4, [sp, #8]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	f001 ff1f 	bl	8003c74 <HAL_I2C_Mem_Write>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	b29b      	uxth	r3, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	200004d4 	.word	0x200004d4

08001e54 <_Z17I2Cdev_writeWordshhhPt>:
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* pData)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	460b      	mov	r3, r1
 8001e62:	71bb      	strb	r3, [r7, #6]
 8001e64:	4613      	mov	r3, r2
 8001e66:	717b      	strb	r3, [r7, #5]
	uint8_t i;
  for (i = 0; i < length; i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d219      	bcs.n	8001ea8 <_Z17I2Cdev_writeWordshhhPt+0x54>
	sendBuf[2*i] = (uint8_t) (pData[i] >> 8);
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	121a      	asrs	r2, r3, #8
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	b2d1      	uxtb	r1, r2
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <_Z17I2Cdev_writeWordshhhPt+0xac>)
 8001e88:	54d1      	strb	r1, [r2, r3]
	sendBuf[1+2*i] = (uint8_t) (pData[i] >> 0);
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b2d1      	uxtb	r1, r2
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <_Z17I2Cdev_writeWordshhhPt+0xac>)
 8001e9e:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	e7e1      	b.n	8001e6c <_Z17I2Cdev_writeWordshhhPt+0x18>
  }
  while(HAL_I2C_Mem_Write(I2Cdev_hi2c,devAddr << 1,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length*2,I2CDLY) != HAL_OK){
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <_Z17I2Cdev_writeWordshhhPt+0xb0>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	b299      	uxth	r1, r3
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2401      	movs	r4, #1
 8001ec2:	9402      	str	r4, [sp, #8]
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <_Z17I2Cdev_writeWordshhhPt+0xac>)
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f001 fed2 	bl	8003c74 <HAL_I2C_Mem_Write>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <_Z17I2Cdev_writeWordshhhPt+0x92>
	  return -1;
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	e008      	b.n	8001ef8 <_Z17I2Cdev_writeWordshhhPt+0xa4>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001eea:	7bbb      	ldrb	r3, [r7, #14]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	b29b      	uxth	r3, r3

}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	200003d4 	.word	0x200003d4
 8001f04:	200004d4 	.word	0x200004d4

08001f08 <_ZN7MPU6050C1Ev>:
#include "../MPU6050/MPU6050.h"

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2268      	movs	r2, #104	; 0x68
 8001f14:	719a      	strb	r2, [r3, #6]
}
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f9af 	bl	8002292 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001f34:	2100      	movs	r1, #0
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f843 	bl	8001fc2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f852 	bl	8001fe8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001f44:	2100      	movs	r1, #0
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f992 	bl	8002270 <_ZN7MPU605015setSleepEnabledEb>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	799b      	ldrb	r3, [r3, #6]
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	2119      	movs	r1, #25
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff1e 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7998      	ldrb	r0, [r3, #6]
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	211a      	movs	r1, #26
 8001f90:	f7ff feb4 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7998      	ldrb	r0, [r3, #6]
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	211a      	movs	r1, #26
 8001fb6:	f7ff fea1 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af02      	add	r7, sp, #8
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7998      	ldrb	r0, [r3, #6]
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	2204      	movs	r2, #4
 8001fda:	211b      	movs	r1, #27
 8001fdc:	f7ff fe8e 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7998      	ldrb	r0, [r3, #6]
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	2204      	movs	r2, #4
 8002000:	211c      	movs	r1, #28
 8002002:	f7ff fe7b 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
 800201a:	4613      	mov	r3, r2
 800201c:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d80d      	bhi.n	8002040 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev_writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7998      	ldrb	r0, [r3, #6]
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	461a      	mov	r2, r3
 800202c:	0052      	lsls	r2, r2, #1
 800202e:	4413      	add	r3, r2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3325      	adds	r3, #37	; 0x25
 8002034:	b2db      	uxtb	r3, r3
 8002036:	78ba      	ldrb	r2, [r7, #2]
 8002038:	4619      	mov	r1, r3
 800203a:	f7ff feb6 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
 800203e:	e000      	b.n	8002042 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8002040:	bf00      	nop
}
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	799b      	ldrb	r3, [r3, #6]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	2138      	movs	r1, #56	; 0x38
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fea4 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
    I2Cdev_readByte(devAddr, MPU6050_RA_INT_STATUS, buffer, 0);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7998      	ldrb	r0, [r3, #6]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1dda      	adds	r2, r3, #7
 800207a:	2300      	movs	r3, #0
 800207c:	213a      	movs	r1, #58	; 0x3a
 800207e:	f7ff fda6 	bl	8001bce <_Z15I2Cdev_readBytehhPht>
    return buffer[0];
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	79db      	ldrb	r3, [r3, #7]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_ZN7MPU605016getAccelerationXEv>:
/** Get X-axis accelerometer reading.
 * @return X-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
int16_t MPU6050::getAccelerationX() {
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af02      	add	r7, sp, #8
 8002094:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer, 0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7998      	ldrb	r0, [r3, #6]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3307      	adds	r3, #7
 800209e:	2200      	movs	r2, #0
 80020a0:	9200      	str	r2, [sp, #0]
 80020a2:	2202      	movs	r2, #2
 80020a4:	213b      	movs	r1, #59	; 0x3b
 80020a6:	f7ff fdab 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	79db      	ldrb	r3, [r3, #7]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7a1b      	ldrb	r3, [r3, #8]
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b21b      	sxth	r3, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZN7MPU605016getAccelerationYEv>:
/** Get Y-axis accelerometer reading.
 * @return Y-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_YOUT_H
 */
int16_t MPU6050::getAccelerationY() {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer, 0);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7998      	ldrb	r0, [r3, #6]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3307      	adds	r3, #7
 80020d4:	2200      	movs	r2, #0
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	2202      	movs	r2, #2
 80020da:	213d      	movs	r1, #61	; 0x3d
 80020dc:	f7ff fd90 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	79db      	ldrb	r3, [r3, #7]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7a1b      	ldrb	r3, [r3, #8]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21b      	sxth	r3, r3
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZN7MPU605016getAccelerationZEv>:
/** Get Z-axis accelerometer reading.
 * @return Z-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_ZOUT_H
 */
int16_t MPU6050::getAccelerationZ() {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer, 0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7998      	ldrb	r0, [r3, #6]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3307      	adds	r3, #7
 800210a:	2200      	movs	r2, #0
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	2202      	movs	r2, #2
 8002110:	213f      	movs	r1, #63	; 0x3f
 8002112:	f7ff fd75 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	79db      	ldrb	r3, [r3, #7]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	b21a      	sxth	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7a1b      	ldrb	r3, [r3, #8]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b21b      	sxth	r3, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_ZN7MPU605012getRotationXEv>:
/** Get X-axis gyroscope reading.
 * @return X-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_XOUT_H
 */
int16_t MPU6050::getRotationX() {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 2, buffer, 0);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7998      	ldrb	r0, [r3, #6]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3307      	adds	r3, #7
 8002140:	2200      	movs	r2, #0
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	2143      	movs	r1, #67	; 0x43
 8002148:	f7ff fd5a 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	79db      	ldrb	r3, [r3, #7]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7a1b      	ldrb	r3, [r3, #8]
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21b      	sxth	r3, r3
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZN7MPU605012getRotationYEv>:
/** Get Y-axis gyroscope reading.
 * @return Y-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_YOUT_H
 */
int16_t MPU6050::getRotationY() {
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af02      	add	r7, sp, #8
 800216c:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_GYRO_YOUT_H, 2, buffer, 0);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7998      	ldrb	r0, [r3, #6]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3307      	adds	r3, #7
 8002176:	2200      	movs	r2, #0
 8002178:	9200      	str	r2, [sp, #0]
 800217a:	2202      	movs	r2, #2
 800217c:	2145      	movs	r1, #69	; 0x45
 800217e:	f7ff fd3f 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	79db      	ldrb	r3, [r3, #7]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	b21a      	sxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7a1b      	ldrb	r3, [r3, #8]
 800218e:	b21b      	sxth	r3, r3
 8002190:	4313      	orrs	r3, r2
 8002192:	b21b      	sxth	r3, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN7MPU605012getRotationZEv>:
/** Get Z-axis gyroscope reading.
 * @return Z-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_ZOUT_H
 */
int16_t MPU6050::getRotationZ() {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_GYRO_ZOUT_H, 2, buffer, 0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7998      	ldrb	r0, [r3, #6]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3307      	adds	r3, #7
 80021ac:	2200      	movs	r2, #0
 80021ae:	9200      	str	r2, [sp, #0]
 80021b0:	2202      	movs	r2, #2
 80021b2:	2147      	movs	r1, #71	; 0x47
 80021b4:	f7ff fd24 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	79db      	ldrb	r3, [r3, #7]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	b21a      	sxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7a1b      	ldrb	r3, [r3, #8]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b21b      	sxth	r3, r3
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7998      	ldrb	r0, [r3, #6]
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	2206      	movs	r2, #6
 80021e6:	216a      	movs	r1, #106	; 0x6a
 80021e8:	f7ff fd48 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7998      	ldrb	r0, [r3, #6]
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2205      	movs	r2, #5
 8002208:	216a      	movs	r1, #106	; 0x6a
 800220a:	f7ff fd37 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7998      	ldrb	r0, [r3, #6]
 8002222:	2301      	movs	r3, #1
 8002224:	2202      	movs	r2, #2
 8002226:	216a      	movs	r1, #106	; 0x6a
 8002228:	f7ff fd28 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7998      	ldrb	r0, [r3, #6]
 8002240:	2301      	movs	r3, #1
 8002242:	2201      	movs	r2, #1
 8002244:	216a      	movs	r1, #106	; 0x6a
 8002246:	f7ff fd19 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7998      	ldrb	r0, [r3, #6]
 800225e:	2301      	movs	r3, #1
 8002260:	2207      	movs	r2, #7
 8002262:	216b      	movs	r1, #107	; 0x6b
 8002264:	f7ff fd0a 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7998      	ldrb	r0, [r3, #6]
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2206      	movs	r2, #6
 8002284:	216b      	movs	r1, #107	; 0x6b
 8002286:	f7ff fcf9 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af02      	add	r7, sp, #8
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7998      	ldrb	r0, [r3, #6]
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2303      	movs	r3, #3
 80022a8:	2202      	movs	r2, #2
 80022aa:	216b      	movs	r1, #107	; 0x6b
 80022ac:	f7ff fd26 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af02      	add	r7, sp, #8
 80022be:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer, 0);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7998      	ldrb	r0, [r3, #6]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3307      	adds	r3, #7
 80022c8:	2200      	movs	r2, #0
 80022ca:	9200      	str	r2, [sp, #0]
 80022cc:	2202      	movs	r2, #2
 80022ce:	2172      	movs	r1, #114	; 0x72
 80022d0:	f7ff fc96 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	79db      	ldrb	r3, [r3, #7]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7a1b      	ldrb	r3, [r3, #8]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29b      	uxth	r3, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev_readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer, 0);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	71fb      	strb	r3, [r7, #7]
    I2Cdev_readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data, 0);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	7998      	ldrb	r0, [r3, #6]
 8002302:	79fa      	ldrb	r2, [r7, #7]
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2174      	movs	r1, #116	; 0x74
 800230c:	f7ff fc78 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
    I2Cdev_readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer, 0);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7998      	ldrb	r0, [r3, #6]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3307      	adds	r3, #7
 8002328:	2200      	movs	r2, #0
 800232a:	9200      	str	r2, [sp, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	f7ff fbe6 	bl	8001b00 <_Z14I2Cdev_readBithhhPht>
    return buffer[0];
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	79db      	ldrb	r3, [r3, #7]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7998      	ldrb	r0, [r3, #6]
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	f7ff fc91 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af02      	add	r7, sp, #8
 8002368:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer, 0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7998      	ldrb	r0, [r3, #6]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3307      	adds	r3, #7
 8002372:	2200      	movs	r2, #0
 8002374:	9201      	str	r2, [sp, #4]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2306      	movs	r3, #6
 800237a:	2206      	movs	r2, #6
 800237c:	2100      	movs	r1, #0
 800237e:	f7ff fbe3 	bl	8001b48 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	79db      	ldrb	r3, [r3, #7]
 8002386:	b25b      	sxtb	r3, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7998      	ldrb	r0, [r3, #6]
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2306      	movs	r3, #6
 80023a6:	2206      	movs	r2, #6
 80023a8:	2100      	movs	r1, #0
 80023aa:	f7ff fca7 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer, 0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7998      	ldrb	r0, [r3, #6]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3307      	adds	r3, #7
 80023c6:	2200      	movs	r2, #0
 80023c8:	9201      	str	r2, [sp, #4]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2306      	movs	r3, #6
 80023ce:	2206      	movs	r2, #6
 80023d0:	2101      	movs	r1, #1
 80023d2:	f7ff fbb9 	bl	8001b48 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	79db      	ldrb	r3, [r3, #7]
 80023da:	b25b      	sxtb	r3, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7998      	ldrb	r0, [r3, #6]
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2306      	movs	r3, #6
 80023fa:	2206      	movs	r2, #6
 80023fc:	2101      	movs	r1, #1
 80023fe:	f7ff fc7d 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af02      	add	r7, sp, #8
 8002410:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer, 0);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7998      	ldrb	r0, [r3, #6]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3307      	adds	r3, #7
 800241a:	2200      	movs	r2, #0
 800241c:	9201      	str	r2, [sp, #4]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2306      	movs	r3, #6
 8002422:	2206      	movs	r2, #6
 8002424:	2102      	movs	r1, #2
 8002426:	f7ff fb8f 	bl	8001b48 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	79db      	ldrb	r3, [r3, #7]
 800242e:	b25b      	sxtb	r3, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7998      	ldrb	r0, [r3, #6]
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2306      	movs	r3, #6
 800244e:	2206      	movs	r2, #6
 8002450:	2102      	movs	r1, #2
 8002452:	f7ff fc53 	bl	8001cfc <_Z16I2Cdev_writeBitshhhhh>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	799b      	ldrb	r3, [r3, #6]
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	210a      	movs	r1, #10
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fcad 	bl	8001dd2 <_Z16I2Cdev_writeWordhht>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	799b      	ldrb	r3, [r3, #6]
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	2113      	movs	r1, #19
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fc9c 	bl	8001dd2 <_Z16I2Cdev_writeWordhht>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	799b      	ldrb	r3, [r3, #6]
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	2115      	movs	r1, #21
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fc8b 	bl	8001dd2 <_Z16I2Cdev_writeWordhht>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	799b      	ldrb	r3, [r3, #6]
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	2117      	movs	r1, #23
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fc7a 	bl	8001dd2 <_Z16I2Cdev_writeWordhht>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev_readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer, 0);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7998      	ldrb	r0, [r3, #6]
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	2207      	movs	r2, #7
 80024fa:	216a      	movs	r1, #106	; 0x6a
 80024fc:	f7ff fbbe 	bl	8001c7c <_Z15I2Cdev_writeBithhhh>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN7MPU605013setMemoryBankEhbb>:
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
}

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	70fb      	strb	r3, [r7, #3]
 800251a:	460b      	mov	r3, r1
 800251c:	70bb      	strb	r3, [r7, #2]
 800251e:	4613      	mov	r3, r2
 8002520:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 800252a:	787b      	ldrb	r3, [r7, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f043 0320 	orr.w	r3, r3, #32
 8002536:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002538:	78bb      	ldrb	r3, [r7, #2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002544:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	799b      	ldrb	r3, [r3, #6]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	216d      	movs	r1, #109	; 0x6d
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fc2b 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	799b      	ldrb	r3, [r3, #6]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	216e      	movs	r1, #110	; 0x6e
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fc1a 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZN7MPU605014readMemoryByteEv>:

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
    I2Cdev_readByte(devAddr, MPU6050_RA_MEM_R_W, buffer, 0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7998      	ldrb	r0, [r3, #6]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1dda      	adds	r2, r3, #7
 800258e:	2300      	movs	r3, #0
 8002590:	216f      	movs	r1, #111	; 0x6f
 8002592:	f7ff fb1c 	bl	8001bce <_Z15I2Cdev_readBytehhPht>
    return buffer[0];
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	79db      	ldrb	r3, [r3, #7]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
            setMemoryBank(bank);
            setMemoryStartAddress(address);
        }
    }
}
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08a      	sub	sp, #40	; 0x28
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4611      	mov	r1, r2
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	80fb      	strh	r3, [r7, #6]
 80025b4:	4613      	mov	r3, r2
 80025b6:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80025b8:	7979      	ldrb	r1, [r7, #5]
 80025ba:	2300      	movs	r3, #0
 80025bc:	2200      	movs	r2, #0
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ffa2 	bl	8002508 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80025c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025c8:	4619      	mov	r1, r3
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff ffc6 	bl	800255c <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer;
    uint8_t *progBuffer;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80025d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x40>
 80025d8:	2010      	movs	r0, #16
 80025da:	f002 ff91 	bl	8005500 <malloc>
 80025de:	4603      	mov	r3, r0
 80025e0:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80025e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x52>
 80025ea:	2010      	movs	r0, #16
 80025ec:	f002 ff88 	bl	8005500 <malloc>
 80025f0:	4603      	mov	r3, r0
 80025f2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	827b      	strh	r3, [r7, #18]
 80025f8:	8a7a      	ldrh	r2, [r7, #18]
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f080 8091 	bcs.w	8002724 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x182>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002602:	2310      	movs	r3, #16
 8002604:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002606:	8a7a      	ldrh	r2, [r7, #18]
 8002608:	7ffb      	ldrb	r3, [r7, #31]
 800260a:	441a      	add	r2, r3
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	429a      	cmp	r2, r3
 8002610:	dd05      	ble.n	800261e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x7c>
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	8a7b      	ldrh	r3, [r7, #18]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 800261e:	7ffa      	ldrb	r2, [r7, #31]
 8002620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002624:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002628:	429a      	cmp	r2, r3
 800262a:	dd03      	ble.n	8002634 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x92>
 800262c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002630:	425b      	negs	r3, r3
 8002632:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002634:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xc2>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800263c:	2300      	movs	r3, #0
 800263e:	747b      	strb	r3, [r7, #17]
 8002640:	7c7a      	ldrb	r2, [r7, #17]
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	429a      	cmp	r2, r3
 8002646:	d211      	bcs.n	800266c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
 8002648:	8a7a      	ldrh	r2, [r7, #18]
 800264a:	7c7b      	ldrb	r3, [r7, #17]
 800264c:	4413      	add	r3, r2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	441a      	add	r2, r3
 8002652:	7c7b      	ldrb	r3, [r7, #17]
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	440b      	add	r3, r1
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	7c7b      	ldrb	r3, [r7, #17]
 800265e:	3301      	adds	r3, #1
 8002660:	747b      	strb	r3, [r7, #17]
 8002662:	e7ed      	b.n	8002640 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9e>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002664:	8a7b      	ldrh	r3, [r7, #18]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
        }

        I2Cdev_writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	7998      	ldrb	r0, [r3, #6]
 8002670:	7ffa      	ldrb	r2, [r7, #31]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	216f      	movs	r1, #111	; 0x6f
 8002676:	f7ff fbc1 	bl	8001dfc <_Z17I2Cdev_writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 800267a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02c      	beq.n	80026dc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d029      	beq.n	80026dc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
            setMemoryBank(bank);
 8002688:	7979      	ldrb	r1, [r7, #5]
 800268a:	2300      	movs	r3, #0
 800268c:	2200      	movs	r2, #0
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff ff3a 	bl	8002508 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002698:	4619      	mov	r1, r3
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff ff5e 	bl	800255c <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev_readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer, 0);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	7998      	ldrb	r0, [r3, #6]
 80026a4:	7ffa      	ldrb	r2, [r7, #31]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	216f      	movs	r1, #111	; 0x6f
 80026ae:	f7ff faa7 	bl	8001c00 <_Z16I2Cdev_readByteshhhPht>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	461a      	mov	r2, r3
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f002 ff31 	bl	8005520 <memcmp>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 80026c4:	69b8      	ldr	r0, [r7, #24]
 80026c6:	f002 ff23 	bl	8005510 <free>
                if (useProgMem) free(progBuffer);
 80026ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x136>
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f002 ff1c 	bl	8005510 <free>
                return false; // uh oh.
 80026d8:	2300      	movs	r3, #0
 80026da:	e032      	b.n	8002742 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	8a7b      	ldrh	r3, [r7, #18]
 80026e2:	4413      	add	r3, r2
 80026e4:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 80026e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80026ea:	7ffb      	ldrb	r3, [r7, #31]
 80026ec:	4413      	add	r3, r2
 80026ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 80026f2:	8a7a      	ldrh	r2, [r7, #18]
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	f4bf af7e 	bcs.w	80025f8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x56>
            if (address == 0) bank++;
 80026fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x168>
 8002704:	797b      	ldrb	r3, [r7, #5]
 8002706:	3301      	adds	r3, #1
 8002708:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 800270a:	7979      	ldrb	r1, [r7, #5]
 800270c:	2300      	movs	r3, #0
 800270e:	2200      	movs	r2, #0
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fef9 	bl	8002508 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800271a:	4619      	mov	r1, r3
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff ff1d 	bl	800255c <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002722:	e769      	b.n	80025f8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x56>
        }
    }
    if (verify) free(verifyBuffer);
 8002724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x190>
 800272c:	69b8      	ldr	r0, [r7, #24]
 800272e:	f002 feef 	bl	8005510 <free>
    if (useProgMem) free(progBuffer);
 8002732:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x19e>
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f002 fee8 	bl	8005510 <free>
    return true;
 8002740:	2301      	movs	r3, #1
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 800274a:	b580      	push	{r7, lr}
 800274c:	b088      	sub	sp, #32
 800274e:	af04      	add	r7, sp, #16
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	4611      	mov	r1, r2
 8002756:	461a      	mov	r2, r3
 8002758:	460b      	mov	r3, r1
 800275a:	80fb      	strh	r3, [r7, #6]
 800275c:	4613      	mov	r3, r2
 800275e:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002760:	7979      	ldrb	r1, [r7, #5]
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	2301      	movs	r3, #1
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	7f3b      	ldrb	r3, [r7, #28]
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	7e3b      	ldrb	r3, [r7, #24]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	460b      	mov	r3, r1
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff ff14 	bl	80025a2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800277a:	4603      	mov	r3, r0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af04      	add	r7, sp, #16
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4611      	mov	r1, r2
 8002790:	461a      	mov	r2, r3
 8002792:	460b      	mov	r3, r1
 8002794:	80fb      	strh	r3, [r7, #6]
 8002796:	4613      	mov	r3, r2
 8002798:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer, success, special;
    uint16_t i, j;
    if (useProgMem) {
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x26>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 80027a0:	2008      	movs	r0, #8
 80027a2:	f002 fead 	bl	8005500 <malloc>
 80027a6:	4603      	mov	r3, r0
 80027a8:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 80027aa:	2300      	movs	r3, #0
 80027ac:	833b      	strh	r3, [r7, #24]
 80027ae:	8b3a      	ldrh	r2, [r7, #24]
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	f080 80a1 	bcs.w	80028fa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
        if (useProgMem) {
 80027b8:	797b      	ldrb	r3, [r7, #5]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d018      	beq.n	80027f0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x6c>
            bank = pgm_read_byte(data + i++);
 80027be:	8b3b      	ldrh	r3, [r7, #24]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	833a      	strh	r2, [r7, #24]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4413      	add	r3, r2
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 80027ce:	8b3b      	ldrh	r3, [r7, #24]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	833a      	strh	r2, [r7, #24]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 80027de:	8b3b      	ldrh	r3, [r7, #24]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	833a      	strh	r2, [r7, #24]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	74fb      	strb	r3, [r7, #19]
 80027ee:	e017      	b.n	8002820 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x9c>
        } else {
            bank = data[i++];
 80027f0:	8b3b      	ldrh	r3, [r7, #24]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	833a      	strh	r2, [r7, #24]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	833a      	strh	r2, [r7, #24]
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4413      	add	r3, r2
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 8002810:	8b3b      	ldrh	r3, [r7, #24]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	833a      	strh	r2, [r7, #24]
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03a      	beq.n	800289c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x118>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8002826:	797b      	ldrb	r3, [r7, #5]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01d      	beq.n	8002868 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe4>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b04      	cmp	r3, #4
 8002830:	d905      	bls.n	800283e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xba>
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	4619      	mov	r1, r3
 8002836:	69f8      	ldr	r0, [r7, #28]
 8002838:	f003 fbaa 	bl	8005f90 <realloc>
 800283c:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800283e:	2300      	movs	r3, #0
 8002840:	82fb      	strh	r3, [r7, #22]
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	b29b      	uxth	r3, r3
 8002846:	8afa      	ldrh	r2, [r7, #22]
 8002848:	429a      	cmp	r2, r3
 800284a:	d211      	bcs.n	8002870 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xec>
 800284c:	8b3a      	ldrh	r2, [r7, #24]
 800284e:	8afb      	ldrh	r3, [r7, #22]
 8002850:	4413      	add	r3, r2
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	441a      	add	r2, r3
 8002856:	8afb      	ldrh	r3, [r7, #22]
 8002858:	69f9      	ldr	r1, [r7, #28]
 800285a:	440b      	add	r3, r1
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	8afb      	ldrh	r3, [r7, #22]
 8002862:	3301      	adds	r3, #1
 8002864:	82fb      	strh	r3, [r7, #22]
 8002866:	e7ec      	b.n	8002842 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
            } else {
                progBuffer = (uint8_t *)data + i;
 8002868:	8b3b      	ldrh	r3, [r7, #24]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	b29a      	uxth	r2, r3
 8002874:	7d79      	ldrb	r1, [r7, #21]
 8002876:	2300      	movs	r3, #0
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	2301      	movs	r3, #1
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	7d3b      	ldrb	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	460b      	mov	r3, r1
 8002884:	69f9      	ldr	r1, [r7, #28]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fe8b 	bl	80025a2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800288c:	4603      	mov	r3, r0
 800288e:	76fb      	strb	r3, [r7, #27]
            i += length;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	b29a      	uxth	r2, r3
 8002894:	8b3b      	ldrh	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	833b      	strh	r3, [r7, #24]
 800289a:	e022      	b.n	80028e2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 800289c:	797b      	ldrb	r3, [r7, #5]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x130>
                special = pgm_read_byte(data + i++);
 80028a2:	8b3b      	ldrh	r3, [r7, #24]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	833a      	strh	r2, [r7, #24]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	76bb      	strb	r3, [r7, #26]
 80028b2:	e007      	b.n	80028c4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x140>
            } else {
                special = data[i++];
 80028b4:	8b3b      	ldrh	r3, [r7, #24]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	833a      	strh	r2, [r7, #24]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 80028c4:	7ebb      	ldrb	r3, [r7, #26]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d109      	bne.n	80028de <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15a>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev_writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	799b      	ldrb	r3, [r3, #6]
 80028ce:	2232      	movs	r2, #50	; 0x32
 80028d0:	2138      	movs	r1, #56	; 0x38
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fa69 	bl	8001daa <_Z16I2Cdev_writeBytehhh>

                success = true;
 80028d8:	2301      	movs	r3, #1
 80028da:	76fb      	strb	r3, [r7, #27]
 80028dc:	e001      	b.n	80028e2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
            } else {
                // unknown special command
                success = false;
 80028de:	2300      	movs	r3, #0
 80028e0:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 80028e2:	7efb      	ldrb	r3, [r7, #27]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f47f af62 	bne.w	80027ae <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
            if (useProgMem) free(progBuffer);
 80028ea:	797b      	ldrb	r3, [r7, #5]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x172>
 80028f0:	69f8      	ldr	r0, [r7, #28]
 80028f2:	f002 fe0d 	bl	8005510 <free>
            return false; // uh oh
 80028f6:	2300      	movs	r3, #0
 80028f8:	e006      	b.n	8002908 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x184>
        }
    }
    if (useProgMem) free(progBuffer);
 80028fa:	797b      	ldrb	r3, [r7, #5]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x182>
 8002900:	69f8      	ldr	r0, [r7, #28]
 8002902:	f002 fe05 	bl	8005510 <free>
    return true;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	2301      	movs	r3, #1
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff ff2d 	bl	8002784 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 800292a:	4603      	mov	r3, r0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev_readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer, 0);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	799b      	ldrb	r3, [r3, #6]
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	2170      	movs	r1, #112	; 0x70
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fa2e 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev_readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer, 0);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	799b      	ldrb	r3, [r3, #6]
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	2171      	movs	r1, #113	; 0x71
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fa1d 	bl	8001daa <_Z16I2Cdev_writeBytehhh>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_MspInit+0x4c>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_MspInit+0x4c>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_MspInit+0x4c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_MspInit+0x4c>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_MspInit+0x4c>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_MspInit+0x4c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_I2C_MspInit+0x84>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d12c      	bne.n	8002a44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_I2C_MspInit+0x88>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_I2C_MspInit+0x88>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_I2C_MspInit+0x88>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0c:	2312      	movs	r3, #18
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	480c      	ldr	r0, [pc, #48]	; (8002a54 <HAL_I2C_MspInit+0x8c>)
 8002a24:	f000 fb3a 	bl	800309c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a36:	6413      	str	r3, [r2, #64]	; 0x40
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40005400 	.word	0x40005400
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <HAL_UART_MspInit+0x84>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d12b      	bne.n	8002ad2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_UART_MspInit+0x88>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <HAL_UART_MspInit+0x88>)
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_UART_MspInit+0x88>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_UART_MspInit+0x88>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <HAL_UART_MspInit+0x88>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_UART_MspInit+0x88>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac2:	2307      	movs	r3, #7
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <HAL_UART_MspInit+0x8c>)
 8002ace:	f000 fae5 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40004400 	.word	0x40004400
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <NMI_Handler+0x4>

08002aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <HardFault_Handler+0x4>

08002af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <MemManage_Handler+0x4>

08002afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b34:	f000 f95c 	bl	8002df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b40:	2020      	movs	r0, #32
 8002b42:	f7fe ff3d 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
	return 1;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_kill>:

int _kill(int pid, int sig)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b64:	f002 fca2 	bl	80054ac <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2216      	movs	r2, #22
 8002b6c:	601a      	str	r2, [r3, #0]
	return -1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_exit>:

void _exit (int status)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b82:	f04f 31ff 	mov.w	r1, #4294967295
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ffe7 	bl	8002b5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b8c:	e7fe      	b.n	8002b8c <_exit+0x12>

08002b8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e00a      	b.n	8002bb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ba0:	f3af 8000 	nop.w
 8002ba4:	4601      	mov	r1, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	60ba      	str	r2, [r7, #8]
 8002bac:	b2ca      	uxtb	r2, r1
 8002bae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbf0      	blt.n	8002ba0 <_read+0x12>
	}

return len;
 8002bbe:	687b      	ldr	r3, [r7, #4]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e009      	b.n	8002bee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	60ba      	str	r2, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3301      	adds	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbf1      	blt.n	8002bda <_write+0x12>
	}
	return len;
 8002bf6:	687b      	ldr	r3, [r7, #4]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_close>:

int _close(int file)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	return -1;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c28:	605a      	str	r2, [r3, #4]
	return 0;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_isatty>:

int _isatty(int file)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c40:	2301      	movs	r3, #1
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
	return 0;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f002 fc08 	bl	80054ac <__errno>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <_sbrk+0x64>)
 8002cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20018000 	.word	0x20018000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	200004d8 	.word	0x200004d8
 8002cd0:	200004f8 	.word	0x200004f8

08002cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <SystemInit+0x20>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <SystemInit+0x20>)
 8002ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cfe:	490e      	ldr	r1, [pc, #56]	; (8002d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d14:	4c0b      	ldr	r4, [pc, #44]	; (8002d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d22:	f7ff ffd7 	bl	8002cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f002 fbc7 	bl	80054b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2a:	f7fe fc9d 	bl	8001668 <main>
  bx  lr    
 8002d2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d3c:	08008f40 	.word	0x08008f40
  ldr r2, =_sbss
 8002d40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d44:	200004f8 	.word	0x200004f8

08002d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC_IRQHandler>
	...

08002d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_Init+0x40>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_Init+0x40>)
 8002d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_Init+0x40>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_Init+0x40>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d74:	2003      	movs	r0, #3
 8002d76:	f000 f94f 	bl	8003018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7a:	200f      	movs	r0, #15
 8002d7c:	f000 f808 	bl	8002d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d80:	f7ff fdfa 	bl	8002978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00

08002d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x54>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_InitTick+0x58>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f967 	bl	8003082 <HAL_SYSTICK_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00e      	b.n	8002ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b0f      	cmp	r3, #15
 8002dc2:	d80a      	bhi.n	8002dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f000 f92f 	bl	800302e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_InitTick+0x5c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000004 	.word	0x20000004
 8002de8:	2000000c 	.word	0x2000000c
 8002dec:	20000008 	.word	0x20000008

08002df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_IncTick+0x20>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x24>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_IncTick+0x24>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	2000000c 	.word	0x2000000c
 8002e14:	200004e4 	.word	0x200004e4

08002e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_GetTick+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	200004e4 	.word	0x200004e4

08002e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff ffee 	bl	8002e18 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d005      	beq.n	8002e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_Delay+0x44>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e56:	bf00      	nop
 8002e58:	f7ff ffde 	bl	8002e18 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f7      	bhi.n	8002e58 <HAL_Delay+0x28>
  {
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000000c 	.word	0x2000000c

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	; (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	; (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe4:	d301      	bcc.n	8002fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <SysTick_Config+0x40>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f7ff ff8e 	bl	8002f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <SysTick_Config+0x40>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <SysTick_Config+0x40>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff29 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302e:	b580      	push	{r7, lr}
 8003030:	b086      	sub	sp, #24
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003040:	f7ff ff3e 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 8003044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7ff ff8e 	bl	8002f6c <NVIC_EncodePriority>
 8003050:	4602      	mov	r2, r0
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5d 	bl	8002f18 <__NVIC_SetPriority>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff31 	bl	8002edc <__NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffa2 	bl	8002fd4 <SysTick_Config>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e159      	b.n	800336c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f040 8148 	bne.w	8003366 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d005      	beq.n	80030ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d130      	bne.n	8003150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 0201 	and.w	r2, r3, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d017      	beq.n	800318c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d123      	bne.n	80031e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0203 	and.w	r2, r3, #3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a2 	beq.w	8003366 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_GPIO_Init+0x2e8>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a56      	ldr	r2, [pc, #344]	; (8003384 <HAL_GPIO_Init+0x2e8>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_GPIO_Init+0x2e8>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800323e:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_GPIO_Init+0x2ec>)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a49      	ldr	r2, [pc, #292]	; (800338c <HAL_GPIO_Init+0x2f0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d019      	beq.n	800329e <HAL_GPIO_Init+0x202>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_GPIO_Init+0x2f4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0x1fe>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a47      	ldr	r2, [pc, #284]	; (8003394 <HAL_GPIO_Init+0x2f8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_Init+0x1fa>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a46      	ldr	r2, [pc, #280]	; (8003398 <HAL_GPIO_Init+0x2fc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x1f6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a45      	ldr	r2, [pc, #276]	; (800339c <HAL_GPIO_Init+0x300>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_Init+0x1f2>
 800328a:	2304      	movs	r3, #4
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x204>
 800328e:	2307      	movs	r3, #7
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x204>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x204>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x204>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x204>
 800329e:	2300      	movs	r3, #0
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032b0:	4935      	ldr	r1, [pc, #212]	; (8003388 <HAL_GPIO_Init+0x2ec>)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032be:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <HAL_GPIO_Init+0x304>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e2:	4a2f      	ldr	r2, [pc, #188]	; (80033a0 <HAL_GPIO_Init+0x304>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_GPIO_Init+0x304>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800330c:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <HAL_GPIO_Init+0x304>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_GPIO_Init+0x304>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_GPIO_Init+0x304>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_GPIO_Init+0x304>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <HAL_GPIO_Init+0x304>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	f67f aea2 	bls.w	80030b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	40013800 	.word	0x40013800
 800338c:	40020000 	.word	0x40020000
 8003390:	40020400 	.word	0x40020400
 8003394:	40020800 	.word	0x40020800
 8003398:	40020c00 	.word	0x40020c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40013c00 	.word	0x40013c00

080033a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e12b      	b.n	800360e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fafc 	bl	80029c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003408:	f001 fd12 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800340c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a81      	ldr	r2, [pc, #516]	; (8003618 <HAL_I2C_Init+0x274>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d807      	bhi.n	8003428 <HAL_I2C_Init+0x84>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a80      	ldr	r2, [pc, #512]	; (800361c <HAL_I2C_Init+0x278>)
 800341c:	4293      	cmp	r3, r2
 800341e:	bf94      	ite	ls
 8003420:	2301      	movls	r3, #1
 8003422:	2300      	movhi	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e006      	b.n	8003436 <HAL_I2C_Init+0x92>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a7d      	ldr	r2, [pc, #500]	; (8003620 <HAL_I2C_Init+0x27c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	bf94      	ite	ls
 8003430:	2301      	movls	r3, #1
 8003432:	2300      	movhi	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0e7      	b.n	800360e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a78      	ldr	r2, [pc, #480]	; (8003624 <HAL_I2C_Init+0x280>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0c9b      	lsrs	r3, r3, #18
 8003448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a6a      	ldr	r2, [pc, #424]	; (8003618 <HAL_I2C_Init+0x274>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d802      	bhi.n	8003478 <HAL_I2C_Init+0xd4>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3301      	adds	r3, #1
 8003476:	e009      	b.n	800348c <HAL_I2C_Init+0xe8>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	4a69      	ldr	r2, [pc, #420]	; (8003628 <HAL_I2C_Init+0x284>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	3301      	adds	r3, #1
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	430b      	orrs	r3, r1
 8003492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800349e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	495c      	ldr	r1, [pc, #368]	; (8003618 <HAL_I2C_Init+0x274>)
 80034a8:	428b      	cmp	r3, r1
 80034aa:	d819      	bhi.n	80034e0 <HAL_I2C_Init+0x13c>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1e59      	subs	r1, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034c0:	400b      	ands	r3, r1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_I2C_Init+0x138>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e59      	subs	r1, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034da:	e051      	b.n	8003580 <HAL_I2C_Init+0x1dc>
 80034dc:	2304      	movs	r3, #4
 80034de:	e04f      	b.n	8003580 <HAL_I2C_Init+0x1dc>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <HAL_I2C_Init+0x168>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e58      	subs	r0, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e012      	b.n	8003532 <HAL_I2C_Init+0x18e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1e58      	subs	r0, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	0099      	lsls	r1, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Init+0x196>
 8003536:	2301      	movs	r3, #1
 8003538:	e022      	b.n	8003580 <HAL_I2C_Init+0x1dc>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10e      	bne.n	8003560 <HAL_I2C_Init+0x1bc>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1e58      	subs	r0, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	440b      	add	r3, r1
 8003550:	fbb0 f3f3 	udiv	r3, r0, r3
 8003554:	3301      	adds	r3, #1
 8003556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355e:	e00f      	b.n	8003580 <HAL_I2C_Init+0x1dc>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	0099      	lsls	r1, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	6809      	ldr	r1, [r1, #0]
 8003584:	4313      	orrs	r3, r2
 8003586:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6911      	ldr	r1, [r2, #16]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	4311      	orrs	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	000186a0 	.word	0x000186a0
 800361c:	001e847f 	.word	0x001e847f
 8003620:	003d08ff 	.word	0x003d08ff
 8003624:	431bde83 	.word	0x431bde83
 8003628:	10624dd3 	.word	0x10624dd3

0800362c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	461a      	mov	r2, r3
 8003638:	460b      	mov	r3, r1
 800363a:	817b      	strh	r3, [r7, #10]
 800363c:	4613      	mov	r3, r2
 800363e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff fbea 	bl	8002e18 <HAL_GetTick>
 8003644:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b20      	cmp	r3, #32
 8003650:	f040 80e0 	bne.w	8003814 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2319      	movs	r3, #25
 800365a:	2201      	movs	r2, #1
 800365c:	4970      	ldr	r1, [pc, #448]	; (8003820 <HAL_I2C_Master_Transmit+0x1f4>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fde8 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
 800366c:	e0d3      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_I2C_Master_Transmit+0x50>
 8003678:	2302      	movs	r3, #2
 800367a:	e0cc      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1ea>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d007      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2221      	movs	r2, #33	; 0x21
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2210      	movs	r2, #16
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	893a      	ldrh	r2, [r7, #8]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_I2C_Master_Transmit+0x1f8>)
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	6a3a      	ldr	r2, [r7, #32]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fbbc 	bl	8003e68 <I2C_MasterRequestWrite>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e08d      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003710:	e066      	b.n	80037e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fe62 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06b      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_I2C_Master_Transmit+0x188>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	6a39      	ldr	r1, [r7, #32]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fe52 	bl	8004462 <I2C_WaitOnBTFFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d107      	bne.n	80037dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e01a      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d194      	bne.n	8003712 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	00100002 	.word	0x00100002
 8003824:	ffff0000 	.word	0xffff0000

08003828 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	460b      	mov	r3, r1
 8003836:	817b      	strh	r3, [r7, #10]
 8003838:	4613      	mov	r3, r2
 800383a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff faec 	bl	8002e18 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	f040 820b 	bne.w	8003c66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2319      	movs	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	497c      	ldr	r1, [pc, #496]	; (8003a4c <HAL_I2C_Master_Receive+0x224>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fcea 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
 8003868:	e1fe      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_I2C_Master_Receive+0x50>
 8003874:	2302      	movs	r3, #2
 8003876:	e1f7      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d007      	beq.n	800389e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2222      	movs	r2, #34	; 0x22
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2210      	movs	r2, #16
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	893a      	ldrh	r2, [r7, #8]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a5c      	ldr	r2, [pc, #368]	; (8003a50 <HAL_I2C_Master_Receive+0x228>)
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fb40 	bl	8003f6c <I2C_MasterRequestRead>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1b8      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d113      	bne.n	8003926 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e18c      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	2b01      	cmp	r3, #1
 800392c:	d11b      	bne.n	8003966 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e16c      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b02      	cmp	r3, #2
 800396c:	d11b      	bne.n	80039a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	e14c      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039cc:	e138      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	f200 80f1 	bhi.w	8003bba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d123      	bne.n	8003a28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fd7d 	bl	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e139      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a26:	e10b      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d14e      	bne.n	8003ace <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	4906      	ldr	r1, [pc, #24]	; (8003a54 <HAL_I2C_Master_Receive+0x22c>)
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fbfa 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e10e      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000
 8003a54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003acc:	e0b8      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4966      	ldr	r1, [pc, #408]	; (8003c70 <HAL_I2C_Master_Receive+0x448>)
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fbab 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0bf      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	494f      	ldr	r1, [pc, #316]	; (8003c70 <HAL_I2C_Master_Receive+0x448>)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fb7d 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e091      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb8:	e042      	b.n	8003c40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fc90 	bl	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e04c      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d118      	bne.n	8003c40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f47f aec2 	bne.w	80039ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	00010004 	.word	0x00010004

08003c74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	817b      	strh	r3, [r7, #10]
 8003c86:	460b      	mov	r3, r1
 8003c88:	813b      	strh	r3, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c8e:	f7ff f8c3 	bl	8002e18 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	f040 80d9 	bne.w	8003e54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2319      	movs	r3, #25
 8003ca8:	2201      	movs	r2, #1
 8003caa:	496d      	ldr	r1, [pc, #436]	; (8003e60 <HAL_I2C_Mem_Write+0x1ec>)
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fac1 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0cc      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_Mem_Write+0x56>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0c5      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d007      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2221      	movs	r2, #33	; 0x21
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a4d      	ldr	r2, [pc, #308]	; (8003e64 <HAL_I2C_Mem_Write+0x1f0>)
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d32:	88f8      	ldrh	r0, [r7, #6]
 8003d34:	893a      	ldrh	r2, [r7, #8]
 8003d36:	8979      	ldrh	r1, [r7, #10]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4603      	mov	r3, r0
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f9e0 	bl	8004108 <I2C_RequestMemoryWrite>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d052      	beq.n	8003df4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e081      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb42 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06b      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_I2C_Mem_Write+0x180>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d017      	beq.n	8003df4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1aa      	bne.n	8003d52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fb2e 	bl	8004462 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e016      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00100002 	.word	0x00100002
 8003e64:	ffff0000 	.word	0xffff0000

08003e68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d006      	beq.n	8003e92 <I2C_MasterRequestWrite+0x2a>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d003      	beq.n	8003e92 <I2C_MasterRequestWrite+0x2a>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e90:	d108      	bne.n	8003ea4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e00b      	b.n	8003ebc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2b12      	cmp	r3, #18
 8003eaa:	d107      	bne.n	8003ebc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f9b3 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d103      	bne.n	8003eec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e035      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef8:	d108      	bne.n	8003f0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f08:	611a      	str	r2, [r3, #16]
 8003f0a:	e01b      	b.n	8003f44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	11db      	asrs	r3, r3, #7
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0306 	and.w	r3, r3, #6
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f063 030f 	orn	r3, r3, #15
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	490e      	ldr	r1, [pc, #56]	; (8003f64 <I2C_MasterRequestWrite+0xfc>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f9d9 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e010      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4907      	ldr	r1, [pc, #28]	; (8003f68 <I2C_MasterRequestWrite+0x100>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f9c9 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	00010008 	.word	0x00010008
 8003f68:	00010002 	.word	0x00010002

08003f6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d006      	beq.n	8003fa6 <I2C_MasterRequestRead+0x3a>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <I2C_MasterRequestRead+0x3a>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e00b      	b.n	8003fd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b11      	cmp	r3, #17
 8003fbe:	d107      	bne.n	8003fd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f929 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d103      	bne.n	8004000 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e079      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	e05f      	b.n	80040e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004020:	897b      	ldrh	r3, [r7, #10]
 8004022:	11db      	asrs	r3, r3, #7
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0306 	and.w	r3, r3, #6
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f063 030f 	orn	r3, r3, #15
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4930      	ldr	r1, [pc, #192]	; (8004100 <I2C_MasterRequestRead+0x194>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f94f 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e054      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4929      	ldr	r1, [pc, #164]	; (8004104 <I2C_MasterRequestRead+0x198>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f93f 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e044      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004092:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8c7 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d103      	bne.n	80040c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e017      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	11db      	asrs	r3, r3, #7
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f063 030e 	orn	r3, r3, #14
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4907      	ldr	r1, [pc, #28]	; (8004104 <I2C_MasterRequestRead+0x198>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f8fb 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010008 	.word	0x00010008
 8004104:	00010002 	.word	0x00010002

08004108 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004130:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	2200      	movs	r2, #0
 800413a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f878 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004158:	d103      	bne.n	8004162 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e05f      	b.n	8004226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004174:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	492d      	ldr	r1, [pc, #180]	; (8004230 <I2C_RequestMemoryWrite+0x128>)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f8b0 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e04c      	b.n	8004226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	6a39      	ldr	r1, [r7, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f91a 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e02b      	b.n	8004226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	611a      	str	r2, [r3, #16]
 80041de:	e021      	b.n	8004224 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f8f4 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d107      	bne.n	8004216 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e005      	b.n	8004226 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800421a:	893b      	ldrh	r3, [r7, #8]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	00010002 	.word	0x00010002

08004234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004244:	e025      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d021      	beq.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fe fde3 	bl	8002e18 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e023      	b.n	80042da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10d      	bne.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	e00c      	b.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d0b6      	beq.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f0:	e051      	b.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d123      	bne.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800431a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e046      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d021      	beq.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fd61 	bl	8002e18 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e020      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10c      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e00b      	b.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d18d      	bne.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	e02d      	b.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8ce 	bl	8004590 <I2C_IsAcknowledgeFailed>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e02d      	b.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d021      	beq.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fd07 	bl	8002e18 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e007      	b.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d1ca      	bne.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800446e:	e02d      	b.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f88d 	bl	8004590 <I2C_IsAcknowledgeFailed>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e02d      	b.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d021      	beq.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004488:	f7fe fcc6 	bl	8002e18 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d1ca      	bne.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f0:	e042      	b.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d119      	bne.n	8004534 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0210 	mvn.w	r2, #16
 8004508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e029      	b.n	8004588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fe fc70 	bl	8002e18 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d1b5      	bne.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d11b      	bne.n	80045e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0204 	orr.w	r2, r3, #4
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e264      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460e:	4ba3      	ldr	r3, [pc, #652]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4ba0      	ldr	r3, [pc, #640]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b9d      	ldr	r3, [pc, #628]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b99      	ldr	r3, [pc, #612]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e23f      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b91      	ldr	r3, [pc, #580]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a90      	ldr	r2, [pc, #576]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b8b      	ldr	r3, [pc, #556]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a8a      	ldr	r2, [pc, #552]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a87      	ldr	r2, [pc, #540]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a83      	ldr	r2, [pc, #524]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b81      	ldr	r3, [pc, #516]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a80      	ldr	r2, [pc, #512]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fe fbb6 	bl	8002e18 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fe fbb2 	bl	8002e18 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e204      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe fba2 	bl	8002e18 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fe fb9e 	bl	8002e18 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1f0      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b6c      	ldr	r3, [pc, #432]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b62      	ldr	r3, [pc, #392]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11c      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b5f      	ldr	r3, [pc, #380]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d116      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1c4      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b56      	ldr	r3, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4952      	ldr	r1, [pc, #328]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	e03a      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCC_OscConfig+0x2b0>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fe fb57 	bl	8002e18 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476e:	f7fe fb53 	bl	8002e18 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1a5      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	4b46      	ldr	r3, [pc, #280]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4940      	ldr	r1, [pc, #256]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <HAL_RCC_OscConfig+0x2b0>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe fb36 	bl	8002e18 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fe fb32 	bl	8002e18 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e184      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d030      	beq.n	800483c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_RCC_OscConfig+0x2b4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe fb16 	bl	8002e18 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fe fb12 	bl	8002e18 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e164      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	4b26      	ldr	r3, [pc, #152]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
 800480e:	e015      	b.n	800483c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x2b4>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fe faff 	bl	8002e18 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481e:	f7fe fafb 	bl	8002e18 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e14d      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80a0 	beq.w	800498a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d121      	bne.n	80048ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fe fac1 	bl	8002e18 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e011      	b.n	80048be <HAL_RCC_OscConfig+0x2ce>
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800
 80048a0:	42470000 	.word	0x42470000
 80048a4:	42470e80 	.word	0x42470e80
 80048a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ac:	f7fe fab4 	bl	8002e18 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e106      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <HAL_RCC_OscConfig+0x4e4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
 80048d2:	4b81      	ldr	r3, [pc, #516]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a80      	ldr	r2, [pc, #512]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x32a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x312>
 80048e8:	4b7b      	ldr	r3, [pc, #492]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a7a      	ldr	r2, [pc, #488]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	4b78      	ldr	r3, [pc, #480]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a77      	ldr	r2, [pc, #476]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x32a>
 8004902:	4b75      	ldr	r3, [pc, #468]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a74      	ldr	r2, [pc, #464]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6713      	str	r3, [r2, #112]	; 0x70
 800490e:	4b72      	ldr	r3, [pc, #456]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fe fa79 	bl	8002e18 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe fa75 	bl	8002e18 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0c5      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x33a>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe fa63 	bl	8002e18 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fe fa5f 	bl	8002e18 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0af      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	4b5a      	ldr	r3, [pc, #360]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a55      	ldr	r2, [pc, #340]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 809b 	beq.w	8004aca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d05c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d141      	bne.n	8004a2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b4c      	ldr	r3, [pc, #304]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fe fa33 	bl	8002e18 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fa2f 	bl	8002e18 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e081      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c8:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	019b      	lsls	r3, r3, #6
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	4937      	ldr	r1, [pc, #220]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fe:	4b37      	ldr	r3, [pc, #220]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fe fa08 	bl	8002e18 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe fa04 	bl	8002e18 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e056      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x41c>
 8004a2a:	e04e      	b.n	8004aca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fe f9f1 	bl	8002e18 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fe f9ed 	bl	8002e18 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e03f      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4c:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x44a>
 8004a58:	e037      	b.n	8004aca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e032      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a66:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d028      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d121      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d11a      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	42470060 	.word	0x42470060

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0cc      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90c      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b8      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b4c:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a52      	ldr	r2, [pc, #328]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	494d      	ldr	r1, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d044      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d119      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e06f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e067      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4934      	ldr	r1, [pc, #208]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd0:	f7fe f922 	bl	8002e18 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fe f91e 	bl	8002e18 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e04f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 020c 	and.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1eb      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20c      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4916      	ldr	r1, [pc, #88]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	490e      	ldr	r1, [pc, #56]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c66:	f000 f821 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	490a      	ldr	r1, [pc, #40]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	5ccb      	ldrb	r3, [r1, r3]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe f882 	bl	8002d90 <HAL_InitTick>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023c00 	.word	0x40023c00
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	08008b34 	.word	0x08008b34
 8004ca4:	20000004 	.word	0x20000004
 8004ca8:	20000008 	.word	0x20000008

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	b5b0      	push	{r4, r5, r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6079      	str	r1, [r7, #4]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	60f9      	str	r1, [r7, #12]
 8004cba:	2100      	movs	r1, #0
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc2:	4952      	ldr	r1, [pc, #328]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004cc4:	6889      	ldr	r1, [r1, #8]
 8004cc6:	f001 010c 	and.w	r1, r1, #12
 8004cca:	2908      	cmp	r1, #8
 8004ccc:	d00d      	beq.n	8004cea <HAL_RCC_GetSysClockFreq+0x3e>
 8004cce:	2908      	cmp	r1, #8
 8004cd0:	f200 8094 	bhi.w	8004dfc <HAL_RCC_GetSysClockFreq+0x150>
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0x32>
 8004cd8:	2904      	cmp	r1, #4
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8004cdc:	e08e      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cde:	4b4c      	ldr	r3, [pc, #304]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ce0:	60bb      	str	r3, [r7, #8]
       break;
 8004ce2:	e08e      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ce6:	60bb      	str	r3, [r7, #8]
      break;
 8004ce8:	e08b      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cea:	4948      	ldr	r1, [pc, #288]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004cec:	6849      	ldr	r1, [r1, #4]
 8004cee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004cf2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf4:	4945      	ldr	r1, [pc, #276]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004cf6:	6849      	ldr	r1, [r1, #4]
 8004cf8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	d024      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d00:	4942      	ldr	r1, [pc, #264]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004d02:	6849      	ldr	r1, [r1, #4]
 8004d04:	0989      	lsrs	r1, r1, #6
 8004d06:	4608      	mov	r0, r1
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d10:	f04f 0500 	mov.w	r5, #0
 8004d14:	ea00 0204 	and.w	r2, r0, r4
 8004d18:	ea01 0305 	and.w	r3, r1, r5
 8004d1c:	493d      	ldr	r1, [pc, #244]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d1e:	fb01 f003 	mul.w	r0, r1, r3
 8004d22:	2100      	movs	r1, #0
 8004d24:	fb01 f102 	mul.w	r1, r1, r2
 8004d28:	1844      	adds	r4, r0, r1
 8004d2a:	493a      	ldr	r1, [pc, #232]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d2c:	fba2 0101 	umull	r0, r1, r2, r1
 8004d30:	1863      	adds	r3, r4, r1
 8004d32:	4619      	mov	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	f7fb ff8c 	bl	8000c58 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e04a      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	461a      	mov	r2, r3
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d5a:	f04f 0100 	mov.w	r1, #0
 8004d5e:	ea02 0400 	and.w	r4, r2, r0
 8004d62:	ea03 0501 	and.w	r5, r3, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	014b      	lsls	r3, r1, #5
 8004d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d78:	0142      	lsls	r2, r0, #5
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	1b00      	subs	r0, r0, r4
 8004d80:	eb61 0105 	sbc.w	r1, r1, r5
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	018b      	lsls	r3, r1, #6
 8004d8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d92:	0182      	lsls	r2, r0, #6
 8004d94:	1a12      	subs	r2, r2, r0
 8004d96:	eb63 0301 	sbc.w	r3, r3, r1
 8004d9a:	f04f 0000 	mov.w	r0, #0
 8004d9e:	f04f 0100 	mov.w	r1, #0
 8004da2:	00d9      	lsls	r1, r3, #3
 8004da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004da8:	00d0      	lsls	r0, r2, #3
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	1912      	adds	r2, r2, r4
 8004db0:	eb45 0303 	adc.w	r3, r5, r3
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	0299      	lsls	r1, r3, #10
 8004dbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dc2:	0290      	lsls	r0, r2, #10
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f7fb ff40 	bl	8000c58 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	60bb      	str	r3, [r7, #8]
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8004dfe:	60bb      	str	r3, [r7, #8]
      break;
 8004e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e02:	68bb      	ldr	r3, [r7, #8]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	017d7840 	.word	0x017d7840

08004e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000004 	.word	0x20000004

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a9b      	lsrs	r3, r3, #10
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4903      	ldr	r1, [pc, #12]	; (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40023800 	.word	0x40023800
 8004e54:	08008b44 	.word	0x08008b44

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e5c:	f7ff ffdc 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	08008b44 	.word	0x08008b44

08004e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e03f      	b.n	8004f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fdd6 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f929 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b08a      	sub	sp, #40	; 0x28
 8004f1e:	af02      	add	r7, sp, #8
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d17c      	bne.n	8005034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_UART_Transmit+0x2c>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e075      	b.n	8005036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_UART_Transmit+0x3e>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e06e      	b.n	8005036 <HAL_UART_Transmit+0x11c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2221      	movs	r2, #33	; 0x21
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6e:	f7fd ff53 	bl	8002e18 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	d108      	bne.n	8004f9c <HAL_UART_Transmit+0x82>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e003      	b.n	8004fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fac:	e02a      	b.n	8005004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f840 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e036      	b.n	8005036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cf      	bne.n	8004fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f810 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b090      	sub	sp, #64	; 0x40
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	e050      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d04c      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	f7fd fedb 	bl	8002e18 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506a:	429a      	cmp	r2, r3
 800506c:	d241      	bcs.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508e:	637a      	str	r2, [r7, #52]	; 0x34
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c2:	623a      	str	r2, [r7, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e00f      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d09f      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3740      	adds	r7, #64	; 0x40
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	b09f      	sub	sp, #124	; 0x7c
 8005122:	af00      	add	r7, sp, #0
 8005124:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	68d9      	ldr	r1, [r3, #12]
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	ea40 0301 	orr.w	r3, r0, r1
 800513c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800513e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	431a      	orrs	r2, r3
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	431a      	orrs	r2, r3
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4313      	orrs	r3, r2
 8005154:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005160:	f021 010c 	bic.w	r1, r1, #12
 8005164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800516a:	430b      	orrs	r3, r1
 800516c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800516e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	6999      	ldr	r1, [r3, #24]
 800517c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	ea40 0301 	orr.w	r3, r0, r1
 8005184:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4bc5      	ldr	r3, [pc, #788]	; (80054a0 <UART_SetConfig+0x384>)
 800518c:	429a      	cmp	r2, r3
 800518e:	d004      	beq.n	800519a <UART_SetConfig+0x7e>
 8005190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4bc3      	ldr	r3, [pc, #780]	; (80054a4 <UART_SetConfig+0x388>)
 8005196:	429a      	cmp	r2, r3
 8005198:	d103      	bne.n	80051a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800519a:	f7ff fe5d 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 800519e:	6778      	str	r0, [r7, #116]	; 0x74
 80051a0:	e002      	b.n	80051a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051a2:	f7ff fe45 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80051a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b0:	f040 80b6 	bne.w	8005320 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b6:	461c      	mov	r4, r3
 80051b8:	f04f 0500 	mov.w	r5, #0
 80051bc:	4622      	mov	r2, r4
 80051be:	462b      	mov	r3, r5
 80051c0:	1891      	adds	r1, r2, r2
 80051c2:	6439      	str	r1, [r7, #64]	; 0x40
 80051c4:	415b      	adcs	r3, r3
 80051c6:	647b      	str	r3, [r7, #68]	; 0x44
 80051c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051cc:	1912      	adds	r2, r2, r4
 80051ce:	eb45 0303 	adc.w	r3, r5, r3
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	00d9      	lsls	r1, r3, #3
 80051dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e0:	00d0      	lsls	r0, r2, #3
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	1911      	adds	r1, r2, r4
 80051e8:	6639      	str	r1, [r7, #96]	; 0x60
 80051ea:	416b      	adcs	r3, r5
 80051ec:	667b      	str	r3, [r7, #100]	; 0x64
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80051fc:	415b      	adcs	r3, r3
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005204:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005208:	f7fb fd26 	bl	8000c58 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4ba5      	ldr	r3, [pc, #660]	; (80054a8 <UART_SetConfig+0x38c>)
 8005212:	fba3 2302 	umull	r2, r3, r3, r2
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	011e      	lsls	r6, r3, #4
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521c:	461c      	mov	r4, r3
 800521e:	f04f 0500 	mov.w	r5, #0
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	1891      	adds	r1, r2, r2
 8005228:	6339      	str	r1, [r7, #48]	; 0x30
 800522a:	415b      	adcs	r3, r3
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
 800522e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005232:	1912      	adds	r2, r2, r4
 8005234:	eb45 0303 	adc.w	r3, r5, r3
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	00d9      	lsls	r1, r3, #3
 8005242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005246:	00d0      	lsls	r0, r2, #3
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	1911      	adds	r1, r2, r4
 800524e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005250:	416b      	adcs	r3, r5
 8005252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	461a      	mov	r2, r3
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	1891      	adds	r1, r2, r2
 8005260:	62b9      	str	r1, [r7, #40]	; 0x28
 8005262:	415b      	adcs	r3, r3
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800526a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800526e:	f7fb fcf3 	bl	8000c58 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b8c      	ldr	r3, [pc, #560]	; (80054a8 <UART_SetConfig+0x38c>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a87      	ldr	r2, [pc, #540]	; (80054a8 <UART_SetConfig+0x38c>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005298:	441e      	add	r6, r3
 800529a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529c:	4618      	mov	r0, r3
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	1894      	adds	r4, r2, r2
 80052a8:	623c      	str	r4, [r7, #32]
 80052aa:	415b      	adcs	r3, r3
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052b2:	1812      	adds	r2, r2, r0
 80052b4:	eb41 0303 	adc.w	r3, r1, r3
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	f04f 0500 	mov.w	r5, #0
 80052c0:	00dd      	lsls	r5, r3, #3
 80052c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c6:	00d4      	lsls	r4, r2, #3
 80052c8:	4622      	mov	r2, r4
 80052ca:	462b      	mov	r3, r5
 80052cc:	1814      	adds	r4, r2, r0
 80052ce:	653c      	str	r4, [r7, #80]	; 0x50
 80052d0:	414b      	adcs	r3, r1
 80052d2:	657b      	str	r3, [r7, #84]	; 0x54
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	61b9      	str	r1, [r7, #24]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052ee:	f7fb fcb3 	bl	8000c58 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b6c      	ldr	r3, [pc, #432]	; (80054a8 <UART_SetConfig+0x38c>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a67      	ldr	r2, [pc, #412]	; (80054a8 <UART_SetConfig+0x38c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4432      	add	r2, r6
 800531c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800531e:	e0b9      	b.n	8005494 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005322:	461c      	mov	r4, r3
 8005324:	f04f 0500 	mov.w	r5, #0
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	1891      	adds	r1, r2, r2
 800532e:	6139      	str	r1, [r7, #16]
 8005330:	415b      	adcs	r3, r3
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005338:	1912      	adds	r2, r2, r4
 800533a:	eb45 0303 	adc.w	r3, r5, r3
 800533e:	f04f 0000 	mov.w	r0, #0
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	00d9      	lsls	r1, r3, #3
 8005348:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800534c:	00d0      	lsls	r0, r2, #3
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	eb12 0804 	adds.w	r8, r2, r4
 8005356:	eb43 0905 	adc.w	r9, r3, r5
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4618      	mov	r0, r3
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	008b      	lsls	r3, r1, #2
 800536e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005372:	0082      	lsls	r2, r0, #2
 8005374:	4640      	mov	r0, r8
 8005376:	4649      	mov	r1, r9
 8005378:	f7fb fc6e 	bl	8000c58 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b49      	ldr	r3, [pc, #292]	; (80054a8 <UART_SetConfig+0x38c>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011e      	lsls	r6, r3, #4
 800538a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538c:	4618      	mov	r0, r3
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	1894      	adds	r4, r2, r2
 8005398:	60bc      	str	r4, [r7, #8]
 800539a:	415b      	adcs	r3, r3
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a2:	1812      	adds	r2, r2, r0
 80053a4:	eb41 0303 	adc.w	r3, r1, r3
 80053a8:	f04f 0400 	mov.w	r4, #0
 80053ac:	f04f 0500 	mov.w	r5, #0
 80053b0:	00dd      	lsls	r5, r3, #3
 80053b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053b6:	00d4      	lsls	r4, r2, #3
 80053b8:	4622      	mov	r2, r4
 80053ba:	462b      	mov	r3, r5
 80053bc:	1814      	adds	r4, r2, r0
 80053be:	64bc      	str	r4, [r7, #72]	; 0x48
 80053c0:	414b      	adcs	r3, r1
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053dc:	0082      	lsls	r2, r0, #2
 80053de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053e2:	f7fb fc39 	bl	8000c58 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b2f      	ldr	r3, [pc, #188]	; (80054a8 <UART_SetConfig+0x38c>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <UART_SetConfig+0x38c>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540a:	441e      	add	r6, r3
 800540c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800540e:	4618      	mov	r0, r3
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	1894      	adds	r4, r2, r2
 800541a:	603c      	str	r4, [r7, #0]
 800541c:	415b      	adcs	r3, r3
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005424:	1812      	adds	r2, r2, r0
 8005426:	eb41 0303 	adc.w	r3, r1, r3
 800542a:	f04f 0400 	mov.w	r4, #0
 800542e:	f04f 0500 	mov.w	r5, #0
 8005432:	00dd      	lsls	r5, r3, #3
 8005434:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005438:	00d4      	lsls	r4, r2, #3
 800543a:	4622      	mov	r2, r4
 800543c:	462b      	mov	r3, r5
 800543e:	eb12 0a00 	adds.w	sl, r2, r0
 8005442:	eb43 0b01 	adc.w	fp, r3, r1
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	f04f 0100 	mov.w	r1, #0
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	008b      	lsls	r3, r1, #2
 800545a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800545e:	0082      	lsls	r2, r0, #2
 8005460:	4650      	mov	r0, sl
 8005462:	4659      	mov	r1, fp
 8005464:	f7fb fbf8 	bl	8000c58 <__aeabi_uldivmod>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <UART_SetConfig+0x38c>)
 800546e:	fba3 1302 	umull	r1, r3, r3, r2
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2164      	movs	r1, #100	; 0x64
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	3332      	adds	r3, #50	; 0x32
 8005480:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <UART_SetConfig+0x38c>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4432      	add	r2, r6
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	377c      	adds	r7, #124	; 0x7c
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549e:	bf00      	nop
 80054a0:	40011000 	.word	0x40011000
 80054a4:	40011400 	.word	0x40011400
 80054a8:	51eb851f 	.word	0x51eb851f

080054ac <__errno>:
 80054ac:	4b01      	ldr	r3, [pc, #4]	; (80054b4 <__errno+0x8>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000010 	.word	0x20000010

080054b8 <__libc_init_array>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4d0d      	ldr	r5, [pc, #52]	; (80054f0 <__libc_init_array+0x38>)
 80054bc:	4c0d      	ldr	r4, [pc, #52]	; (80054f4 <__libc_init_array+0x3c>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	2600      	movs	r6, #0
 80054c4:	42a6      	cmp	r6, r4
 80054c6:	d109      	bne.n	80054dc <__libc_init_array+0x24>
 80054c8:	4d0b      	ldr	r5, [pc, #44]	; (80054f8 <__libc_init_array+0x40>)
 80054ca:	4c0c      	ldr	r4, [pc, #48]	; (80054fc <__libc_init_array+0x44>)
 80054cc:	f002 fed0 	bl	8008270 <_init>
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	2600      	movs	r6, #0
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	d105      	bne.n	80054e6 <__libc_init_array+0x2e>
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e0:	4798      	blx	r3
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7ee      	b.n	80054c4 <__libc_init_array+0xc>
 80054e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ea:	4798      	blx	r3
 80054ec:	3601      	adds	r6, #1
 80054ee:	e7f2      	b.n	80054d6 <__libc_init_array+0x1e>
 80054f0:	08008f34 	.word	0x08008f34
 80054f4:	08008f34 	.word	0x08008f34
 80054f8:	08008f34 	.word	0x08008f34
 80054fc:	08008f3c 	.word	0x08008f3c

08005500 <malloc>:
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <malloc+0xc>)
 8005502:	4601      	mov	r1, r0
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f000 b87f 	b.w	8005608 <_malloc_r>
 800550a:	bf00      	nop
 800550c:	20000010 	.word	0x20000010

08005510 <free>:
 8005510:	4b02      	ldr	r3, [pc, #8]	; (800551c <free+0xc>)
 8005512:	4601      	mov	r1, r0
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	f000 b827 	b.w	8005568 <_free_r>
 800551a:	bf00      	nop
 800551c:	20000010 	.word	0x20000010

08005520 <memcmp>:
 8005520:	b530      	push	{r4, r5, lr}
 8005522:	3901      	subs	r1, #1
 8005524:	2400      	movs	r4, #0
 8005526:	42a2      	cmp	r2, r4
 8005528:	d101      	bne.n	800552e <memcmp+0xe>
 800552a:	2000      	movs	r0, #0
 800552c:	e005      	b.n	800553a <memcmp+0x1a>
 800552e:	5d03      	ldrb	r3, [r0, r4]
 8005530:	3401      	adds	r4, #1
 8005532:	5d0d      	ldrb	r5, [r1, r4]
 8005534:	42ab      	cmp	r3, r5
 8005536:	d0f6      	beq.n	8005526 <memcmp+0x6>
 8005538:	1b58      	subs	r0, r3, r5
 800553a:	bd30      	pop	{r4, r5, pc}

0800553c <memcpy>:
 800553c:	440a      	add	r2, r1
 800553e:	4291      	cmp	r1, r2
 8005540:	f100 33ff 	add.w	r3, r0, #4294967295
 8005544:	d100      	bne.n	8005548 <memcpy+0xc>
 8005546:	4770      	bx	lr
 8005548:	b510      	push	{r4, lr}
 800554a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005552:	4291      	cmp	r1, r2
 8005554:	d1f9      	bne.n	800554a <memcpy+0xe>
 8005556:	bd10      	pop	{r4, pc}

08005558 <memset>:
 8005558:	4402      	add	r2, r0
 800555a:	4603      	mov	r3, r0
 800555c:	4293      	cmp	r3, r2
 800555e:	d100      	bne.n	8005562 <memset+0xa>
 8005560:	4770      	bx	lr
 8005562:	f803 1b01 	strb.w	r1, [r3], #1
 8005566:	e7f9      	b.n	800555c <memset+0x4>

08005568 <_free_r>:
 8005568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800556a:	2900      	cmp	r1, #0
 800556c:	d048      	beq.n	8005600 <_free_r+0x98>
 800556e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005572:	9001      	str	r0, [sp, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f1a1 0404 	sub.w	r4, r1, #4
 800557a:	bfb8      	it	lt
 800557c:	18e4      	addlt	r4, r4, r3
 800557e:	f001 fbbb 	bl	8006cf8 <__malloc_lock>
 8005582:	4a20      	ldr	r2, [pc, #128]	; (8005604 <_free_r+0x9c>)
 8005584:	9801      	ldr	r0, [sp, #4]
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	4615      	mov	r5, r2
 800558a:	b933      	cbnz	r3, 800559a <_free_r+0x32>
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6014      	str	r4, [r2, #0]
 8005590:	b003      	add	sp, #12
 8005592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005596:	f001 bbb5 	b.w	8006d04 <__malloc_unlock>
 800559a:	42a3      	cmp	r3, r4
 800559c:	d90b      	bls.n	80055b6 <_free_r+0x4e>
 800559e:	6821      	ldr	r1, [r4, #0]
 80055a0:	1862      	adds	r2, r4, r1
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bf04      	itt	eq
 80055a6:	681a      	ldreq	r2, [r3, #0]
 80055a8:	685b      	ldreq	r3, [r3, #4]
 80055aa:	6063      	str	r3, [r4, #4]
 80055ac:	bf04      	itt	eq
 80055ae:	1852      	addeq	r2, r2, r1
 80055b0:	6022      	streq	r2, [r4, #0]
 80055b2:	602c      	str	r4, [r5, #0]
 80055b4:	e7ec      	b.n	8005590 <_free_r+0x28>
 80055b6:	461a      	mov	r2, r3
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b10b      	cbz	r3, 80055c0 <_free_r+0x58>
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d9fa      	bls.n	80055b6 <_free_r+0x4e>
 80055c0:	6811      	ldr	r1, [r2, #0]
 80055c2:	1855      	adds	r5, r2, r1
 80055c4:	42a5      	cmp	r5, r4
 80055c6:	d10b      	bne.n	80055e0 <_free_r+0x78>
 80055c8:	6824      	ldr	r4, [r4, #0]
 80055ca:	4421      	add	r1, r4
 80055cc:	1854      	adds	r4, r2, r1
 80055ce:	42a3      	cmp	r3, r4
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	d1dd      	bne.n	8005590 <_free_r+0x28>
 80055d4:	681c      	ldr	r4, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	6053      	str	r3, [r2, #4]
 80055da:	4421      	add	r1, r4
 80055dc:	6011      	str	r1, [r2, #0]
 80055de:	e7d7      	b.n	8005590 <_free_r+0x28>
 80055e0:	d902      	bls.n	80055e8 <_free_r+0x80>
 80055e2:	230c      	movs	r3, #12
 80055e4:	6003      	str	r3, [r0, #0]
 80055e6:	e7d3      	b.n	8005590 <_free_r+0x28>
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	1961      	adds	r1, r4, r5
 80055ec:	428b      	cmp	r3, r1
 80055ee:	bf04      	itt	eq
 80055f0:	6819      	ldreq	r1, [r3, #0]
 80055f2:	685b      	ldreq	r3, [r3, #4]
 80055f4:	6063      	str	r3, [r4, #4]
 80055f6:	bf04      	itt	eq
 80055f8:	1949      	addeq	r1, r1, r5
 80055fa:	6021      	streq	r1, [r4, #0]
 80055fc:	6054      	str	r4, [r2, #4]
 80055fe:	e7c7      	b.n	8005590 <_free_r+0x28>
 8005600:	b003      	add	sp, #12
 8005602:	bd30      	pop	{r4, r5, pc}
 8005604:	200004dc 	.word	0x200004dc

08005608 <_malloc_r>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	1ccd      	adds	r5, r1, #3
 800560c:	f025 0503 	bic.w	r5, r5, #3
 8005610:	3508      	adds	r5, #8
 8005612:	2d0c      	cmp	r5, #12
 8005614:	bf38      	it	cc
 8005616:	250c      	movcc	r5, #12
 8005618:	2d00      	cmp	r5, #0
 800561a:	4606      	mov	r6, r0
 800561c:	db01      	blt.n	8005622 <_malloc_r+0x1a>
 800561e:	42a9      	cmp	r1, r5
 8005620:	d903      	bls.n	800562a <_malloc_r+0x22>
 8005622:	230c      	movs	r3, #12
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	2000      	movs	r0, #0
 8005628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800562a:	f001 fb65 	bl	8006cf8 <__malloc_lock>
 800562e:	4921      	ldr	r1, [pc, #132]	; (80056b4 <_malloc_r+0xac>)
 8005630:	680a      	ldr	r2, [r1, #0]
 8005632:	4614      	mov	r4, r2
 8005634:	b99c      	cbnz	r4, 800565e <_malloc_r+0x56>
 8005636:	4f20      	ldr	r7, [pc, #128]	; (80056b8 <_malloc_r+0xb0>)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	b923      	cbnz	r3, 8005646 <_malloc_r+0x3e>
 800563c:	4621      	mov	r1, r4
 800563e:	4630      	mov	r0, r6
 8005640:	f000 fcae 	bl	8005fa0 <_sbrk_r>
 8005644:	6038      	str	r0, [r7, #0]
 8005646:	4629      	mov	r1, r5
 8005648:	4630      	mov	r0, r6
 800564a:	f000 fca9 	bl	8005fa0 <_sbrk_r>
 800564e:	1c43      	adds	r3, r0, #1
 8005650:	d123      	bne.n	800569a <_malloc_r+0x92>
 8005652:	230c      	movs	r3, #12
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	4630      	mov	r0, r6
 8005658:	f001 fb54 	bl	8006d04 <__malloc_unlock>
 800565c:	e7e3      	b.n	8005626 <_malloc_r+0x1e>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	1b5b      	subs	r3, r3, r5
 8005662:	d417      	bmi.n	8005694 <_malloc_r+0x8c>
 8005664:	2b0b      	cmp	r3, #11
 8005666:	d903      	bls.n	8005670 <_malloc_r+0x68>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	441c      	add	r4, r3
 800566c:	6025      	str	r5, [r4, #0]
 800566e:	e004      	b.n	800567a <_malloc_r+0x72>
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	42a2      	cmp	r2, r4
 8005674:	bf0c      	ite	eq
 8005676:	600b      	streq	r3, [r1, #0]
 8005678:	6053      	strne	r3, [r2, #4]
 800567a:	4630      	mov	r0, r6
 800567c:	f001 fb42 	bl	8006d04 <__malloc_unlock>
 8005680:	f104 000b 	add.w	r0, r4, #11
 8005684:	1d23      	adds	r3, r4, #4
 8005686:	f020 0007 	bic.w	r0, r0, #7
 800568a:	1ac2      	subs	r2, r0, r3
 800568c:	d0cc      	beq.n	8005628 <_malloc_r+0x20>
 800568e:	1a1b      	subs	r3, r3, r0
 8005690:	50a3      	str	r3, [r4, r2]
 8005692:	e7c9      	b.n	8005628 <_malloc_r+0x20>
 8005694:	4622      	mov	r2, r4
 8005696:	6864      	ldr	r4, [r4, #4]
 8005698:	e7cc      	b.n	8005634 <_malloc_r+0x2c>
 800569a:	1cc4      	adds	r4, r0, #3
 800569c:	f024 0403 	bic.w	r4, r4, #3
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d0e3      	beq.n	800566c <_malloc_r+0x64>
 80056a4:	1a21      	subs	r1, r4, r0
 80056a6:	4630      	mov	r0, r6
 80056a8:	f000 fc7a 	bl	8005fa0 <_sbrk_r>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d1dd      	bne.n	800566c <_malloc_r+0x64>
 80056b0:	e7cf      	b.n	8005652 <_malloc_r+0x4a>
 80056b2:	bf00      	nop
 80056b4:	200004dc 	.word	0x200004dc
 80056b8:	200004e0 	.word	0x200004e0

080056bc <__cvt>:
 80056bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	ec55 4b10 	vmov	r4, r5, d0
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	460e      	mov	r6, r1
 80056c8:	4619      	mov	r1, r3
 80056ca:	462b      	mov	r3, r5
 80056cc:	bfbb      	ittet	lt
 80056ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056d2:	461d      	movlt	r5, r3
 80056d4:	2300      	movge	r3, #0
 80056d6:	232d      	movlt	r3, #45	; 0x2d
 80056d8:	700b      	strb	r3, [r1, #0]
 80056da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056e0:	4691      	mov	r9, r2
 80056e2:	f023 0820 	bic.w	r8, r3, #32
 80056e6:	bfbc      	itt	lt
 80056e8:	4622      	movlt	r2, r4
 80056ea:	4614      	movlt	r4, r2
 80056ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056f0:	d005      	beq.n	80056fe <__cvt+0x42>
 80056f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056f6:	d100      	bne.n	80056fa <__cvt+0x3e>
 80056f8:	3601      	adds	r6, #1
 80056fa:	2102      	movs	r1, #2
 80056fc:	e000      	b.n	8005700 <__cvt+0x44>
 80056fe:	2103      	movs	r1, #3
 8005700:	ab03      	add	r3, sp, #12
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	ab02      	add	r3, sp, #8
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	ec45 4b10 	vmov	d0, r4, r5
 800570c:	4653      	mov	r3, sl
 800570e:	4632      	mov	r2, r6
 8005710:	f000 fd02 	bl	8006118 <_dtoa_r>
 8005714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005718:	4607      	mov	r7, r0
 800571a:	d102      	bne.n	8005722 <__cvt+0x66>
 800571c:	f019 0f01 	tst.w	r9, #1
 8005720:	d022      	beq.n	8005768 <__cvt+0xac>
 8005722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005726:	eb07 0906 	add.w	r9, r7, r6
 800572a:	d110      	bne.n	800574e <__cvt+0x92>
 800572c:	783b      	ldrb	r3, [r7, #0]
 800572e:	2b30      	cmp	r3, #48	; 0x30
 8005730:	d10a      	bne.n	8005748 <__cvt+0x8c>
 8005732:	2200      	movs	r2, #0
 8005734:	2300      	movs	r3, #0
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fb f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800573e:	b918      	cbnz	r0, 8005748 <__cvt+0x8c>
 8005740:	f1c6 0601 	rsb	r6, r6, #1
 8005744:	f8ca 6000 	str.w	r6, [sl]
 8005748:	f8da 3000 	ldr.w	r3, [sl]
 800574c:	4499      	add	r9, r3
 800574e:	2200      	movs	r2, #0
 8005750:	2300      	movs	r3, #0
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fb f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800575a:	b108      	cbz	r0, 8005760 <__cvt+0xa4>
 800575c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005760:	2230      	movs	r2, #48	; 0x30
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	454b      	cmp	r3, r9
 8005766:	d307      	bcc.n	8005778 <__cvt+0xbc>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800576c:	1bdb      	subs	r3, r3, r7
 800576e:	4638      	mov	r0, r7
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	b004      	add	sp, #16
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	9103      	str	r1, [sp, #12]
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e7f0      	b.n	8005762 <__cvt+0xa6>

08005780 <__exponent>:
 8005780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005782:	4603      	mov	r3, r0
 8005784:	2900      	cmp	r1, #0
 8005786:	bfb8      	it	lt
 8005788:	4249      	neglt	r1, r1
 800578a:	f803 2b02 	strb.w	r2, [r3], #2
 800578e:	bfb4      	ite	lt
 8005790:	222d      	movlt	r2, #45	; 0x2d
 8005792:	222b      	movge	r2, #43	; 0x2b
 8005794:	2909      	cmp	r1, #9
 8005796:	7042      	strb	r2, [r0, #1]
 8005798:	dd2a      	ble.n	80057f0 <__exponent+0x70>
 800579a:	f10d 0407 	add.w	r4, sp, #7
 800579e:	46a4      	mov	ip, r4
 80057a0:	270a      	movs	r7, #10
 80057a2:	46a6      	mov	lr, r4
 80057a4:	460a      	mov	r2, r1
 80057a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80057aa:	fb07 1516 	mls	r5, r7, r6, r1
 80057ae:	3530      	adds	r5, #48	; 0x30
 80057b0:	2a63      	cmp	r2, #99	; 0x63
 80057b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80057b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057ba:	4631      	mov	r1, r6
 80057bc:	dcf1      	bgt.n	80057a2 <__exponent+0x22>
 80057be:	3130      	adds	r1, #48	; 0x30
 80057c0:	f1ae 0502 	sub.w	r5, lr, #2
 80057c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057c8:	1c44      	adds	r4, r0, #1
 80057ca:	4629      	mov	r1, r5
 80057cc:	4561      	cmp	r1, ip
 80057ce:	d30a      	bcc.n	80057e6 <__exponent+0x66>
 80057d0:	f10d 0209 	add.w	r2, sp, #9
 80057d4:	eba2 020e 	sub.w	r2, r2, lr
 80057d8:	4565      	cmp	r5, ip
 80057da:	bf88      	it	hi
 80057dc:	2200      	movhi	r2, #0
 80057de:	4413      	add	r3, r2
 80057e0:	1a18      	subs	r0, r3, r0
 80057e2:	b003      	add	sp, #12
 80057e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057ee:	e7ed      	b.n	80057cc <__exponent+0x4c>
 80057f0:	2330      	movs	r3, #48	; 0x30
 80057f2:	3130      	adds	r1, #48	; 0x30
 80057f4:	7083      	strb	r3, [r0, #2]
 80057f6:	70c1      	strb	r1, [r0, #3]
 80057f8:	1d03      	adds	r3, r0, #4
 80057fa:	e7f1      	b.n	80057e0 <__exponent+0x60>

080057fc <_printf_float>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	ed2d 8b02 	vpush	{d8}
 8005804:	b08d      	sub	sp, #52	; 0x34
 8005806:	460c      	mov	r4, r1
 8005808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800580c:	4616      	mov	r6, r2
 800580e:	461f      	mov	r7, r3
 8005810:	4605      	mov	r5, r0
 8005812:	f001 fa6d 	bl	8006cf0 <_localeconv_r>
 8005816:	f8d0 a000 	ldr.w	sl, [r0]
 800581a:	4650      	mov	r0, sl
 800581c:	f7fa fce0 	bl	80001e0 <strlen>
 8005820:	2300      	movs	r3, #0
 8005822:	930a      	str	r3, [sp, #40]	; 0x28
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	9305      	str	r3, [sp, #20]
 8005828:	f8d8 3000 	ldr.w	r3, [r8]
 800582c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005830:	3307      	adds	r3, #7
 8005832:	f023 0307 	bic.w	r3, r3, #7
 8005836:	f103 0208 	add.w	r2, r3, #8
 800583a:	f8c8 2000 	str.w	r2, [r8]
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005846:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800584a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800584e:	9307      	str	r3, [sp, #28]
 8005850:	f8cd 8018 	str.w	r8, [sp, #24]
 8005854:	ee08 0a10 	vmov	s16, r0
 8005858:	4b9f      	ldr	r3, [pc, #636]	; (8005ad8 <_printf_float+0x2dc>)
 800585a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585e:	f04f 32ff 	mov.w	r2, #4294967295
 8005862:	f7fb f96b 	bl	8000b3c <__aeabi_dcmpun>
 8005866:	bb88      	cbnz	r0, 80058cc <_printf_float+0xd0>
 8005868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800586c:	4b9a      	ldr	r3, [pc, #616]	; (8005ad8 <_printf_float+0x2dc>)
 800586e:	f04f 32ff 	mov.w	r2, #4294967295
 8005872:	f7fb f945 	bl	8000b00 <__aeabi_dcmple>
 8005876:	bb48      	cbnz	r0, 80058cc <_printf_float+0xd0>
 8005878:	2200      	movs	r2, #0
 800587a:	2300      	movs	r3, #0
 800587c:	4640      	mov	r0, r8
 800587e:	4649      	mov	r1, r9
 8005880:	f7fb f934 	bl	8000aec <__aeabi_dcmplt>
 8005884:	b110      	cbz	r0, 800588c <_printf_float+0x90>
 8005886:	232d      	movs	r3, #45	; 0x2d
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588c:	4b93      	ldr	r3, [pc, #588]	; (8005adc <_printf_float+0x2e0>)
 800588e:	4894      	ldr	r0, [pc, #592]	; (8005ae0 <_printf_float+0x2e4>)
 8005890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005894:	bf94      	ite	ls
 8005896:	4698      	movls	r8, r3
 8005898:	4680      	movhi	r8, r0
 800589a:	2303      	movs	r3, #3
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	9b05      	ldr	r3, [sp, #20]
 80058a0:	f023 0204 	bic.w	r2, r3, #4
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	f04f 0900 	mov.w	r9, #0
 80058aa:	9700      	str	r7, [sp, #0]
 80058ac:	4633      	mov	r3, r6
 80058ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f9d8 	bl	8005c68 <_printf_common>
 80058b8:	3001      	adds	r0, #1
 80058ba:	f040 8090 	bne.w	80059de <_printf_float+0x1e2>
 80058be:	f04f 30ff 	mov.w	r0, #4294967295
 80058c2:	b00d      	add	sp, #52	; 0x34
 80058c4:	ecbd 8b02 	vpop	{d8}
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fb f932 	bl	8000b3c <__aeabi_dcmpun>
 80058d8:	b140      	cbz	r0, 80058ec <_printf_float+0xf0>
 80058da:	464b      	mov	r3, r9
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bfbc      	itt	lt
 80058e0:	232d      	movlt	r3, #45	; 0x2d
 80058e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058e6:	487f      	ldr	r0, [pc, #508]	; (8005ae4 <_printf_float+0x2e8>)
 80058e8:	4b7f      	ldr	r3, [pc, #508]	; (8005ae8 <_printf_float+0x2ec>)
 80058ea:	e7d1      	b.n	8005890 <_printf_float+0x94>
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058f2:	9206      	str	r2, [sp, #24]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	d13f      	bne.n	8005978 <_printf_float+0x17c>
 80058f8:	2306      	movs	r3, #6
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	9b05      	ldr	r3, [sp, #20]
 80058fe:	6861      	ldr	r1, [r4, #4]
 8005900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005904:	2300      	movs	r3, #0
 8005906:	9303      	str	r3, [sp, #12]
 8005908:	ab0a      	add	r3, sp, #40	; 0x28
 800590a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800590e:	ab09      	add	r3, sp, #36	; 0x24
 8005910:	ec49 8b10 	vmov	d0, r8, r9
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800591c:	4628      	mov	r0, r5
 800591e:	f7ff fecd 	bl	80056bc <__cvt>
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005926:	2b47      	cmp	r3, #71	; 0x47
 8005928:	4680      	mov	r8, r0
 800592a:	d108      	bne.n	800593e <_printf_float+0x142>
 800592c:	1cc8      	adds	r0, r1, #3
 800592e:	db02      	blt.n	8005936 <_printf_float+0x13a>
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	4299      	cmp	r1, r3
 8005934:	dd41      	ble.n	80059ba <_printf_float+0x1be>
 8005936:	f1ab 0b02 	sub.w	fp, fp, #2
 800593a:	fa5f fb8b 	uxtb.w	fp, fp
 800593e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005942:	d820      	bhi.n	8005986 <_printf_float+0x18a>
 8005944:	3901      	subs	r1, #1
 8005946:	465a      	mov	r2, fp
 8005948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800594c:	9109      	str	r1, [sp, #36]	; 0x24
 800594e:	f7ff ff17 	bl	8005780 <__exponent>
 8005952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005954:	1813      	adds	r3, r2, r0
 8005956:	2a01      	cmp	r2, #1
 8005958:	4681      	mov	r9, r0
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	dc02      	bgt.n	8005964 <_printf_float+0x168>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	07d2      	lsls	r2, r2, #31
 8005962:	d501      	bpl.n	8005968 <_printf_float+0x16c>
 8005964:	3301      	adds	r3, #1
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800596c:	2b00      	cmp	r3, #0
 800596e:	d09c      	beq.n	80058aa <_printf_float+0xae>
 8005970:	232d      	movs	r3, #45	; 0x2d
 8005972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005976:	e798      	b.n	80058aa <_printf_float+0xae>
 8005978:	9a06      	ldr	r2, [sp, #24]
 800597a:	2a47      	cmp	r2, #71	; 0x47
 800597c:	d1be      	bne.n	80058fc <_printf_float+0x100>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1bc      	bne.n	80058fc <_printf_float+0x100>
 8005982:	2301      	movs	r3, #1
 8005984:	e7b9      	b.n	80058fa <_printf_float+0xfe>
 8005986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800598a:	d118      	bne.n	80059be <_printf_float+0x1c2>
 800598c:	2900      	cmp	r1, #0
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	dd0b      	ble.n	80059aa <_printf_float+0x1ae>
 8005992:	6121      	str	r1, [r4, #16]
 8005994:	b913      	cbnz	r3, 800599c <_printf_float+0x1a0>
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	07d0      	lsls	r0, r2, #31
 800599a:	d502      	bpl.n	80059a2 <_printf_float+0x1a6>
 800599c:	3301      	adds	r3, #1
 800599e:	440b      	add	r3, r1
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80059a4:	f04f 0900 	mov.w	r9, #0
 80059a8:	e7de      	b.n	8005968 <_printf_float+0x16c>
 80059aa:	b913      	cbnz	r3, 80059b2 <_printf_float+0x1b6>
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	07d2      	lsls	r2, r2, #31
 80059b0:	d501      	bpl.n	80059b6 <_printf_float+0x1ba>
 80059b2:	3302      	adds	r3, #2
 80059b4:	e7f4      	b.n	80059a0 <_printf_float+0x1a4>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e7f2      	b.n	80059a0 <_printf_float+0x1a4>
 80059ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c0:	4299      	cmp	r1, r3
 80059c2:	db05      	blt.n	80059d0 <_printf_float+0x1d4>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	6121      	str	r1, [r4, #16]
 80059c8:	07d8      	lsls	r0, r3, #31
 80059ca:	d5ea      	bpl.n	80059a2 <_printf_float+0x1a6>
 80059cc:	1c4b      	adds	r3, r1, #1
 80059ce:	e7e7      	b.n	80059a0 <_printf_float+0x1a4>
 80059d0:	2900      	cmp	r1, #0
 80059d2:	bfd4      	ite	le
 80059d4:	f1c1 0202 	rsble	r2, r1, #2
 80059d8:	2201      	movgt	r2, #1
 80059da:	4413      	add	r3, r2
 80059dc:	e7e0      	b.n	80059a0 <_printf_float+0x1a4>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	055a      	lsls	r2, r3, #21
 80059e2:	d407      	bmi.n	80059f4 <_printf_float+0x1f8>
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	4642      	mov	r2, r8
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	d12c      	bne.n	8005a4c <_printf_float+0x250>
 80059f2:	e764      	b.n	80058be <_printf_float+0xc2>
 80059f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059f8:	f240 80e0 	bls.w	8005bbc <_printf_float+0x3c0>
 80059fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a00:	2200      	movs	r2, #0
 8005a02:	2300      	movs	r3, #0
 8005a04:	f7fb f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d034      	beq.n	8005a76 <_printf_float+0x27a>
 8005a0c:	4a37      	ldr	r2, [pc, #220]	; (8005aec <_printf_float+0x2f0>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af51 	beq.w	80058be <_printf_float+0xc2>
 8005a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a20:	429a      	cmp	r2, r3
 8005a22:	db02      	blt.n	8005a2a <_printf_float+0x22e>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07d8      	lsls	r0, r3, #31
 8005a28:	d510      	bpl.n	8005a4c <_printf_float+0x250>
 8005a2a:	ee18 3a10 	vmov	r3, s16
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af41 	beq.w	80058be <_printf_float+0xc2>
 8005a3c:	f04f 0800 	mov.w	r8, #0
 8005a40:	f104 091a 	add.w	r9, r4, #26
 8005a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	4543      	cmp	r3, r8
 8005a4a:	dc09      	bgt.n	8005a60 <_printf_float+0x264>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	079b      	lsls	r3, r3, #30
 8005a50:	f100 8105 	bmi.w	8005c5e <_printf_float+0x462>
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	bfb8      	it	lt
 8005a5c:	4618      	movlt	r0, r3
 8005a5e:	e730      	b.n	80058c2 <_printf_float+0xc6>
 8005a60:	2301      	movs	r3, #1
 8005a62:	464a      	mov	r2, r9
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af27 	beq.w	80058be <_printf_float+0xc2>
 8005a70:	f108 0801 	add.w	r8, r8, #1
 8005a74:	e7e6      	b.n	8005a44 <_printf_float+0x248>
 8005a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc39      	bgt.n	8005af0 <_printf_float+0x2f4>
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <_printf_float+0x2f0>)
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f af19 	beq.w	80058be <_printf_float+0xc2>
 8005a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d102      	bne.n	8005a9a <_printf_float+0x29e>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	07d9      	lsls	r1, r3, #31
 8005a98:	d5d8      	bpl.n	8005a4c <_printf_float+0x250>
 8005a9a:	ee18 3a10 	vmov	r3, s16
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f af09 	beq.w	80058be <_printf_float+0xc2>
 8005aac:	f04f 0900 	mov.w	r9, #0
 8005ab0:	f104 0a1a 	add.w	sl, r4, #26
 8005ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab6:	425b      	negs	r3, r3
 8005ab8:	454b      	cmp	r3, r9
 8005aba:	dc01      	bgt.n	8005ac0 <_printf_float+0x2c4>
 8005abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005abe:	e792      	b.n	80059e6 <_printf_float+0x1ea>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f aef7 	beq.w	80058be <_printf_float+0xc2>
 8005ad0:	f109 0901 	add.w	r9, r9, #1
 8005ad4:	e7ee      	b.n	8005ab4 <_printf_float+0x2b8>
 8005ad6:	bf00      	nop
 8005ad8:	7fefffff 	.word	0x7fefffff
 8005adc:	08008b50 	.word	0x08008b50
 8005ae0:	08008b54 	.word	0x08008b54
 8005ae4:	08008b5c 	.word	0x08008b5c
 8005ae8:	08008b58 	.word	0x08008b58
 8005aec:	08008b60 	.word	0x08008b60
 8005af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005af4:	429a      	cmp	r2, r3
 8005af6:	bfa8      	it	ge
 8005af8:	461a      	movge	r2, r3
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	4691      	mov	r9, r2
 8005afe:	dc37      	bgt.n	8005b70 <_printf_float+0x374>
 8005b00:	f04f 0b00 	mov.w	fp, #0
 8005b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b08:	f104 021a 	add.w	r2, r4, #26
 8005b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	eba3 0309 	sub.w	r3, r3, r9
 8005b14:	455b      	cmp	r3, fp
 8005b16:	dc33      	bgt.n	8005b80 <_printf_float+0x384>
 8005b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	db3b      	blt.n	8005b98 <_printf_float+0x39c>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	07da      	lsls	r2, r3, #31
 8005b24:	d438      	bmi.n	8005b98 <_printf_float+0x39c>
 8005b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	eba2 0901 	sub.w	r9, r2, r1
 8005b32:	4599      	cmp	r9, r3
 8005b34:	bfa8      	it	ge
 8005b36:	4699      	movge	r9, r3
 8005b38:	f1b9 0f00 	cmp.w	r9, #0
 8005b3c:	dc35      	bgt.n	8005baa <_printf_float+0x3ae>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b46:	f104 0a1a 	add.w	sl, r4, #26
 8005b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	eba3 0309 	sub.w	r3, r3, r9
 8005b54:	4543      	cmp	r3, r8
 8005b56:	f77f af79 	ble.w	8005a4c <_printf_float+0x250>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f aeaa 	beq.w	80058be <_printf_float+0xc2>
 8005b6a:	f108 0801 	add.w	r8, r8, #1
 8005b6e:	e7ec      	b.n	8005b4a <_printf_float+0x34e>
 8005b70:	4613      	mov	r3, r2
 8005b72:	4631      	mov	r1, r6
 8005b74:	4642      	mov	r2, r8
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d1c0      	bne.n	8005b00 <_printf_float+0x304>
 8005b7e:	e69e      	b.n	80058be <_printf_float+0xc2>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	9205      	str	r2, [sp, #20]
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f ae97 	beq.w	80058be <_printf_float+0xc2>
 8005b90:	9a05      	ldr	r2, [sp, #20]
 8005b92:	f10b 0b01 	add.w	fp, fp, #1
 8005b96:	e7b9      	b.n	8005b0c <_printf_float+0x310>
 8005b98:	ee18 3a10 	vmov	r3, s16
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1be      	bne.n	8005b26 <_printf_float+0x32a>
 8005ba8:	e689      	b.n	80058be <_printf_float+0xc2>
 8005baa:	9a05      	ldr	r2, [sp, #20]
 8005bac:	464b      	mov	r3, r9
 8005bae:	4442      	add	r2, r8
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d1c1      	bne.n	8005b3e <_printf_float+0x342>
 8005bba:	e680      	b.n	80058be <_printf_float+0xc2>
 8005bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bbe:	2a01      	cmp	r2, #1
 8005bc0:	dc01      	bgt.n	8005bc6 <_printf_float+0x3ca>
 8005bc2:	07db      	lsls	r3, r3, #31
 8005bc4:	d538      	bpl.n	8005c38 <_printf_float+0x43c>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4642      	mov	r2, r8
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f ae74 	beq.w	80058be <_printf_float+0xc2>
 8005bd6:	ee18 3a10 	vmov	r3, s16
 8005bda:	4652      	mov	r2, sl
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae6b 	beq.w	80058be <_printf_float+0xc2>
 8005be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f7fa ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bf4:	b9d8      	cbnz	r0, 8005c2e <_printf_float+0x432>
 8005bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf8:	f108 0201 	add.w	r2, r8, #1
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d10e      	bne.n	8005c26 <_printf_float+0x42a>
 8005c08:	e659      	b.n	80058be <_printf_float+0xc2>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f ae52 	beq.w	80058be <_printf_float+0xc2>
 8005c1a:	f108 0801 	add.w	r8, r8, #1
 8005c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c20:	3b01      	subs	r3, #1
 8005c22:	4543      	cmp	r3, r8
 8005c24:	dcf1      	bgt.n	8005c0a <_printf_float+0x40e>
 8005c26:	464b      	mov	r3, r9
 8005c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c2c:	e6dc      	b.n	80059e8 <_printf_float+0x1ec>
 8005c2e:	f04f 0800 	mov.w	r8, #0
 8005c32:	f104 0a1a 	add.w	sl, r4, #26
 8005c36:	e7f2      	b.n	8005c1e <_printf_float+0x422>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4642      	mov	r2, r8
 8005c3c:	e7df      	b.n	8005bfe <_printf_float+0x402>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	464a      	mov	r2, r9
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f ae38 	beq.w	80058be <_printf_float+0xc2>
 8005c4e:	f108 0801 	add.w	r8, r8, #1
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c56:	1a5b      	subs	r3, r3, r1
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	dcf0      	bgt.n	8005c3e <_printf_float+0x442>
 8005c5c:	e6fa      	b.n	8005a54 <_printf_float+0x258>
 8005c5e:	f04f 0800 	mov.w	r8, #0
 8005c62:	f104 0919 	add.w	r9, r4, #25
 8005c66:	e7f4      	b.n	8005c52 <_printf_float+0x456>

08005c68 <_printf_common>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	4699      	mov	r9, r3
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bfb8      	it	lt
 8005c7c:	4613      	movlt	r3, r2
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c84:	4607      	mov	r7, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	b10a      	cbz	r2, 8005c8e <_printf_common+0x26>
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	0699      	lsls	r1, r3, #26
 8005c92:	bf42      	ittt	mi
 8005c94:	6833      	ldrmi	r3, [r6, #0]
 8005c96:	3302      	addmi	r3, #2
 8005c98:	6033      	strmi	r3, [r6, #0]
 8005c9a:	6825      	ldr	r5, [r4, #0]
 8005c9c:	f015 0506 	ands.w	r5, r5, #6
 8005ca0:	d106      	bne.n	8005cb0 <_printf_common+0x48>
 8005ca2:	f104 0a19 	add.w	sl, r4, #25
 8005ca6:	68e3      	ldr	r3, [r4, #12]
 8005ca8:	6832      	ldr	r2, [r6, #0]
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	dc26      	bgt.n	8005cfe <_printf_common+0x96>
 8005cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb4:	1e13      	subs	r3, r2, #0
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	bf18      	it	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	0692      	lsls	r2, r2, #26
 8005cbe:	d42b      	bmi.n	8005d18 <_printf_common+0xb0>
 8005cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c0      	blx	r8
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d01e      	beq.n	8005d0c <_printf_common+0xa4>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	68e5      	ldr	r5, [r4, #12]
 8005cd2:	6832      	ldr	r2, [r6, #0]
 8005cd4:	f003 0306 	and.w	r3, r3, #6
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	bf08      	it	eq
 8005cdc:	1aad      	subeq	r5, r5, r2
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	bf0c      	ite	eq
 8005ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce8:	2500      	movne	r5, #0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bfc4      	itt	gt
 8005cee:	1a9b      	subgt	r3, r3, r2
 8005cf0:	18ed      	addgt	r5, r5, r3
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	341a      	adds	r4, #26
 8005cf6:	42b5      	cmp	r5, r6
 8005cf8:	d11a      	bne.n	8005d30 <_printf_common+0xc8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e008      	b.n	8005d10 <_printf_common+0xa8>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4649      	mov	r1, r9
 8005d04:	4638      	mov	r0, r7
 8005d06:	47c0      	blx	r8
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d103      	bne.n	8005d14 <_printf_common+0xac>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7c6      	b.n	8005ca6 <_printf_common+0x3e>
 8005d18:	18e1      	adds	r1, r4, r3
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	2030      	movs	r0, #48	; 0x30
 8005d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d22:	4422      	add	r2, r4
 8005d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	e7c7      	b.n	8005cc0 <_printf_common+0x58>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	4649      	mov	r1, r9
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c0      	blx	r8
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0e6      	beq.n	8005d0c <_printf_common+0xa4>
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7d9      	b.n	8005cf6 <_printf_common+0x8e>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	460c      	mov	r4, r1
 8005d4a:	4691      	mov	r9, r2
 8005d4c:	7e27      	ldrb	r7, [r4, #24]
 8005d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d50:	2f78      	cmp	r7, #120	; 0x78
 8005d52:	4680      	mov	r8, r0
 8005d54:	469a      	mov	sl, r3
 8005d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5a:	d807      	bhi.n	8005d6c <_printf_i+0x28>
 8005d5c:	2f62      	cmp	r7, #98	; 0x62
 8005d5e:	d80a      	bhi.n	8005d76 <_printf_i+0x32>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	f000 80d8 	beq.w	8005f16 <_printf_i+0x1d2>
 8005d66:	2f58      	cmp	r7, #88	; 0x58
 8005d68:	f000 80a3 	beq.w	8005eb2 <_printf_i+0x16e>
 8005d6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d74:	e03a      	b.n	8005dec <_printf_i+0xa8>
 8005d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d7a:	2b15      	cmp	r3, #21
 8005d7c:	d8f6      	bhi.n	8005d6c <_printf_i+0x28>
 8005d7e:	a001      	add	r0, pc, #4	; (adr r0, 8005d84 <_printf_i+0x40>)
 8005d80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005d6d 	.word	0x08005d6d
 8005d90:	08005d6d 	.word	0x08005d6d
 8005d94:	08005d6d 	.word	0x08005d6d
 8005d98:	08005d6d 	.word	0x08005d6d
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005d6d 	.word	0x08005d6d
 8005da4:	08005d6d 	.word	0x08005d6d
 8005da8:	08005d6d 	.word	0x08005d6d
 8005dac:	08005d6d 	.word	0x08005d6d
 8005db0:	08005efd 	.word	0x08005efd
 8005db4:	08005e21 	.word	0x08005e21
 8005db8:	08005edf 	.word	0x08005edf
 8005dbc:	08005d6d 	.word	0x08005d6d
 8005dc0:	08005d6d 	.word	0x08005d6d
 8005dc4:	08005f1f 	.word	0x08005f1f
 8005dc8:	08005d6d 	.word	0x08005d6d
 8005dcc:	08005e21 	.word	0x08005e21
 8005dd0:	08005d6d 	.word	0x08005d6d
 8005dd4:	08005d6d 	.word	0x08005d6d
 8005dd8:	08005ee7 	.word	0x08005ee7
 8005ddc:	680b      	ldr	r3, [r1, #0]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	600a      	str	r2, [r1, #0]
 8005de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dec:	2301      	movs	r3, #1
 8005dee:	e0a3      	b.n	8005f38 <_printf_i+0x1f4>
 8005df0:	6825      	ldr	r5, [r4, #0]
 8005df2:	6808      	ldr	r0, [r1, #0]
 8005df4:	062e      	lsls	r6, r5, #24
 8005df6:	f100 0304 	add.w	r3, r0, #4
 8005dfa:	d50a      	bpl.n	8005e12 <_printf_i+0xce>
 8005dfc:	6805      	ldr	r5, [r0, #0]
 8005dfe:	600b      	str	r3, [r1, #0]
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	da03      	bge.n	8005e0c <_printf_i+0xc8>
 8005e04:	232d      	movs	r3, #45	; 0x2d
 8005e06:	426d      	negs	r5, r5
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0c:	485e      	ldr	r0, [pc, #376]	; (8005f88 <_printf_i+0x244>)
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e019      	b.n	8005e46 <_printf_i+0x102>
 8005e12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e16:	6805      	ldr	r5, [r0, #0]
 8005e18:	600b      	str	r3, [r1, #0]
 8005e1a:	bf18      	it	ne
 8005e1c:	b22d      	sxthne	r5, r5
 8005e1e:	e7ef      	b.n	8005e00 <_printf_i+0xbc>
 8005e20:	680b      	ldr	r3, [r1, #0]
 8005e22:	6825      	ldr	r5, [r4, #0]
 8005e24:	1d18      	adds	r0, r3, #4
 8005e26:	6008      	str	r0, [r1, #0]
 8005e28:	0628      	lsls	r0, r5, #24
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0xec>
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0xf2>
 8005e30:	0669      	lsls	r1, r5, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0xe8>
 8005e34:	881d      	ldrh	r5, [r3, #0]
 8005e36:	4854      	ldr	r0, [pc, #336]	; (8005f88 <_printf_i+0x244>)
 8005e38:	2f6f      	cmp	r7, #111	; 0x6f
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2308      	moveq	r3, #8
 8005e3e:	230a      	movne	r3, #10
 8005e40:	2100      	movs	r1, #0
 8005e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e46:	6866      	ldr	r6, [r4, #4]
 8005e48:	60a6      	str	r6, [r4, #8]
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	bfa2      	ittt	ge
 8005e4e:	6821      	ldrge	r1, [r4, #0]
 8005e50:	f021 0104 	bicge.w	r1, r1, #4
 8005e54:	6021      	strge	r1, [r4, #0]
 8005e56:	b90d      	cbnz	r5, 8005e5c <_printf_i+0x118>
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	d04d      	beq.n	8005ef8 <_printf_i+0x1b4>
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e62:	fb03 5711 	mls	r7, r3, r1, r5
 8005e66:	5dc7      	ldrb	r7, [r0, r7]
 8005e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e6c:	462f      	mov	r7, r5
 8005e6e:	42bb      	cmp	r3, r7
 8005e70:	460d      	mov	r5, r1
 8005e72:	d9f4      	bls.n	8005e5e <_printf_i+0x11a>
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d10b      	bne.n	8005e90 <_printf_i+0x14c>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	07df      	lsls	r7, r3, #31
 8005e7c:	d508      	bpl.n	8005e90 <_printf_i+0x14c>
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	6861      	ldr	r1, [r4, #4]
 8005e82:	4299      	cmp	r1, r3
 8005e84:	bfde      	ittt	le
 8005e86:	2330      	movle	r3, #48	; 0x30
 8005e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e90:	1b92      	subs	r2, r2, r6
 8005e92:	6122      	str	r2, [r4, #16]
 8005e94:	f8cd a000 	str.w	sl, [sp]
 8005e98:	464b      	mov	r3, r9
 8005e9a:	aa03      	add	r2, sp, #12
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7ff fee2 	bl	8005c68 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d14c      	bne.n	8005f42 <_printf_i+0x1fe>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	b004      	add	sp, #16
 8005eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb2:	4835      	ldr	r0, [pc, #212]	; (8005f88 <_printf_i+0x244>)
 8005eb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	680e      	ldr	r6, [r1, #0]
 8005ebc:	061f      	lsls	r7, r3, #24
 8005ebe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ec2:	600e      	str	r6, [r1, #0]
 8005ec4:	d514      	bpl.n	8005ef0 <_printf_i+0x1ac>
 8005ec6:	07d9      	lsls	r1, r3, #31
 8005ec8:	bf44      	itt	mi
 8005eca:	f043 0320 	orrmi.w	r3, r3, #32
 8005ece:	6023      	strmi	r3, [r4, #0]
 8005ed0:	b91d      	cbnz	r5, 8005eda <_printf_i+0x196>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f023 0320 	bic.w	r3, r3, #32
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	2310      	movs	r3, #16
 8005edc:	e7b0      	b.n	8005e40 <_printf_i+0xfc>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f043 0320 	orr.w	r3, r3, #32
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	2378      	movs	r3, #120	; 0x78
 8005ee8:	4828      	ldr	r0, [pc, #160]	; (8005f8c <_printf_i+0x248>)
 8005eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eee:	e7e3      	b.n	8005eb8 <_printf_i+0x174>
 8005ef0:	065e      	lsls	r6, r3, #25
 8005ef2:	bf48      	it	mi
 8005ef4:	b2ad      	uxthmi	r5, r5
 8005ef6:	e7e6      	b.n	8005ec6 <_printf_i+0x182>
 8005ef8:	4616      	mov	r6, r2
 8005efa:	e7bb      	b.n	8005e74 <_printf_i+0x130>
 8005efc:	680b      	ldr	r3, [r1, #0]
 8005efe:	6826      	ldr	r6, [r4, #0]
 8005f00:	6960      	ldr	r0, [r4, #20]
 8005f02:	1d1d      	adds	r5, r3, #4
 8005f04:	600d      	str	r5, [r1, #0]
 8005f06:	0635      	lsls	r5, r6, #24
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0x1cc>
 8005f0c:	6018      	str	r0, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <_printf_i+0x1d2>
 8005f10:	0671      	lsls	r1, r6, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0x1c8>
 8005f14:	8018      	strh	r0, [r3, #0]
 8005f16:	2300      	movs	r3, #0
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	e7ba      	b.n	8005e94 <_printf_i+0x150>
 8005f1e:	680b      	ldr	r3, [r1, #0]
 8005f20:	1d1a      	adds	r2, r3, #4
 8005f22:	600a      	str	r2, [r1, #0]
 8005f24:	681e      	ldr	r6, [r3, #0]
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7fa f960 	bl	80001f0 <memchr>
 8005f30:	b108      	cbz	r0, 8005f36 <_printf_i+0x1f2>
 8005f32:	1b80      	subs	r0, r0, r6
 8005f34:	6060      	str	r0, [r4, #4]
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f40:	e7a8      	b.n	8005e94 <_printf_i+0x150>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	47d0      	blx	sl
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d0ab      	beq.n	8005ea8 <_printf_i+0x164>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	079b      	lsls	r3, r3, #30
 8005f54:	d413      	bmi.n	8005f7e <_printf_i+0x23a>
 8005f56:	68e0      	ldr	r0, [r4, #12]
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	4298      	cmp	r0, r3
 8005f5c:	bfb8      	it	lt
 8005f5e:	4618      	movlt	r0, r3
 8005f60:	e7a4      	b.n	8005eac <_printf_i+0x168>
 8005f62:	2301      	movs	r3, #1
 8005f64:	4632      	mov	r2, r6
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d09b      	beq.n	8005ea8 <_printf_i+0x164>
 8005f70:	3501      	adds	r5, #1
 8005f72:	68e3      	ldr	r3, [r4, #12]
 8005f74:	9903      	ldr	r1, [sp, #12]
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	dcf2      	bgt.n	8005f62 <_printf_i+0x21e>
 8005f7c:	e7eb      	b.n	8005f56 <_printf_i+0x212>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	f104 0619 	add.w	r6, r4, #25
 8005f84:	e7f5      	b.n	8005f72 <_printf_i+0x22e>
 8005f86:	bf00      	nop
 8005f88:	08008b62 	.word	0x08008b62
 8005f8c:	08008b73 	.word	0x08008b73

08005f90 <realloc>:
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <realloc+0xc>)
 8005f92:	460a      	mov	r2, r1
 8005f94:	4601      	mov	r1, r0
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	f001 ba47 	b.w	800742a <_realloc_r>
 8005f9c:	20000010 	.word	0x20000010

08005fa0 <_sbrk_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d06      	ldr	r5, [pc, #24]	; (8005fbc <_sbrk_r+0x1c>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fc fe5c 	bl	8002c68 <_sbrk>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_sbrk_r+0x1a>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_sbrk_r+0x1a>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	200004e8 	.word	0x200004e8

08005fc0 <siprintf>:
 8005fc0:	b40e      	push	{r1, r2, r3}
 8005fc2:	b500      	push	{lr}
 8005fc4:	b09c      	sub	sp, #112	; 0x70
 8005fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fc8:	9002      	str	r0, [sp, #8]
 8005fca:	9006      	str	r0, [sp, #24]
 8005fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fd0:	4809      	ldr	r0, [pc, #36]	; (8005ff8 <siprintf+0x38>)
 8005fd2:	9107      	str	r1, [sp, #28]
 8005fd4:	9104      	str	r1, [sp, #16]
 8005fd6:	4909      	ldr	r1, [pc, #36]	; (8005ffc <siprintf+0x3c>)
 8005fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fdc:	9105      	str	r1, [sp, #20]
 8005fde:	6800      	ldr	r0, [r0, #0]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	a902      	add	r1, sp, #8
 8005fe4:	f001 faa2 	bl	800752c <_svfiprintf_r>
 8005fe8:	9b02      	ldr	r3, [sp, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	b01c      	add	sp, #112	; 0x70
 8005ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff4:	b003      	add	sp, #12
 8005ff6:	4770      	bx	lr
 8005ff8:	20000010 	.word	0x20000010
 8005ffc:	ffff0208 	.word	0xffff0208

08006000 <quorem>:
 8006000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	6903      	ldr	r3, [r0, #16]
 8006006:	690c      	ldr	r4, [r1, #16]
 8006008:	42a3      	cmp	r3, r4
 800600a:	4607      	mov	r7, r0
 800600c:	f2c0 8081 	blt.w	8006112 <quorem+0x112>
 8006010:	3c01      	subs	r4, #1
 8006012:	f101 0814 	add.w	r8, r1, #20
 8006016:	f100 0514 	add.w	r5, r0, #20
 800601a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006028:	3301      	adds	r3, #1
 800602a:	429a      	cmp	r2, r3
 800602c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006034:	fbb2 f6f3 	udiv	r6, r2, r3
 8006038:	d331      	bcc.n	800609e <quorem+0x9e>
 800603a:	f04f 0e00 	mov.w	lr, #0
 800603e:	4640      	mov	r0, r8
 8006040:	46ac      	mov	ip, r5
 8006042:	46f2      	mov	sl, lr
 8006044:	f850 2b04 	ldr.w	r2, [r0], #4
 8006048:	b293      	uxth	r3, r2
 800604a:	fb06 e303 	mla	r3, r6, r3, lr
 800604e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006052:	b29b      	uxth	r3, r3
 8006054:	ebaa 0303 	sub.w	r3, sl, r3
 8006058:	0c12      	lsrs	r2, r2, #16
 800605a:	f8dc a000 	ldr.w	sl, [ip]
 800605e:	fb06 e202 	mla	r2, r6, r2, lr
 8006062:	fa13 f38a 	uxtah	r3, r3, sl
 8006066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800606a:	fa1f fa82 	uxth.w	sl, r2
 800606e:	f8dc 2000 	ldr.w	r2, [ip]
 8006072:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006076:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006080:	4581      	cmp	r9, r0
 8006082:	f84c 3b04 	str.w	r3, [ip], #4
 8006086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800608a:	d2db      	bcs.n	8006044 <quorem+0x44>
 800608c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006090:	b92b      	cbnz	r3, 800609e <quorem+0x9e>
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	3b04      	subs	r3, #4
 8006096:	429d      	cmp	r5, r3
 8006098:	461a      	mov	r2, r3
 800609a:	d32e      	bcc.n	80060fa <quorem+0xfa>
 800609c:	613c      	str	r4, [r7, #16]
 800609e:	4638      	mov	r0, r7
 80060a0:	f001 f8b4 	bl	800720c <__mcmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	db24      	blt.n	80060f2 <quorem+0xf2>
 80060a8:	3601      	adds	r6, #1
 80060aa:	4628      	mov	r0, r5
 80060ac:	f04f 0c00 	mov.w	ip, #0
 80060b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80060b4:	f8d0 e000 	ldr.w	lr, [r0]
 80060b8:	b293      	uxth	r3, r2
 80060ba:	ebac 0303 	sub.w	r3, ip, r3
 80060be:	0c12      	lsrs	r2, r2, #16
 80060c0:	fa13 f38e 	uxtah	r3, r3, lr
 80060c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d2:	45c1      	cmp	r9, r8
 80060d4:	f840 3b04 	str.w	r3, [r0], #4
 80060d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060dc:	d2e8      	bcs.n	80060b0 <quorem+0xb0>
 80060de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e6:	b922      	cbnz	r2, 80060f2 <quorem+0xf2>
 80060e8:	3b04      	subs	r3, #4
 80060ea:	429d      	cmp	r5, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	d30a      	bcc.n	8006106 <quorem+0x106>
 80060f0:	613c      	str	r4, [r7, #16]
 80060f2:	4630      	mov	r0, r6
 80060f4:	b003      	add	sp, #12
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	3b04      	subs	r3, #4
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d1cc      	bne.n	800609c <quorem+0x9c>
 8006102:	3c01      	subs	r4, #1
 8006104:	e7c7      	b.n	8006096 <quorem+0x96>
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	3b04      	subs	r3, #4
 800610a:	2a00      	cmp	r2, #0
 800610c:	d1f0      	bne.n	80060f0 <quorem+0xf0>
 800610e:	3c01      	subs	r4, #1
 8006110:	e7eb      	b.n	80060ea <quorem+0xea>
 8006112:	2000      	movs	r0, #0
 8006114:	e7ee      	b.n	80060f4 <quorem+0xf4>
	...

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ed2d 8b02 	vpush	{d8}
 8006120:	ec57 6b10 	vmov	r6, r7, d0
 8006124:	b095      	sub	sp, #84	; 0x54
 8006126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800612c:	9105      	str	r1, [sp, #20]
 800612e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006132:	4604      	mov	r4, r0
 8006134:	9209      	str	r2, [sp, #36]	; 0x24
 8006136:	930f      	str	r3, [sp, #60]	; 0x3c
 8006138:	b975      	cbnz	r5, 8006158 <_dtoa_r+0x40>
 800613a:	2010      	movs	r0, #16
 800613c:	f7ff f9e0 	bl	8005500 <malloc>
 8006140:	4602      	mov	r2, r0
 8006142:	6260      	str	r0, [r4, #36]	; 0x24
 8006144:	b920      	cbnz	r0, 8006150 <_dtoa_r+0x38>
 8006146:	4bb2      	ldr	r3, [pc, #712]	; (8006410 <_dtoa_r+0x2f8>)
 8006148:	21ea      	movs	r1, #234	; 0xea
 800614a:	48b2      	ldr	r0, [pc, #712]	; (8006414 <_dtoa_r+0x2fc>)
 800614c:	f001 faee 	bl	800772c <__assert_func>
 8006150:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006154:	6005      	str	r5, [r0, #0]
 8006156:	60c5      	str	r5, [r0, #12]
 8006158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800615a:	6819      	ldr	r1, [r3, #0]
 800615c:	b151      	cbz	r1, 8006174 <_dtoa_r+0x5c>
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	604a      	str	r2, [r1, #4]
 8006162:	2301      	movs	r3, #1
 8006164:	4093      	lsls	r3, r2
 8006166:	608b      	str	r3, [r1, #8]
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fe11 	bl	8006d90 <_Bfree>
 800616e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	1e3b      	subs	r3, r7, #0
 8006176:	bfb9      	ittee	lt
 8006178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800617c:	9303      	strlt	r3, [sp, #12]
 800617e:	2300      	movge	r3, #0
 8006180:	f8c8 3000 	strge.w	r3, [r8]
 8006184:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006188:	4ba3      	ldr	r3, [pc, #652]	; (8006418 <_dtoa_r+0x300>)
 800618a:	bfbc      	itt	lt
 800618c:	2201      	movlt	r2, #1
 800618e:	f8c8 2000 	strlt.w	r2, [r8]
 8006192:	ea33 0309 	bics.w	r3, r3, r9
 8006196:	d11b      	bne.n	80061d0 <_dtoa_r+0xb8>
 8006198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800619a:	f242 730f 	movw	r3, #9999	; 0x270f
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061a4:	4333      	orrs	r3, r6
 80061a6:	f000 857a 	beq.w	8006c9e <_dtoa_r+0xb86>
 80061aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ac:	b963      	cbnz	r3, 80061c8 <_dtoa_r+0xb0>
 80061ae:	4b9b      	ldr	r3, [pc, #620]	; (800641c <_dtoa_r+0x304>)
 80061b0:	e024      	b.n	80061fc <_dtoa_r+0xe4>
 80061b2:	4b9b      	ldr	r3, [pc, #620]	; (8006420 <_dtoa_r+0x308>)
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	9800      	ldr	r0, [sp, #0]
 80061be:	b015      	add	sp, #84	; 0x54
 80061c0:	ecbd 8b02 	vpop	{d8}
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	4b94      	ldr	r3, [pc, #592]	; (800641c <_dtoa_r+0x304>)
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	3303      	adds	r3, #3
 80061ce:	e7f3      	b.n	80061b8 <_dtoa_r+0xa0>
 80061d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	ec51 0b17 	vmov	r0, r1, d7
 80061da:	2300      	movs	r3, #0
 80061dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80061e0:	f7fa fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80061e4:	4680      	mov	r8, r0
 80061e6:	b158      	cbz	r0, 8006200 <_dtoa_r+0xe8>
 80061e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ea:	2301      	movs	r3, #1
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8551 	beq.w	8006c98 <_dtoa_r+0xb80>
 80061f6:	488b      	ldr	r0, [pc, #556]	; (8006424 <_dtoa_r+0x30c>)
 80061f8:	6018      	str	r0, [r3, #0]
 80061fa:	1e43      	subs	r3, r0, #1
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	e7dd      	b.n	80061bc <_dtoa_r+0xa4>
 8006200:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006204:	aa12      	add	r2, sp, #72	; 0x48
 8006206:	a913      	add	r1, sp, #76	; 0x4c
 8006208:	4620      	mov	r0, r4
 800620a:	f001 f8a3 	bl	8007354 <__d2b>
 800620e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006212:	4683      	mov	fp, r0
 8006214:	2d00      	cmp	r5, #0
 8006216:	d07c      	beq.n	8006312 <_dtoa_r+0x1fa>
 8006218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800621a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800621e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006222:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006226:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800622a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800622e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006232:	4b7d      	ldr	r3, [pc, #500]	; (8006428 <_dtoa_r+0x310>)
 8006234:	2200      	movs	r2, #0
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa f82d 	bl	8000298 <__aeabi_dsub>
 800623e:	a36e      	add	r3, pc, #440	; (adr r3, 80063f8 <_dtoa_r+0x2e0>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7fa f9e0 	bl	8000608 <__aeabi_dmul>
 8006248:	a36d      	add	r3, pc, #436	; (adr r3, 8006400 <_dtoa_r+0x2e8>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa f825 	bl	800029c <__adddf3>
 8006252:	4606      	mov	r6, r0
 8006254:	4628      	mov	r0, r5
 8006256:	460f      	mov	r7, r1
 8006258:	f7fa f96c 	bl	8000534 <__aeabi_i2d>
 800625c:	a36a      	add	r3, pc, #424	; (adr r3, 8006408 <_dtoa_r+0x2f0>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7fa f9d1 	bl	8000608 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	f7fa f815 	bl	800029c <__adddf3>
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	f7fa fc77 	bl	8000b68 <__aeabi_d2iz>
 800627a:	2200      	movs	r2, #0
 800627c:	4682      	mov	sl, r0
 800627e:	2300      	movs	r3, #0
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7fa fc32 	bl	8000aec <__aeabi_dcmplt>
 8006288:	b148      	cbz	r0, 800629e <_dtoa_r+0x186>
 800628a:	4650      	mov	r0, sl
 800628c:	f7fa f952 	bl	8000534 <__aeabi_i2d>
 8006290:	4632      	mov	r2, r6
 8006292:	463b      	mov	r3, r7
 8006294:	f7fa fc20 	bl	8000ad8 <__aeabi_dcmpeq>
 8006298:	b908      	cbnz	r0, 800629e <_dtoa_r+0x186>
 800629a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800629e:	f1ba 0f16 	cmp.w	sl, #22
 80062a2:	d854      	bhi.n	800634e <_dtoa_r+0x236>
 80062a4:	4b61      	ldr	r3, [pc, #388]	; (800642c <_dtoa_r+0x314>)
 80062a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062b2:	f7fa fc1b 	bl	8000aec <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d04b      	beq.n	8006352 <_dtoa_r+0x23a>
 80062ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062be:	2300      	movs	r3, #0
 80062c0:	930e      	str	r3, [sp, #56]	; 0x38
 80062c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062c4:	1b5d      	subs	r5, r3, r5
 80062c6:	1e6b      	subs	r3, r5, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	bf43      	ittte	mi
 80062cc:	2300      	movmi	r3, #0
 80062ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80062d2:	9304      	strmi	r3, [sp, #16]
 80062d4:	f04f 0800 	movpl.w	r8, #0
 80062d8:	f1ba 0f00 	cmp.w	sl, #0
 80062dc:	db3b      	blt.n	8006356 <_dtoa_r+0x23e>
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80062e4:	4453      	add	r3, sl
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9306      	str	r3, [sp, #24]
 80062ec:	9b05      	ldr	r3, [sp, #20]
 80062ee:	2b09      	cmp	r3, #9
 80062f0:	d869      	bhi.n	80063c6 <_dtoa_r+0x2ae>
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	bfc4      	itt	gt
 80062f6:	3b04      	subgt	r3, #4
 80062f8:	9305      	strgt	r3, [sp, #20]
 80062fa:	9b05      	ldr	r3, [sp, #20]
 80062fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006300:	bfcc      	ite	gt
 8006302:	2500      	movgt	r5, #0
 8006304:	2501      	movle	r5, #1
 8006306:	2b03      	cmp	r3, #3
 8006308:	d869      	bhi.n	80063de <_dtoa_r+0x2c6>
 800630a:	e8df f003 	tbb	[pc, r3]
 800630e:	4e2c      	.short	0x4e2c
 8006310:	5a4c      	.short	0x5a4c
 8006312:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006316:	441d      	add	r5, r3
 8006318:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800631c:	2b20      	cmp	r3, #32
 800631e:	bfc1      	itttt	gt
 8006320:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006324:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006328:	fa09 f303 	lslgt.w	r3, r9, r3
 800632c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006330:	bfda      	itte	le
 8006332:	f1c3 0320 	rsble	r3, r3, #32
 8006336:	fa06 f003 	lslle.w	r0, r6, r3
 800633a:	4318      	orrgt	r0, r3
 800633c:	f7fa f8ea 	bl	8000514 <__aeabi_ui2d>
 8006340:	2301      	movs	r3, #1
 8006342:	4606      	mov	r6, r0
 8006344:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006348:	3d01      	subs	r5, #1
 800634a:	9310      	str	r3, [sp, #64]	; 0x40
 800634c:	e771      	b.n	8006232 <_dtoa_r+0x11a>
 800634e:	2301      	movs	r3, #1
 8006350:	e7b6      	b.n	80062c0 <_dtoa_r+0x1a8>
 8006352:	900e      	str	r0, [sp, #56]	; 0x38
 8006354:	e7b5      	b.n	80062c2 <_dtoa_r+0x1aa>
 8006356:	f1ca 0300 	rsb	r3, sl, #0
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	2300      	movs	r3, #0
 800635e:	eba8 080a 	sub.w	r8, r8, sl
 8006362:	930d      	str	r3, [sp, #52]	; 0x34
 8006364:	e7c2      	b.n	80062ec <_dtoa_r+0x1d4>
 8006366:	2300      	movs	r3, #0
 8006368:	9308      	str	r3, [sp, #32]
 800636a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636c:	2b00      	cmp	r3, #0
 800636e:	dc39      	bgt.n	80063e4 <_dtoa_r+0x2cc>
 8006370:	f04f 0901 	mov.w	r9, #1
 8006374:	f8cd 9004 	str.w	r9, [sp, #4]
 8006378:	464b      	mov	r3, r9
 800637a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800637e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006380:	2200      	movs	r2, #0
 8006382:	6042      	str	r2, [r0, #4]
 8006384:	2204      	movs	r2, #4
 8006386:	f102 0614 	add.w	r6, r2, #20
 800638a:	429e      	cmp	r6, r3
 800638c:	6841      	ldr	r1, [r0, #4]
 800638e:	d92f      	bls.n	80063f0 <_dtoa_r+0x2d8>
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fcbd 	bl	8006d10 <_Balloc>
 8006396:	9000      	str	r0, [sp, #0]
 8006398:	2800      	cmp	r0, #0
 800639a:	d14b      	bne.n	8006434 <_dtoa_r+0x31c>
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <_dtoa_r+0x318>)
 800639e:	4602      	mov	r2, r0
 80063a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063a4:	e6d1      	b.n	800614a <_dtoa_r+0x32>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e7de      	b.n	8006368 <_dtoa_r+0x250>
 80063aa:	2300      	movs	r3, #0
 80063ac:	9308      	str	r3, [sp, #32]
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	eb0a 0903 	add.w	r9, sl, r3
 80063b4:	f109 0301 	add.w	r3, r9, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	bfb8      	it	lt
 80063be:	2301      	movlt	r3, #1
 80063c0:	e7dd      	b.n	800637e <_dtoa_r+0x266>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7f2      	b.n	80063ac <_dtoa_r+0x294>
 80063c6:	2501      	movs	r5, #1
 80063c8:	2300      	movs	r3, #0
 80063ca:	9305      	str	r3, [sp, #20]
 80063cc:	9508      	str	r5, [sp, #32]
 80063ce:	f04f 39ff 	mov.w	r9, #4294967295
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063d8:	2312      	movs	r3, #18
 80063da:	9209      	str	r2, [sp, #36]	; 0x24
 80063dc:	e7cf      	b.n	800637e <_dtoa_r+0x266>
 80063de:	2301      	movs	r3, #1
 80063e0:	9308      	str	r3, [sp, #32]
 80063e2:	e7f4      	b.n	80063ce <_dtoa_r+0x2b6>
 80063e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80063e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80063ec:	464b      	mov	r3, r9
 80063ee:	e7c6      	b.n	800637e <_dtoa_r+0x266>
 80063f0:	3101      	adds	r1, #1
 80063f2:	6041      	str	r1, [r0, #4]
 80063f4:	0052      	lsls	r2, r2, #1
 80063f6:	e7c6      	b.n	8006386 <_dtoa_r+0x26e>
 80063f8:	636f4361 	.word	0x636f4361
 80063fc:	3fd287a7 	.word	0x3fd287a7
 8006400:	8b60c8b3 	.word	0x8b60c8b3
 8006404:	3fc68a28 	.word	0x3fc68a28
 8006408:	509f79fb 	.word	0x509f79fb
 800640c:	3fd34413 	.word	0x3fd34413
 8006410:	08008b91 	.word	0x08008b91
 8006414:	08008ba8 	.word	0x08008ba8
 8006418:	7ff00000 	.word	0x7ff00000
 800641c:	08008b8d 	.word	0x08008b8d
 8006420:	08008b84 	.word	0x08008b84
 8006424:	08008b61 	.word	0x08008b61
 8006428:	3ff80000 	.word	0x3ff80000
 800642c:	08008ca0 	.word	0x08008ca0
 8006430:	08008c07 	.word	0x08008c07
 8006434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006436:	9a00      	ldr	r2, [sp, #0]
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	2b0e      	cmp	r3, #14
 800643e:	f200 80ad 	bhi.w	800659c <_dtoa_r+0x484>
 8006442:	2d00      	cmp	r5, #0
 8006444:	f000 80aa 	beq.w	800659c <_dtoa_r+0x484>
 8006448:	f1ba 0f00 	cmp.w	sl, #0
 800644c:	dd36      	ble.n	80064bc <_dtoa_r+0x3a4>
 800644e:	4ac3      	ldr	r2, [pc, #780]	; (800675c <_dtoa_r+0x644>)
 8006450:	f00a 030f 	and.w	r3, sl, #15
 8006454:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006458:	ed93 7b00 	vldr	d7, [r3]
 800645c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006460:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006464:	eeb0 8a47 	vmov.f32	s16, s14
 8006468:	eef0 8a67 	vmov.f32	s17, s15
 800646c:	d016      	beq.n	800649c <_dtoa_r+0x384>
 800646e:	4bbc      	ldr	r3, [pc, #752]	; (8006760 <_dtoa_r+0x648>)
 8006470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006478:	f7fa f9f0 	bl	800085c <__aeabi_ddiv>
 800647c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006480:	f007 070f 	and.w	r7, r7, #15
 8006484:	2503      	movs	r5, #3
 8006486:	4eb6      	ldr	r6, [pc, #728]	; (8006760 <_dtoa_r+0x648>)
 8006488:	b957      	cbnz	r7, 80064a0 <_dtoa_r+0x388>
 800648a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648e:	ec53 2b18 	vmov	r2, r3, d8
 8006492:	f7fa f9e3 	bl	800085c <__aeabi_ddiv>
 8006496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649a:	e029      	b.n	80064f0 <_dtoa_r+0x3d8>
 800649c:	2502      	movs	r5, #2
 800649e:	e7f2      	b.n	8006486 <_dtoa_r+0x36e>
 80064a0:	07f9      	lsls	r1, r7, #31
 80064a2:	d508      	bpl.n	80064b6 <_dtoa_r+0x39e>
 80064a4:	ec51 0b18 	vmov	r0, r1, d8
 80064a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064ac:	f7fa f8ac 	bl	8000608 <__aeabi_dmul>
 80064b0:	ec41 0b18 	vmov	d8, r0, r1
 80064b4:	3501      	adds	r5, #1
 80064b6:	107f      	asrs	r7, r7, #1
 80064b8:	3608      	adds	r6, #8
 80064ba:	e7e5      	b.n	8006488 <_dtoa_r+0x370>
 80064bc:	f000 80a6 	beq.w	800660c <_dtoa_r+0x4f4>
 80064c0:	f1ca 0600 	rsb	r6, sl, #0
 80064c4:	4ba5      	ldr	r3, [pc, #660]	; (800675c <_dtoa_r+0x644>)
 80064c6:	4fa6      	ldr	r7, [pc, #664]	; (8006760 <_dtoa_r+0x648>)
 80064c8:	f006 020f 	and.w	r2, r6, #15
 80064cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064d8:	f7fa f896 	bl	8000608 <__aeabi_dmul>
 80064dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e0:	1136      	asrs	r6, r6, #4
 80064e2:	2300      	movs	r3, #0
 80064e4:	2502      	movs	r5, #2
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	f040 8085 	bne.w	80065f6 <_dtoa_r+0x4de>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1d2      	bne.n	8006496 <_dtoa_r+0x37e>
 80064f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 808c 	beq.w	8006610 <_dtoa_r+0x4f8>
 80064f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064fc:	4b99      	ldr	r3, [pc, #612]	; (8006764 <_dtoa_r+0x64c>)
 80064fe:	2200      	movs	r2, #0
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7fa faf2 	bl	8000aec <__aeabi_dcmplt>
 8006508:	2800      	cmp	r0, #0
 800650a:	f000 8081 	beq.w	8006610 <_dtoa_r+0x4f8>
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d07d      	beq.n	8006610 <_dtoa_r+0x4f8>
 8006514:	f1b9 0f00 	cmp.w	r9, #0
 8006518:	dd3c      	ble.n	8006594 <_dtoa_r+0x47c>
 800651a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	2200      	movs	r2, #0
 8006522:	4b91      	ldr	r3, [pc, #580]	; (8006768 <_dtoa_r+0x650>)
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fa f86e 	bl	8000608 <__aeabi_dmul>
 800652c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006530:	3501      	adds	r5, #1
 8006532:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006536:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800653a:	4628      	mov	r0, r5
 800653c:	f7f9 fffa 	bl	8000534 <__aeabi_i2d>
 8006540:	4632      	mov	r2, r6
 8006542:	463b      	mov	r3, r7
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	4b88      	ldr	r3, [pc, #544]	; (800676c <_dtoa_r+0x654>)
 800654a:	2200      	movs	r2, #0
 800654c:	f7f9 fea6 	bl	800029c <__adddf3>
 8006550:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800655c:	2b00      	cmp	r3, #0
 800655e:	d15c      	bne.n	800661a <_dtoa_r+0x502>
 8006560:	4b83      	ldr	r3, [pc, #524]	; (8006770 <_dtoa_r+0x658>)
 8006562:	2200      	movs	r2, #0
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f7f9 fe96 	bl	8000298 <__aeabi_dsub>
 800656c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	f7fa fad8 	bl	8000b28 <__aeabi_dcmpgt>
 8006578:	2800      	cmp	r0, #0
 800657a:	f040 8296 	bne.w	8006aaa <_dtoa_r+0x992>
 800657e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006582:	4630      	mov	r0, r6
 8006584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006588:	4639      	mov	r1, r7
 800658a:	f7fa faaf 	bl	8000aec <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	f040 8288 	bne.w	8006aa4 <_dtoa_r+0x98c>
 8006594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006598:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800659c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f2c0 8158 	blt.w	8006854 <_dtoa_r+0x73c>
 80065a4:	f1ba 0f0e 	cmp.w	sl, #14
 80065a8:	f300 8154 	bgt.w	8006854 <_dtoa_r+0x73c>
 80065ac:	4b6b      	ldr	r3, [pc, #428]	; (800675c <_dtoa_r+0x644>)
 80065ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f280 80e3 	bge.w	8006784 <_dtoa_r+0x66c>
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f300 80df 	bgt.w	8006784 <_dtoa_r+0x66c>
 80065c6:	f040 826d 	bne.w	8006aa4 <_dtoa_r+0x98c>
 80065ca:	4b69      	ldr	r3, [pc, #420]	; (8006770 <_dtoa_r+0x658>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7fa f819 	bl	8000608 <__aeabi_dmul>
 80065d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065da:	f7fa fa9b 	bl	8000b14 <__aeabi_dcmpge>
 80065de:	9e01      	ldr	r6, [sp, #4]
 80065e0:	4637      	mov	r7, r6
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f040 8243 	bne.w	8006a6e <_dtoa_r+0x956>
 80065e8:	9d00      	ldr	r5, [sp, #0]
 80065ea:	2331      	movs	r3, #49	; 0x31
 80065ec:	f805 3b01 	strb.w	r3, [r5], #1
 80065f0:	f10a 0a01 	add.w	sl, sl, #1
 80065f4:	e23f      	b.n	8006a76 <_dtoa_r+0x95e>
 80065f6:	07f2      	lsls	r2, r6, #31
 80065f8:	d505      	bpl.n	8006606 <_dtoa_r+0x4ee>
 80065fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065fe:	f7fa f803 	bl	8000608 <__aeabi_dmul>
 8006602:	3501      	adds	r5, #1
 8006604:	2301      	movs	r3, #1
 8006606:	1076      	asrs	r6, r6, #1
 8006608:	3708      	adds	r7, #8
 800660a:	e76c      	b.n	80064e6 <_dtoa_r+0x3ce>
 800660c:	2502      	movs	r5, #2
 800660e:	e76f      	b.n	80064f0 <_dtoa_r+0x3d8>
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	f8cd a01c 	str.w	sl, [sp, #28]
 8006616:	930c      	str	r3, [sp, #48]	; 0x30
 8006618:	e78d      	b.n	8006536 <_dtoa_r+0x41e>
 800661a:	9900      	ldr	r1, [sp, #0]
 800661c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800661e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006620:	4b4e      	ldr	r3, [pc, #312]	; (800675c <_dtoa_r+0x644>)
 8006622:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006626:	4401      	add	r1, r0
 8006628:	9102      	str	r1, [sp, #8]
 800662a:	9908      	ldr	r1, [sp, #32]
 800662c:	eeb0 8a47 	vmov.f32	s16, s14
 8006630:	eef0 8a67 	vmov.f32	s17, s15
 8006634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006638:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800663c:	2900      	cmp	r1, #0
 800663e:	d045      	beq.n	80066cc <_dtoa_r+0x5b4>
 8006640:	494c      	ldr	r1, [pc, #304]	; (8006774 <_dtoa_r+0x65c>)
 8006642:	2000      	movs	r0, #0
 8006644:	f7fa f90a 	bl	800085c <__aeabi_ddiv>
 8006648:	ec53 2b18 	vmov	r2, r3, d8
 800664c:	f7f9 fe24 	bl	8000298 <__aeabi_dsub>
 8006650:	9d00      	ldr	r5, [sp, #0]
 8006652:	ec41 0b18 	vmov	d8, r0, r1
 8006656:	4639      	mov	r1, r7
 8006658:	4630      	mov	r0, r6
 800665a:	f7fa fa85 	bl	8000b68 <__aeabi_d2iz>
 800665e:	900c      	str	r0, [sp, #48]	; 0x30
 8006660:	f7f9 ff68 	bl	8000534 <__aeabi_i2d>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7f9 fe14 	bl	8000298 <__aeabi_dsub>
 8006670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006672:	3330      	adds	r3, #48	; 0x30
 8006674:	f805 3b01 	strb.w	r3, [r5], #1
 8006678:	ec53 2b18 	vmov	r2, r3, d8
 800667c:	4606      	mov	r6, r0
 800667e:	460f      	mov	r7, r1
 8006680:	f7fa fa34 	bl	8000aec <__aeabi_dcmplt>
 8006684:	2800      	cmp	r0, #0
 8006686:	d165      	bne.n	8006754 <_dtoa_r+0x63c>
 8006688:	4632      	mov	r2, r6
 800668a:	463b      	mov	r3, r7
 800668c:	4935      	ldr	r1, [pc, #212]	; (8006764 <_dtoa_r+0x64c>)
 800668e:	2000      	movs	r0, #0
 8006690:	f7f9 fe02 	bl	8000298 <__aeabi_dsub>
 8006694:	ec53 2b18 	vmov	r2, r3, d8
 8006698:	f7fa fa28 	bl	8000aec <__aeabi_dcmplt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f040 80b9 	bne.w	8006814 <_dtoa_r+0x6fc>
 80066a2:	9b02      	ldr	r3, [sp, #8]
 80066a4:	429d      	cmp	r5, r3
 80066a6:	f43f af75 	beq.w	8006594 <_dtoa_r+0x47c>
 80066aa:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <_dtoa_r+0x650>)
 80066ac:	ec51 0b18 	vmov	r0, r1, d8
 80066b0:	2200      	movs	r2, #0
 80066b2:	f7f9 ffa9 	bl	8000608 <__aeabi_dmul>
 80066b6:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <_dtoa_r+0x650>)
 80066b8:	ec41 0b18 	vmov	d8, r0, r1
 80066bc:	2200      	movs	r2, #0
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7f9 ffa1 	bl	8000608 <__aeabi_dmul>
 80066c6:	4606      	mov	r6, r0
 80066c8:	460f      	mov	r7, r1
 80066ca:	e7c4      	b.n	8006656 <_dtoa_r+0x53e>
 80066cc:	ec51 0b17 	vmov	r0, r1, d7
 80066d0:	f7f9 ff9a 	bl	8000608 <__aeabi_dmul>
 80066d4:	9b02      	ldr	r3, [sp, #8]
 80066d6:	9d00      	ldr	r5, [sp, #0]
 80066d8:	930c      	str	r3, [sp, #48]	; 0x30
 80066da:	ec41 0b18 	vmov	d8, r0, r1
 80066de:	4639      	mov	r1, r7
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7fa fa41 	bl	8000b68 <__aeabi_d2iz>
 80066e6:	9011      	str	r0, [sp, #68]	; 0x44
 80066e8:	f7f9 ff24 	bl	8000534 <__aeabi_i2d>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7f9 fdd0 	bl	8000298 <__aeabi_dsub>
 80066f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066fa:	3330      	adds	r3, #48	; 0x30
 80066fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	429d      	cmp	r5, r3
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	d134      	bne.n	8006778 <_dtoa_r+0x660>
 800670e:	4b19      	ldr	r3, [pc, #100]	; (8006774 <_dtoa_r+0x65c>)
 8006710:	ec51 0b18 	vmov	r0, r1, d8
 8006714:	f7f9 fdc2 	bl	800029c <__adddf3>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4630      	mov	r0, r6
 800671e:	4639      	mov	r1, r7
 8006720:	f7fa fa02 	bl	8000b28 <__aeabi_dcmpgt>
 8006724:	2800      	cmp	r0, #0
 8006726:	d175      	bne.n	8006814 <_dtoa_r+0x6fc>
 8006728:	ec53 2b18 	vmov	r2, r3, d8
 800672c:	4911      	ldr	r1, [pc, #68]	; (8006774 <_dtoa_r+0x65c>)
 800672e:	2000      	movs	r0, #0
 8006730:	f7f9 fdb2 	bl	8000298 <__aeabi_dsub>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7fa f9d6 	bl	8000aec <__aeabi_dcmplt>
 8006740:	2800      	cmp	r0, #0
 8006742:	f43f af27 	beq.w	8006594 <_dtoa_r+0x47c>
 8006746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006748:	1e6b      	subs	r3, r5, #1
 800674a:	930c      	str	r3, [sp, #48]	; 0x30
 800674c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006750:	2b30      	cmp	r3, #48	; 0x30
 8006752:	d0f8      	beq.n	8006746 <_dtoa_r+0x62e>
 8006754:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006758:	e04a      	b.n	80067f0 <_dtoa_r+0x6d8>
 800675a:	bf00      	nop
 800675c:	08008ca0 	.word	0x08008ca0
 8006760:	08008c78 	.word	0x08008c78
 8006764:	3ff00000 	.word	0x3ff00000
 8006768:	40240000 	.word	0x40240000
 800676c:	401c0000 	.word	0x401c0000
 8006770:	40140000 	.word	0x40140000
 8006774:	3fe00000 	.word	0x3fe00000
 8006778:	4baf      	ldr	r3, [pc, #700]	; (8006a38 <_dtoa_r+0x920>)
 800677a:	f7f9 ff45 	bl	8000608 <__aeabi_dmul>
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	e7ac      	b.n	80066de <_dtoa_r+0x5c6>
 8006784:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006788:	9d00      	ldr	r5, [sp, #0]
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7fa f863 	bl	800085c <__aeabi_ddiv>
 8006796:	f7fa f9e7 	bl	8000b68 <__aeabi_d2iz>
 800679a:	9002      	str	r0, [sp, #8]
 800679c:	f7f9 feca 	bl	8000534 <__aeabi_i2d>
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	f7f9 ff30 	bl	8000608 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7f9 fd72 	bl	8000298 <__aeabi_dsub>
 80067b4:	9e02      	ldr	r6, [sp, #8]
 80067b6:	9f01      	ldr	r7, [sp, #4]
 80067b8:	3630      	adds	r6, #48	; 0x30
 80067ba:	f805 6b01 	strb.w	r6, [r5], #1
 80067be:	9e00      	ldr	r6, [sp, #0]
 80067c0:	1bae      	subs	r6, r5, r6
 80067c2:	42b7      	cmp	r7, r6
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	d137      	bne.n	800683a <_dtoa_r+0x722>
 80067ca:	f7f9 fd67 	bl	800029c <__adddf3>
 80067ce:	4642      	mov	r2, r8
 80067d0:	464b      	mov	r3, r9
 80067d2:	4606      	mov	r6, r0
 80067d4:	460f      	mov	r7, r1
 80067d6:	f7fa f9a7 	bl	8000b28 <__aeabi_dcmpgt>
 80067da:	b9c8      	cbnz	r0, 8006810 <_dtoa_r+0x6f8>
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7fa f978 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e8:	b110      	cbz	r0, 80067f0 <_dtoa_r+0x6d8>
 80067ea:	9b02      	ldr	r3, [sp, #8]
 80067ec:	07d9      	lsls	r1, r3, #31
 80067ee:	d40f      	bmi.n	8006810 <_dtoa_r+0x6f8>
 80067f0:	4620      	mov	r0, r4
 80067f2:	4659      	mov	r1, fp
 80067f4:	f000 facc 	bl	8006d90 <_Bfree>
 80067f8:	2300      	movs	r3, #0
 80067fa:	702b      	strb	r3, [r5, #0]
 80067fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067fe:	f10a 0001 	add.w	r0, sl, #1
 8006802:	6018      	str	r0, [r3, #0]
 8006804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006806:	2b00      	cmp	r3, #0
 8006808:	f43f acd8 	beq.w	80061bc <_dtoa_r+0xa4>
 800680c:	601d      	str	r5, [r3, #0]
 800680e:	e4d5      	b.n	80061bc <_dtoa_r+0xa4>
 8006810:	f8cd a01c 	str.w	sl, [sp, #28]
 8006814:	462b      	mov	r3, r5
 8006816:	461d      	mov	r5, r3
 8006818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800681c:	2a39      	cmp	r2, #57	; 0x39
 800681e:	d108      	bne.n	8006832 <_dtoa_r+0x71a>
 8006820:	9a00      	ldr	r2, [sp, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d1f7      	bne.n	8006816 <_dtoa_r+0x6fe>
 8006826:	9a07      	ldr	r2, [sp, #28]
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	3201      	adds	r2, #1
 800682c:	9207      	str	r2, [sp, #28]
 800682e:	2230      	movs	r2, #48	; 0x30
 8006830:	700a      	strb	r2, [r1, #0]
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	3201      	adds	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e78c      	b.n	8006754 <_dtoa_r+0x63c>
 800683a:	4b7f      	ldr	r3, [pc, #508]	; (8006a38 <_dtoa_r+0x920>)
 800683c:	2200      	movs	r2, #0
 800683e:	f7f9 fee3 	bl	8000608 <__aeabi_dmul>
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	4606      	mov	r6, r0
 8006848:	460f      	mov	r7, r1
 800684a:	f7fa f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800684e:	2800      	cmp	r0, #0
 8006850:	d09b      	beq.n	800678a <_dtoa_r+0x672>
 8006852:	e7cd      	b.n	80067f0 <_dtoa_r+0x6d8>
 8006854:	9a08      	ldr	r2, [sp, #32]
 8006856:	2a00      	cmp	r2, #0
 8006858:	f000 80c4 	beq.w	80069e4 <_dtoa_r+0x8cc>
 800685c:	9a05      	ldr	r2, [sp, #20]
 800685e:	2a01      	cmp	r2, #1
 8006860:	f300 80a8 	bgt.w	80069b4 <_dtoa_r+0x89c>
 8006864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006866:	2a00      	cmp	r2, #0
 8006868:	f000 80a0 	beq.w	80069ac <_dtoa_r+0x894>
 800686c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006870:	9e06      	ldr	r6, [sp, #24]
 8006872:	4645      	mov	r5, r8
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	2101      	movs	r1, #1
 8006878:	441a      	add	r2, r3
 800687a:	4620      	mov	r0, r4
 800687c:	4498      	add	r8, r3
 800687e:	9204      	str	r2, [sp, #16]
 8006880:	f000 fb42 	bl	8006f08 <__i2b>
 8006884:	4607      	mov	r7, r0
 8006886:	2d00      	cmp	r5, #0
 8006888:	dd0b      	ble.n	80068a2 <_dtoa_r+0x78a>
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	dd08      	ble.n	80068a2 <_dtoa_r+0x78a>
 8006890:	42ab      	cmp	r3, r5
 8006892:	9a04      	ldr	r2, [sp, #16]
 8006894:	bfa8      	it	ge
 8006896:	462b      	movge	r3, r5
 8006898:	eba8 0803 	sub.w	r8, r8, r3
 800689c:	1aed      	subs	r5, r5, r3
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	b1fb      	cbz	r3, 80068e6 <_dtoa_r+0x7ce>
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 809f 	beq.w	80069ec <_dtoa_r+0x8d4>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	dd11      	ble.n	80068d6 <_dtoa_r+0x7be>
 80068b2:	4639      	mov	r1, r7
 80068b4:	4632      	mov	r2, r6
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 fbe2 	bl	8007080 <__pow5mult>
 80068bc:	465a      	mov	r2, fp
 80068be:	4601      	mov	r1, r0
 80068c0:	4607      	mov	r7, r0
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 fb36 	bl	8006f34 <__multiply>
 80068c8:	4659      	mov	r1, fp
 80068ca:	9007      	str	r0, [sp, #28]
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fa5f 	bl	8006d90 <_Bfree>
 80068d2:	9b07      	ldr	r3, [sp, #28]
 80068d4:	469b      	mov	fp, r3
 80068d6:	9b06      	ldr	r3, [sp, #24]
 80068d8:	1b9a      	subs	r2, r3, r6
 80068da:	d004      	beq.n	80068e6 <_dtoa_r+0x7ce>
 80068dc:	4659      	mov	r1, fp
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fbce 	bl	8007080 <__pow5mult>
 80068e4:	4683      	mov	fp, r0
 80068e6:	2101      	movs	r1, #1
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fb0d 	bl	8006f08 <__i2b>
 80068ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	4606      	mov	r6, r0
 80068f4:	dd7c      	ble.n	80069f0 <_dtoa_r+0x8d8>
 80068f6:	461a      	mov	r2, r3
 80068f8:	4601      	mov	r1, r0
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 fbc0 	bl	8007080 <__pow5mult>
 8006900:	9b05      	ldr	r3, [sp, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	4606      	mov	r6, r0
 8006906:	dd76      	ble.n	80069f6 <_dtoa_r+0x8de>
 8006908:	2300      	movs	r3, #0
 800690a:	9306      	str	r3, [sp, #24]
 800690c:	6933      	ldr	r3, [r6, #16]
 800690e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006912:	6918      	ldr	r0, [r3, #16]
 8006914:	f000 faa8 	bl	8006e68 <__hi0bits>
 8006918:	f1c0 0020 	rsb	r0, r0, #32
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	4418      	add	r0, r3
 8006920:	f010 001f 	ands.w	r0, r0, #31
 8006924:	f000 8086 	beq.w	8006a34 <_dtoa_r+0x91c>
 8006928:	f1c0 0320 	rsb	r3, r0, #32
 800692c:	2b04      	cmp	r3, #4
 800692e:	dd7f      	ble.n	8006a30 <_dtoa_r+0x918>
 8006930:	f1c0 001c 	rsb	r0, r0, #28
 8006934:	9b04      	ldr	r3, [sp, #16]
 8006936:	4403      	add	r3, r0
 8006938:	4480      	add	r8, r0
 800693a:	4405      	add	r5, r0
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	f1b8 0f00 	cmp.w	r8, #0
 8006942:	dd05      	ble.n	8006950 <_dtoa_r+0x838>
 8006944:	4659      	mov	r1, fp
 8006946:	4642      	mov	r2, r8
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fbf3 	bl	8007134 <__lshift>
 800694e:	4683      	mov	fp, r0
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	dd05      	ble.n	8006962 <_dtoa_r+0x84a>
 8006956:	4631      	mov	r1, r6
 8006958:	461a      	mov	r2, r3
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fbea 	bl	8007134 <__lshift>
 8006960:	4606      	mov	r6, r0
 8006962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	d069      	beq.n	8006a3c <_dtoa_r+0x924>
 8006968:	4631      	mov	r1, r6
 800696a:	4658      	mov	r0, fp
 800696c:	f000 fc4e 	bl	800720c <__mcmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	da63      	bge.n	8006a3c <_dtoa_r+0x924>
 8006974:	2300      	movs	r3, #0
 8006976:	4659      	mov	r1, fp
 8006978:	220a      	movs	r2, #10
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fa2a 	bl	8006dd4 <__multadd>
 8006980:	9b08      	ldr	r3, [sp, #32]
 8006982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006986:	4683      	mov	fp, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 818f 	beq.w	8006cac <_dtoa_r+0xb94>
 800698e:	4639      	mov	r1, r7
 8006990:	2300      	movs	r3, #0
 8006992:	220a      	movs	r2, #10
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fa1d 	bl	8006dd4 <__multadd>
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	4607      	mov	r7, r0
 80069a0:	f300 808e 	bgt.w	8006ac0 <_dtoa_r+0x9a8>
 80069a4:	9b05      	ldr	r3, [sp, #20]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	dc50      	bgt.n	8006a4c <_dtoa_r+0x934>
 80069aa:	e089      	b.n	8006ac0 <_dtoa_r+0x9a8>
 80069ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069b2:	e75d      	b.n	8006870 <_dtoa_r+0x758>
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	1e5e      	subs	r6, r3, #1
 80069b8:	9b06      	ldr	r3, [sp, #24]
 80069ba:	42b3      	cmp	r3, r6
 80069bc:	bfbf      	itttt	lt
 80069be:	9b06      	ldrlt	r3, [sp, #24]
 80069c0:	9606      	strlt	r6, [sp, #24]
 80069c2:	1af2      	sublt	r2, r6, r3
 80069c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80069c6:	bfb6      	itet	lt
 80069c8:	189b      	addlt	r3, r3, r2
 80069ca:	1b9e      	subge	r6, r3, r6
 80069cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	bfb8      	it	lt
 80069d2:	2600      	movlt	r6, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bfb5      	itete	lt
 80069d8:	eba8 0503 	sublt.w	r5, r8, r3
 80069dc:	9b01      	ldrge	r3, [sp, #4]
 80069de:	2300      	movlt	r3, #0
 80069e0:	4645      	movge	r5, r8
 80069e2:	e747      	b.n	8006874 <_dtoa_r+0x75c>
 80069e4:	9e06      	ldr	r6, [sp, #24]
 80069e6:	9f08      	ldr	r7, [sp, #32]
 80069e8:	4645      	mov	r5, r8
 80069ea:	e74c      	b.n	8006886 <_dtoa_r+0x76e>
 80069ec:	9a06      	ldr	r2, [sp, #24]
 80069ee:	e775      	b.n	80068dc <_dtoa_r+0x7c4>
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	dc18      	bgt.n	8006a28 <_dtoa_r+0x910>
 80069f6:	9b02      	ldr	r3, [sp, #8]
 80069f8:	b9b3      	cbnz	r3, 8006a28 <_dtoa_r+0x910>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a00:	b9a3      	cbnz	r3, 8006a2c <_dtoa_r+0x914>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a08:	0d1b      	lsrs	r3, r3, #20
 8006a0a:	051b      	lsls	r3, r3, #20
 8006a0c:	b12b      	cbz	r3, 8006a1a <_dtoa_r+0x902>
 8006a0e:	9b04      	ldr	r3, [sp, #16]
 8006a10:	3301      	adds	r3, #1
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	f108 0801 	add.w	r8, r8, #1
 8006a18:	2301      	movs	r3, #1
 8006a1a:	9306      	str	r3, [sp, #24]
 8006a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f47f af74 	bne.w	800690c <_dtoa_r+0x7f4>
 8006a24:	2001      	movs	r0, #1
 8006a26:	e779      	b.n	800691c <_dtoa_r+0x804>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e7f6      	b.n	8006a1a <_dtoa_r+0x902>
 8006a2c:	9b02      	ldr	r3, [sp, #8]
 8006a2e:	e7f4      	b.n	8006a1a <_dtoa_r+0x902>
 8006a30:	d085      	beq.n	800693e <_dtoa_r+0x826>
 8006a32:	4618      	mov	r0, r3
 8006a34:	301c      	adds	r0, #28
 8006a36:	e77d      	b.n	8006934 <_dtoa_r+0x81c>
 8006a38:	40240000 	.word	0x40240000
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dc38      	bgt.n	8006ab4 <_dtoa_r+0x99c>
 8006a42:	9b05      	ldr	r3, [sp, #20]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	dd35      	ble.n	8006ab4 <_dtoa_r+0x99c>
 8006a48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	d10d      	bne.n	8006a6e <_dtoa_r+0x956>
 8006a52:	4631      	mov	r1, r6
 8006a54:	464b      	mov	r3, r9
 8006a56:	2205      	movs	r2, #5
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 f9bb 	bl	8006dd4 <__multadd>
 8006a5e:	4601      	mov	r1, r0
 8006a60:	4606      	mov	r6, r0
 8006a62:	4658      	mov	r0, fp
 8006a64:	f000 fbd2 	bl	800720c <__mcmp>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f73f adbd 	bgt.w	80065e8 <_dtoa_r+0x4d0>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a70:	9d00      	ldr	r5, [sp, #0]
 8006a72:	ea6f 0a03 	mvn.w	sl, r3
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f987 	bl	8006d90 <_Bfree>
 8006a82:	2f00      	cmp	r7, #0
 8006a84:	f43f aeb4 	beq.w	80067f0 <_dtoa_r+0x6d8>
 8006a88:	f1b8 0f00 	cmp.w	r8, #0
 8006a8c:	d005      	beq.n	8006a9a <_dtoa_r+0x982>
 8006a8e:	45b8      	cmp	r8, r7
 8006a90:	d003      	beq.n	8006a9a <_dtoa_r+0x982>
 8006a92:	4641      	mov	r1, r8
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 f97b 	bl	8006d90 <_Bfree>
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 f977 	bl	8006d90 <_Bfree>
 8006aa2:	e6a5      	b.n	80067f0 <_dtoa_r+0x6d8>
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	4637      	mov	r7, r6
 8006aa8:	e7e1      	b.n	8006a6e <_dtoa_r+0x956>
 8006aaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006aac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ab0:	4637      	mov	r7, r6
 8006ab2:	e599      	b.n	80065e8 <_dtoa_r+0x4d0>
 8006ab4:	9b08      	ldr	r3, [sp, #32]
 8006ab6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80fd 	beq.w	8006cba <_dtoa_r+0xba2>
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	dd05      	ble.n	8006ad0 <_dtoa_r+0x9b8>
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	462a      	mov	r2, r5
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fb33 	bl	8007134 <__lshift>
 8006ace:	4607      	mov	r7, r0
 8006ad0:	9b06      	ldr	r3, [sp, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d05c      	beq.n	8006b90 <_dtoa_r+0xa78>
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 f919 	bl	8006d10 <_Balloc>
 8006ade:	4605      	mov	r5, r0
 8006ae0:	b928      	cbnz	r0, 8006aee <_dtoa_r+0x9d6>
 8006ae2:	4b80      	ldr	r3, [pc, #512]	; (8006ce4 <_dtoa_r+0xbcc>)
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aea:	f7ff bb2e 	b.w	800614a <_dtoa_r+0x32>
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	3202      	adds	r2, #2
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	f107 010c 	add.w	r1, r7, #12
 8006af8:	300c      	adds	r0, #12
 8006afa:	f7fe fd1f 	bl	800553c <memcpy>
 8006afe:	2201      	movs	r2, #1
 8006b00:	4629      	mov	r1, r5
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fb16 	bl	8007134 <__lshift>
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	444b      	add	r3, r9
 8006b12:	9307      	str	r3, [sp, #28]
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	46b8      	mov	r8, r7
 8006b1c:	9306      	str	r3, [sp, #24]
 8006b1e:	4607      	mov	r7, r0
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	4631      	mov	r1, r6
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4658      	mov	r0, fp
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	f7ff fa69 	bl	8006000 <quorem>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	3330      	adds	r3, #48	; 0x30
 8006b32:	9004      	str	r0, [sp, #16]
 8006b34:	4641      	mov	r1, r8
 8006b36:	4658      	mov	r0, fp
 8006b38:	9308      	str	r3, [sp, #32]
 8006b3a:	f000 fb67 	bl	800720c <__mcmp>
 8006b3e:	463a      	mov	r2, r7
 8006b40:	4681      	mov	r9, r0
 8006b42:	4631      	mov	r1, r6
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fb7d 	bl	8007244 <__mdiff>
 8006b4a:	68c2      	ldr	r2, [r0, #12]
 8006b4c:	9b08      	ldr	r3, [sp, #32]
 8006b4e:	4605      	mov	r5, r0
 8006b50:	bb02      	cbnz	r2, 8006b94 <_dtoa_r+0xa7c>
 8006b52:	4601      	mov	r1, r0
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fb59 	bl	800720c <__mcmp>
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4620      	mov	r0, r4
 8006b62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b66:	f000 f913 	bl	8006d90 <_Bfree>
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b6e:	9d01      	ldr	r5, [sp, #4]
 8006b70:	ea43 0102 	orr.w	r1, r3, r2
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	430b      	orrs	r3, r1
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	d10d      	bne.n	8006b98 <_dtoa_r+0xa80>
 8006b7c:	2b39      	cmp	r3, #57	; 0x39
 8006b7e:	d029      	beq.n	8006bd4 <_dtoa_r+0xabc>
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	dd01      	ble.n	8006b8a <_dtoa_r+0xa72>
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	3331      	adds	r3, #49	; 0x31
 8006b8a:	9a02      	ldr	r2, [sp, #8]
 8006b8c:	7013      	strb	r3, [r2, #0]
 8006b8e:	e774      	b.n	8006a7a <_dtoa_r+0x962>
 8006b90:	4638      	mov	r0, r7
 8006b92:	e7b9      	b.n	8006b08 <_dtoa_r+0x9f0>
 8006b94:	2201      	movs	r2, #1
 8006b96:	e7e2      	b.n	8006b5e <_dtoa_r+0xa46>
 8006b98:	f1b9 0f00 	cmp.w	r9, #0
 8006b9c:	db06      	blt.n	8006bac <_dtoa_r+0xa94>
 8006b9e:	9905      	ldr	r1, [sp, #20]
 8006ba0:	ea41 0909 	orr.w	r9, r1, r9
 8006ba4:	9906      	ldr	r1, [sp, #24]
 8006ba6:	ea59 0101 	orrs.w	r1, r9, r1
 8006baa:	d120      	bne.n	8006bee <_dtoa_r+0xad6>
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	ddec      	ble.n	8006b8a <_dtoa_r+0xa72>
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	f000 fabc 	bl	8007134 <__lshift>
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4683      	mov	fp, r0
 8006bc0:	f000 fb24 	bl	800720c <__mcmp>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	9b01      	ldr	r3, [sp, #4]
 8006bc8:	dc02      	bgt.n	8006bd0 <_dtoa_r+0xab8>
 8006bca:	d1de      	bne.n	8006b8a <_dtoa_r+0xa72>
 8006bcc:	07da      	lsls	r2, r3, #31
 8006bce:	d5dc      	bpl.n	8006b8a <_dtoa_r+0xa72>
 8006bd0:	2b39      	cmp	r3, #57	; 0x39
 8006bd2:	d1d8      	bne.n	8006b86 <_dtoa_r+0xa6e>
 8006bd4:	9a02      	ldr	r2, [sp, #8]
 8006bd6:	2339      	movs	r3, #57	; 0x39
 8006bd8:	7013      	strb	r3, [r2, #0]
 8006bda:	462b      	mov	r3, r5
 8006bdc:	461d      	mov	r5, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006be4:	2a39      	cmp	r2, #57	; 0x39
 8006be6:	d050      	beq.n	8006c8a <_dtoa_r+0xb72>
 8006be8:	3201      	adds	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e745      	b.n	8006a7a <_dtoa_r+0x962>
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	dd03      	ble.n	8006bfa <_dtoa_r+0xae2>
 8006bf2:	2b39      	cmp	r3, #57	; 0x39
 8006bf4:	d0ee      	beq.n	8006bd4 <_dtoa_r+0xabc>
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	e7c7      	b.n	8006b8a <_dtoa_r+0xa72>
 8006bfa:	9a01      	ldr	r2, [sp, #4]
 8006bfc:	9907      	ldr	r1, [sp, #28]
 8006bfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c02:	428a      	cmp	r2, r1
 8006c04:	d02a      	beq.n	8006c5c <_dtoa_r+0xb44>
 8006c06:	4659      	mov	r1, fp
 8006c08:	2300      	movs	r3, #0
 8006c0a:	220a      	movs	r2, #10
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 f8e1 	bl	8006dd4 <__multadd>
 8006c12:	45b8      	cmp	r8, r7
 8006c14:	4683      	mov	fp, r0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	f04f 020a 	mov.w	r2, #10
 8006c1e:	4641      	mov	r1, r8
 8006c20:	4620      	mov	r0, r4
 8006c22:	d107      	bne.n	8006c34 <_dtoa_r+0xb1c>
 8006c24:	f000 f8d6 	bl	8006dd4 <__multadd>
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	e775      	b.n	8006b20 <_dtoa_r+0xa08>
 8006c34:	f000 f8ce 	bl	8006dd4 <__multadd>
 8006c38:	4639      	mov	r1, r7
 8006c3a:	4680      	mov	r8, r0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	220a      	movs	r2, #10
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 f8c7 	bl	8006dd4 <__multadd>
 8006c46:	4607      	mov	r7, r0
 8006c48:	e7f0      	b.n	8006c2c <_dtoa_r+0xb14>
 8006c4a:	f1b9 0f00 	cmp.w	r9, #0
 8006c4e:	9a00      	ldr	r2, [sp, #0]
 8006c50:	bfcc      	ite	gt
 8006c52:	464d      	movgt	r5, r9
 8006c54:	2501      	movle	r5, #1
 8006c56:	4415      	add	r5, r2
 8006c58:	f04f 0800 	mov.w	r8, #0
 8006c5c:	4659      	mov	r1, fp
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4620      	mov	r0, r4
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f000 fa66 	bl	8007134 <__lshift>
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4683      	mov	fp, r0
 8006c6c:	f000 face 	bl	800720c <__mcmp>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	dcb2      	bgt.n	8006bda <_dtoa_r+0xac2>
 8006c74:	d102      	bne.n	8006c7c <_dtoa_r+0xb64>
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	07db      	lsls	r3, r3, #31
 8006c7a:	d4ae      	bmi.n	8006bda <_dtoa_r+0xac2>
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	461d      	mov	r5, r3
 8006c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c84:	2a30      	cmp	r2, #48	; 0x30
 8006c86:	d0fa      	beq.n	8006c7e <_dtoa_r+0xb66>
 8006c88:	e6f7      	b.n	8006a7a <_dtoa_r+0x962>
 8006c8a:	9a00      	ldr	r2, [sp, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d1a5      	bne.n	8006bdc <_dtoa_r+0xac4>
 8006c90:	f10a 0a01 	add.w	sl, sl, #1
 8006c94:	2331      	movs	r3, #49	; 0x31
 8006c96:	e779      	b.n	8006b8c <_dtoa_r+0xa74>
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <_dtoa_r+0xbd0>)
 8006c9a:	f7ff baaf 	b.w	80061fc <_dtoa_r+0xe4>
 8006c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f aa86 	bne.w	80061b2 <_dtoa_r+0x9a>
 8006ca6:	4b11      	ldr	r3, [pc, #68]	; (8006cec <_dtoa_r+0xbd4>)
 8006ca8:	f7ff baa8 	b.w	80061fc <_dtoa_r+0xe4>
 8006cac:	f1b9 0f00 	cmp.w	r9, #0
 8006cb0:	dc03      	bgt.n	8006cba <_dtoa_r+0xba2>
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	f73f aec9 	bgt.w	8006a4c <_dtoa_r+0x934>
 8006cba:	9d00      	ldr	r5, [sp, #0]
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f7ff f99e 	bl	8006000 <quorem>
 8006cc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006cc8:	f805 3b01 	strb.w	r3, [r5], #1
 8006ccc:	9a00      	ldr	r2, [sp, #0]
 8006cce:	1aaa      	subs	r2, r5, r2
 8006cd0:	4591      	cmp	r9, r2
 8006cd2:	ddba      	ble.n	8006c4a <_dtoa_r+0xb32>
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	220a      	movs	r2, #10
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f87a 	bl	8006dd4 <__multadd>
 8006ce0:	4683      	mov	fp, r0
 8006ce2:	e7eb      	b.n	8006cbc <_dtoa_r+0xba4>
 8006ce4:	08008c07 	.word	0x08008c07
 8006ce8:	08008b60 	.word	0x08008b60
 8006cec:	08008b84 	.word	0x08008b84

08006cf0 <_localeconv_r>:
 8006cf0:	4800      	ldr	r0, [pc, #0]	; (8006cf4 <_localeconv_r+0x4>)
 8006cf2:	4770      	bx	lr
 8006cf4:	20000164 	.word	0x20000164

08006cf8 <__malloc_lock>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__malloc_lock+0x8>)
 8006cfa:	f000 bd48 	b.w	800778e <__retarget_lock_acquire_recursive>
 8006cfe:	bf00      	nop
 8006d00:	200004f0 	.word	0x200004f0

08006d04 <__malloc_unlock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__malloc_unlock+0x8>)
 8006d06:	f000 bd43 	b.w	8007790 <__retarget_lock_release_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	200004f0 	.word	0x200004f0

08006d10 <_Balloc>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	b976      	cbnz	r6, 8006d38 <_Balloc+0x28>
 8006d1a:	2010      	movs	r0, #16
 8006d1c:	f7fe fbf0 	bl	8005500 <malloc>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6260      	str	r0, [r4, #36]	; 0x24
 8006d24:	b920      	cbnz	r0, 8006d30 <_Balloc+0x20>
 8006d26:	4b18      	ldr	r3, [pc, #96]	; (8006d88 <_Balloc+0x78>)
 8006d28:	4818      	ldr	r0, [pc, #96]	; (8006d8c <_Balloc+0x7c>)
 8006d2a:	2166      	movs	r1, #102	; 0x66
 8006d2c:	f000 fcfe 	bl	800772c <__assert_func>
 8006d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d34:	6006      	str	r6, [r0, #0]
 8006d36:	60c6      	str	r6, [r0, #12]
 8006d38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d3a:	68f3      	ldr	r3, [r6, #12]
 8006d3c:	b183      	cbz	r3, 8006d60 <_Balloc+0x50>
 8006d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d46:	b9b8      	cbnz	r0, 8006d78 <_Balloc+0x68>
 8006d48:	2101      	movs	r1, #1
 8006d4a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d4e:	1d72      	adds	r2, r6, #5
 8006d50:	0092      	lsls	r2, r2, #2
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 fb5a 	bl	800740c <_calloc_r>
 8006d58:	b160      	cbz	r0, 8006d74 <_Balloc+0x64>
 8006d5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d5e:	e00e      	b.n	8006d7e <_Balloc+0x6e>
 8006d60:	2221      	movs	r2, #33	; 0x21
 8006d62:	2104      	movs	r1, #4
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 fb51 	bl	800740c <_calloc_r>
 8006d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6c:	60f0      	str	r0, [r6, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e4      	bne.n	8006d3e <_Balloc+0x2e>
 8006d74:	2000      	movs	r0, #0
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	6802      	ldr	r2, [r0, #0]
 8006d7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d84:	e7f7      	b.n	8006d76 <_Balloc+0x66>
 8006d86:	bf00      	nop
 8006d88:	08008b91 	.word	0x08008b91
 8006d8c:	08008c18 	.word	0x08008c18

08006d90 <_Bfree>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d94:	4605      	mov	r5, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	b976      	cbnz	r6, 8006db8 <_Bfree+0x28>
 8006d9a:	2010      	movs	r0, #16
 8006d9c:	f7fe fbb0 	bl	8005500 <malloc>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6268      	str	r0, [r5, #36]	; 0x24
 8006da4:	b920      	cbnz	r0, 8006db0 <_Bfree+0x20>
 8006da6:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <_Bfree+0x3c>)
 8006da8:	4809      	ldr	r0, [pc, #36]	; (8006dd0 <_Bfree+0x40>)
 8006daa:	218a      	movs	r1, #138	; 0x8a
 8006dac:	f000 fcbe 	bl	800772c <__assert_func>
 8006db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006db4:	6006      	str	r6, [r0, #0]
 8006db6:	60c6      	str	r6, [r0, #12]
 8006db8:	b13c      	cbz	r4, 8006dca <_Bfree+0x3a>
 8006dba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dbc:	6862      	ldr	r2, [r4, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dc4:	6021      	str	r1, [r4, #0]
 8006dc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	08008b91 	.word	0x08008b91
 8006dd0:	08008c18 	.word	0x08008c18

08006dd4 <__multadd>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	690e      	ldr	r6, [r1, #16]
 8006dda:	4607      	mov	r7, r0
 8006ddc:	4698      	mov	r8, r3
 8006dde:	460c      	mov	r4, r1
 8006de0:	f101 0014 	add.w	r0, r1, #20
 8006de4:	2300      	movs	r3, #0
 8006de6:	6805      	ldr	r5, [r0, #0]
 8006de8:	b2a9      	uxth	r1, r5
 8006dea:	fb02 8101 	mla	r1, r2, r1, r8
 8006dee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006df2:	0c2d      	lsrs	r5, r5, #16
 8006df4:	fb02 c505 	mla	r5, r2, r5, ip
 8006df8:	b289      	uxth	r1, r1
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e00:	429e      	cmp	r6, r3
 8006e02:	f840 1b04 	str.w	r1, [r0], #4
 8006e06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e0a:	dcec      	bgt.n	8006de6 <__multadd+0x12>
 8006e0c:	f1b8 0f00 	cmp.w	r8, #0
 8006e10:	d022      	beq.n	8006e58 <__multadd+0x84>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	42b3      	cmp	r3, r6
 8006e16:	dc19      	bgt.n	8006e4c <__multadd+0x78>
 8006e18:	6861      	ldr	r1, [r4, #4]
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	f7ff ff77 	bl	8006d10 <_Balloc>
 8006e22:	4605      	mov	r5, r0
 8006e24:	b928      	cbnz	r0, 8006e32 <__multadd+0x5e>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <__multadd+0x8c>)
 8006e2a:	480e      	ldr	r0, [pc, #56]	; (8006e64 <__multadd+0x90>)
 8006e2c:	21b5      	movs	r1, #181	; 0xb5
 8006e2e:	f000 fc7d 	bl	800772c <__assert_func>
 8006e32:	6922      	ldr	r2, [r4, #16]
 8006e34:	3202      	adds	r2, #2
 8006e36:	f104 010c 	add.w	r1, r4, #12
 8006e3a:	0092      	lsls	r2, r2, #2
 8006e3c:	300c      	adds	r0, #12
 8006e3e:	f7fe fb7d 	bl	800553c <memcpy>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ffa3 	bl	8006d90 <_Bfree>
 8006e4a:	462c      	mov	r4, r5
 8006e4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006e50:	3601      	adds	r6, #1
 8006e52:	f8c3 8014 	str.w	r8, [r3, #20]
 8006e56:	6126      	str	r6, [r4, #16]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5e:	bf00      	nop
 8006e60:	08008c07 	.word	0x08008c07
 8006e64:	08008c18 	.word	0x08008c18

08006e68 <__hi0bits>:
 8006e68:	0c03      	lsrs	r3, r0, #16
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	b9d3      	cbnz	r3, 8006ea4 <__hi0bits+0x3c>
 8006e6e:	0400      	lsls	r0, r0, #16
 8006e70:	2310      	movs	r3, #16
 8006e72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e76:	bf04      	itt	eq
 8006e78:	0200      	lsleq	r0, r0, #8
 8006e7a:	3308      	addeq	r3, #8
 8006e7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e80:	bf04      	itt	eq
 8006e82:	0100      	lsleq	r0, r0, #4
 8006e84:	3304      	addeq	r3, #4
 8006e86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e8a:	bf04      	itt	eq
 8006e8c:	0080      	lsleq	r0, r0, #2
 8006e8e:	3302      	addeq	r3, #2
 8006e90:	2800      	cmp	r0, #0
 8006e92:	db05      	blt.n	8006ea0 <__hi0bits+0x38>
 8006e94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e98:	f103 0301 	add.w	r3, r3, #1
 8006e9c:	bf08      	it	eq
 8006e9e:	2320      	moveq	r3, #32
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	4770      	bx	lr
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e7e4      	b.n	8006e72 <__hi0bits+0xa>

08006ea8 <__lo0bits>:
 8006ea8:	6803      	ldr	r3, [r0, #0]
 8006eaa:	f013 0207 	ands.w	r2, r3, #7
 8006eae:	4601      	mov	r1, r0
 8006eb0:	d00b      	beq.n	8006eca <__lo0bits+0x22>
 8006eb2:	07da      	lsls	r2, r3, #31
 8006eb4:	d424      	bmi.n	8006f00 <__lo0bits+0x58>
 8006eb6:	0798      	lsls	r0, r3, #30
 8006eb8:	bf49      	itett	mi
 8006eba:	085b      	lsrmi	r3, r3, #1
 8006ebc:	089b      	lsrpl	r3, r3, #2
 8006ebe:	2001      	movmi	r0, #1
 8006ec0:	600b      	strmi	r3, [r1, #0]
 8006ec2:	bf5c      	itt	pl
 8006ec4:	600b      	strpl	r3, [r1, #0]
 8006ec6:	2002      	movpl	r0, #2
 8006ec8:	4770      	bx	lr
 8006eca:	b298      	uxth	r0, r3
 8006ecc:	b9b0      	cbnz	r0, 8006efc <__lo0bits+0x54>
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	2010      	movs	r0, #16
 8006ed2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ed6:	bf04      	itt	eq
 8006ed8:	0a1b      	lsreq	r3, r3, #8
 8006eda:	3008      	addeq	r0, #8
 8006edc:	071a      	lsls	r2, r3, #28
 8006ede:	bf04      	itt	eq
 8006ee0:	091b      	lsreq	r3, r3, #4
 8006ee2:	3004      	addeq	r0, #4
 8006ee4:	079a      	lsls	r2, r3, #30
 8006ee6:	bf04      	itt	eq
 8006ee8:	089b      	lsreq	r3, r3, #2
 8006eea:	3002      	addeq	r0, #2
 8006eec:	07da      	lsls	r2, r3, #31
 8006eee:	d403      	bmi.n	8006ef8 <__lo0bits+0x50>
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	f100 0001 	add.w	r0, r0, #1
 8006ef6:	d005      	beq.n	8006f04 <__lo0bits+0x5c>
 8006ef8:	600b      	str	r3, [r1, #0]
 8006efa:	4770      	bx	lr
 8006efc:	4610      	mov	r0, r2
 8006efe:	e7e8      	b.n	8006ed2 <__lo0bits+0x2a>
 8006f00:	2000      	movs	r0, #0
 8006f02:	4770      	bx	lr
 8006f04:	2020      	movs	r0, #32
 8006f06:	4770      	bx	lr

08006f08 <__i2b>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	f7ff feff 	bl	8006d10 <_Balloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	b928      	cbnz	r0, 8006f22 <__i2b+0x1a>
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <__i2b+0x24>)
 8006f18:	4805      	ldr	r0, [pc, #20]	; (8006f30 <__i2b+0x28>)
 8006f1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f1e:	f000 fc05 	bl	800772c <__assert_func>
 8006f22:	2301      	movs	r3, #1
 8006f24:	6144      	str	r4, [r0, #20]
 8006f26:	6103      	str	r3, [r0, #16]
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08008c07 	.word	0x08008c07
 8006f30:	08008c18 	.word	0x08008c18

08006f34 <__multiply>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	4614      	mov	r4, r2
 8006f3a:	690a      	ldr	r2, [r1, #16]
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	bfb8      	it	lt
 8006f42:	460b      	movlt	r3, r1
 8006f44:	460d      	mov	r5, r1
 8006f46:	bfbc      	itt	lt
 8006f48:	4625      	movlt	r5, r4
 8006f4a:	461c      	movlt	r4, r3
 8006f4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006f50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f54:	68ab      	ldr	r3, [r5, #8]
 8006f56:	6869      	ldr	r1, [r5, #4]
 8006f58:	eb0a 0709 	add.w	r7, sl, r9
 8006f5c:	42bb      	cmp	r3, r7
 8006f5e:	b085      	sub	sp, #20
 8006f60:	bfb8      	it	lt
 8006f62:	3101      	addlt	r1, #1
 8006f64:	f7ff fed4 	bl	8006d10 <_Balloc>
 8006f68:	b930      	cbnz	r0, 8006f78 <__multiply+0x44>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b42      	ldr	r3, [pc, #264]	; (8007078 <__multiply+0x144>)
 8006f6e:	4843      	ldr	r0, [pc, #268]	; (800707c <__multiply+0x148>)
 8006f70:	f240 115d 	movw	r1, #349	; 0x15d
 8006f74:	f000 fbda 	bl	800772c <__assert_func>
 8006f78:	f100 0614 	add.w	r6, r0, #20
 8006f7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006f80:	4633      	mov	r3, r6
 8006f82:	2200      	movs	r2, #0
 8006f84:	4543      	cmp	r3, r8
 8006f86:	d31e      	bcc.n	8006fc6 <__multiply+0x92>
 8006f88:	f105 0c14 	add.w	ip, r5, #20
 8006f8c:	f104 0314 	add.w	r3, r4, #20
 8006f90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006f94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006f98:	9202      	str	r2, [sp, #8]
 8006f9a:	ebac 0205 	sub.w	r2, ip, r5
 8006f9e:	3a15      	subs	r2, #21
 8006fa0:	f022 0203 	bic.w	r2, r2, #3
 8006fa4:	3204      	adds	r2, #4
 8006fa6:	f105 0115 	add.w	r1, r5, #21
 8006faa:	458c      	cmp	ip, r1
 8006fac:	bf38      	it	cc
 8006fae:	2204      	movcc	r2, #4
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	9a02      	ldr	r2, [sp, #8]
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d808      	bhi.n	8006fcc <__multiply+0x98>
 8006fba:	2f00      	cmp	r7, #0
 8006fbc:	dc55      	bgt.n	800706a <__multiply+0x136>
 8006fbe:	6107      	str	r7, [r0, #16]
 8006fc0:	b005      	add	sp, #20
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	f843 2b04 	str.w	r2, [r3], #4
 8006fca:	e7db      	b.n	8006f84 <__multiply+0x50>
 8006fcc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fd0:	f1ba 0f00 	cmp.w	sl, #0
 8006fd4:	d020      	beq.n	8007018 <__multiply+0xe4>
 8006fd6:	f105 0e14 	add.w	lr, r5, #20
 8006fda:	46b1      	mov	r9, r6
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006fe2:	f8d9 b000 	ldr.w	fp, [r9]
 8006fe6:	b2a1      	uxth	r1, r4
 8006fe8:	fa1f fb8b 	uxth.w	fp, fp
 8006fec:	fb0a b101 	mla	r1, sl, r1, fp
 8006ff0:	4411      	add	r1, r2
 8006ff2:	f8d9 2000 	ldr.w	r2, [r9]
 8006ff6:	0c24      	lsrs	r4, r4, #16
 8006ff8:	0c12      	lsrs	r2, r2, #16
 8006ffa:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ffe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007002:	b289      	uxth	r1, r1
 8007004:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007008:	45f4      	cmp	ip, lr
 800700a:	f849 1b04 	str.w	r1, [r9], #4
 800700e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007012:	d8e4      	bhi.n	8006fde <__multiply+0xaa>
 8007014:	9901      	ldr	r1, [sp, #4]
 8007016:	5072      	str	r2, [r6, r1]
 8007018:	9a03      	ldr	r2, [sp, #12]
 800701a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800701e:	3304      	adds	r3, #4
 8007020:	f1b9 0f00 	cmp.w	r9, #0
 8007024:	d01f      	beq.n	8007066 <__multiply+0x132>
 8007026:	6834      	ldr	r4, [r6, #0]
 8007028:	f105 0114 	add.w	r1, r5, #20
 800702c:	46b6      	mov	lr, r6
 800702e:	f04f 0a00 	mov.w	sl, #0
 8007032:	880a      	ldrh	r2, [r1, #0]
 8007034:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007038:	fb09 b202 	mla	r2, r9, r2, fp
 800703c:	4492      	add	sl, r2
 800703e:	b2a4      	uxth	r4, r4
 8007040:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007044:	f84e 4b04 	str.w	r4, [lr], #4
 8007048:	f851 4b04 	ldr.w	r4, [r1], #4
 800704c:	f8be 2000 	ldrh.w	r2, [lr]
 8007050:	0c24      	lsrs	r4, r4, #16
 8007052:	fb09 2404 	mla	r4, r9, r4, r2
 8007056:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800705a:	458c      	cmp	ip, r1
 800705c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007060:	d8e7      	bhi.n	8007032 <__multiply+0xfe>
 8007062:	9a01      	ldr	r2, [sp, #4]
 8007064:	50b4      	str	r4, [r6, r2]
 8007066:	3604      	adds	r6, #4
 8007068:	e7a3      	b.n	8006fb2 <__multiply+0x7e>
 800706a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1a5      	bne.n	8006fbe <__multiply+0x8a>
 8007072:	3f01      	subs	r7, #1
 8007074:	e7a1      	b.n	8006fba <__multiply+0x86>
 8007076:	bf00      	nop
 8007078:	08008c07 	.word	0x08008c07
 800707c:	08008c18 	.word	0x08008c18

08007080 <__pow5mult>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	4615      	mov	r5, r2
 8007086:	f012 0203 	ands.w	r2, r2, #3
 800708a:	4606      	mov	r6, r0
 800708c:	460f      	mov	r7, r1
 800708e:	d007      	beq.n	80070a0 <__pow5mult+0x20>
 8007090:	4c25      	ldr	r4, [pc, #148]	; (8007128 <__pow5mult+0xa8>)
 8007092:	3a01      	subs	r2, #1
 8007094:	2300      	movs	r3, #0
 8007096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800709a:	f7ff fe9b 	bl	8006dd4 <__multadd>
 800709e:	4607      	mov	r7, r0
 80070a0:	10ad      	asrs	r5, r5, #2
 80070a2:	d03d      	beq.n	8007120 <__pow5mult+0xa0>
 80070a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070a6:	b97c      	cbnz	r4, 80070c8 <__pow5mult+0x48>
 80070a8:	2010      	movs	r0, #16
 80070aa:	f7fe fa29 	bl	8005500 <malloc>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6270      	str	r0, [r6, #36]	; 0x24
 80070b2:	b928      	cbnz	r0, 80070c0 <__pow5mult+0x40>
 80070b4:	4b1d      	ldr	r3, [pc, #116]	; (800712c <__pow5mult+0xac>)
 80070b6:	481e      	ldr	r0, [pc, #120]	; (8007130 <__pow5mult+0xb0>)
 80070b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070bc:	f000 fb36 	bl	800772c <__assert_func>
 80070c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070c4:	6004      	str	r4, [r0, #0]
 80070c6:	60c4      	str	r4, [r0, #12]
 80070c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d0:	b94c      	cbnz	r4, 80070e6 <__pow5mult+0x66>
 80070d2:	f240 2171 	movw	r1, #625	; 0x271
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff ff16 	bl	8006f08 <__i2b>
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c8 0008 	str.w	r0, [r8, #8]
 80070e2:	4604      	mov	r4, r0
 80070e4:	6003      	str	r3, [r0, #0]
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	07eb      	lsls	r3, r5, #31
 80070ec:	d50a      	bpl.n	8007104 <__pow5mult+0x84>
 80070ee:	4639      	mov	r1, r7
 80070f0:	4622      	mov	r2, r4
 80070f2:	4630      	mov	r0, r6
 80070f4:	f7ff ff1e 	bl	8006f34 <__multiply>
 80070f8:	4639      	mov	r1, r7
 80070fa:	4680      	mov	r8, r0
 80070fc:	4630      	mov	r0, r6
 80070fe:	f7ff fe47 	bl	8006d90 <_Bfree>
 8007102:	4647      	mov	r7, r8
 8007104:	106d      	asrs	r5, r5, #1
 8007106:	d00b      	beq.n	8007120 <__pow5mult+0xa0>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	b938      	cbnz	r0, 800711c <__pow5mult+0x9c>
 800710c:	4622      	mov	r2, r4
 800710e:	4621      	mov	r1, r4
 8007110:	4630      	mov	r0, r6
 8007112:	f7ff ff0f 	bl	8006f34 <__multiply>
 8007116:	6020      	str	r0, [r4, #0]
 8007118:	f8c0 9000 	str.w	r9, [r0]
 800711c:	4604      	mov	r4, r0
 800711e:	e7e4      	b.n	80070ea <__pow5mult+0x6a>
 8007120:	4638      	mov	r0, r7
 8007122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007126:	bf00      	nop
 8007128:	08008d68 	.word	0x08008d68
 800712c:	08008b91 	.word	0x08008b91
 8007130:	08008c18 	.word	0x08008c18

08007134 <__lshift>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	460c      	mov	r4, r1
 800713a:	6849      	ldr	r1, [r1, #4]
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	4607      	mov	r7, r0
 8007146:	4691      	mov	r9, r2
 8007148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800714c:	f108 0601 	add.w	r6, r8, #1
 8007150:	42b3      	cmp	r3, r6
 8007152:	db0b      	blt.n	800716c <__lshift+0x38>
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff fddb 	bl	8006d10 <_Balloc>
 800715a:	4605      	mov	r5, r0
 800715c:	b948      	cbnz	r0, 8007172 <__lshift+0x3e>
 800715e:	4602      	mov	r2, r0
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <__lshift+0xd0>)
 8007162:	4829      	ldr	r0, [pc, #164]	; (8007208 <__lshift+0xd4>)
 8007164:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007168:	f000 fae0 	bl	800772c <__assert_func>
 800716c:	3101      	adds	r1, #1
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	e7ee      	b.n	8007150 <__lshift+0x1c>
 8007172:	2300      	movs	r3, #0
 8007174:	f100 0114 	add.w	r1, r0, #20
 8007178:	f100 0210 	add.w	r2, r0, #16
 800717c:	4618      	mov	r0, r3
 800717e:	4553      	cmp	r3, sl
 8007180:	db33      	blt.n	80071ea <__lshift+0xb6>
 8007182:	6920      	ldr	r0, [r4, #16]
 8007184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007188:	f104 0314 	add.w	r3, r4, #20
 800718c:	f019 091f 	ands.w	r9, r9, #31
 8007190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007198:	d02b      	beq.n	80071f2 <__lshift+0xbe>
 800719a:	f1c9 0e20 	rsb	lr, r9, #32
 800719e:	468a      	mov	sl, r1
 80071a0:	2200      	movs	r2, #0
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	fa00 f009 	lsl.w	r0, r0, r9
 80071a8:	4302      	orrs	r2, r0
 80071aa:	f84a 2b04 	str.w	r2, [sl], #4
 80071ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b2:	459c      	cmp	ip, r3
 80071b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071b8:	d8f3      	bhi.n	80071a2 <__lshift+0x6e>
 80071ba:	ebac 0304 	sub.w	r3, ip, r4
 80071be:	3b15      	subs	r3, #21
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	3304      	adds	r3, #4
 80071c6:	f104 0015 	add.w	r0, r4, #21
 80071ca:	4584      	cmp	ip, r0
 80071cc:	bf38      	it	cc
 80071ce:	2304      	movcc	r3, #4
 80071d0:	50ca      	str	r2, [r1, r3]
 80071d2:	b10a      	cbz	r2, 80071d8 <__lshift+0xa4>
 80071d4:	f108 0602 	add.w	r6, r8, #2
 80071d8:	3e01      	subs	r6, #1
 80071da:	4638      	mov	r0, r7
 80071dc:	612e      	str	r6, [r5, #16]
 80071de:	4621      	mov	r1, r4
 80071e0:	f7ff fdd6 	bl	8006d90 <_Bfree>
 80071e4:	4628      	mov	r0, r5
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80071ee:	3301      	adds	r3, #1
 80071f0:	e7c5      	b.n	800717e <__lshift+0x4a>
 80071f2:	3904      	subs	r1, #4
 80071f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071fc:	459c      	cmp	ip, r3
 80071fe:	d8f9      	bhi.n	80071f4 <__lshift+0xc0>
 8007200:	e7ea      	b.n	80071d8 <__lshift+0xa4>
 8007202:	bf00      	nop
 8007204:	08008c07 	.word	0x08008c07
 8007208:	08008c18 	.word	0x08008c18

0800720c <__mcmp>:
 800720c:	b530      	push	{r4, r5, lr}
 800720e:	6902      	ldr	r2, [r0, #16]
 8007210:	690c      	ldr	r4, [r1, #16]
 8007212:	1b12      	subs	r2, r2, r4
 8007214:	d10e      	bne.n	8007234 <__mcmp+0x28>
 8007216:	f100 0314 	add.w	r3, r0, #20
 800721a:	3114      	adds	r1, #20
 800721c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007220:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007224:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007228:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800722c:	42a5      	cmp	r5, r4
 800722e:	d003      	beq.n	8007238 <__mcmp+0x2c>
 8007230:	d305      	bcc.n	800723e <__mcmp+0x32>
 8007232:	2201      	movs	r2, #1
 8007234:	4610      	mov	r0, r2
 8007236:	bd30      	pop	{r4, r5, pc}
 8007238:	4283      	cmp	r3, r0
 800723a:	d3f3      	bcc.n	8007224 <__mcmp+0x18>
 800723c:	e7fa      	b.n	8007234 <__mcmp+0x28>
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	e7f7      	b.n	8007234 <__mcmp+0x28>

08007244 <__mdiff>:
 8007244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	460c      	mov	r4, r1
 800724a:	4606      	mov	r6, r0
 800724c:	4611      	mov	r1, r2
 800724e:	4620      	mov	r0, r4
 8007250:	4617      	mov	r7, r2
 8007252:	f7ff ffdb 	bl	800720c <__mcmp>
 8007256:	1e05      	subs	r5, r0, #0
 8007258:	d110      	bne.n	800727c <__mdiff+0x38>
 800725a:	4629      	mov	r1, r5
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff fd57 	bl	8006d10 <_Balloc>
 8007262:	b930      	cbnz	r0, 8007272 <__mdiff+0x2e>
 8007264:	4b39      	ldr	r3, [pc, #228]	; (800734c <__mdiff+0x108>)
 8007266:	4602      	mov	r2, r0
 8007268:	f240 2132 	movw	r1, #562	; 0x232
 800726c:	4838      	ldr	r0, [pc, #224]	; (8007350 <__mdiff+0x10c>)
 800726e:	f000 fa5d 	bl	800772c <__assert_func>
 8007272:	2301      	movs	r3, #1
 8007274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	bfa4      	itt	ge
 800727e:	463b      	movge	r3, r7
 8007280:	4627      	movge	r7, r4
 8007282:	4630      	mov	r0, r6
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	bfa6      	itte	ge
 8007288:	461c      	movge	r4, r3
 800728a:	2500      	movge	r5, #0
 800728c:	2501      	movlt	r5, #1
 800728e:	f7ff fd3f 	bl	8006d10 <_Balloc>
 8007292:	b920      	cbnz	r0, 800729e <__mdiff+0x5a>
 8007294:	4b2d      	ldr	r3, [pc, #180]	; (800734c <__mdiff+0x108>)
 8007296:	4602      	mov	r2, r0
 8007298:	f44f 7110 	mov.w	r1, #576	; 0x240
 800729c:	e7e6      	b.n	800726c <__mdiff+0x28>
 800729e:	693e      	ldr	r6, [r7, #16]
 80072a0:	60c5      	str	r5, [r0, #12]
 80072a2:	6925      	ldr	r5, [r4, #16]
 80072a4:	f107 0114 	add.w	r1, r7, #20
 80072a8:	f104 0914 	add.w	r9, r4, #20
 80072ac:	f100 0e14 	add.w	lr, r0, #20
 80072b0:	f107 0210 	add.w	r2, r7, #16
 80072b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80072b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80072bc:	46f2      	mov	sl, lr
 80072be:	2700      	movs	r7, #0
 80072c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80072c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072c8:	fa1f f883 	uxth.w	r8, r3
 80072cc:	fa17 f78b 	uxtah	r7, r7, fp
 80072d0:	0c1b      	lsrs	r3, r3, #16
 80072d2:	eba7 0808 	sub.w	r8, r7, r8
 80072d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072de:	fa1f f888 	uxth.w	r8, r8
 80072e2:	141f      	asrs	r7, r3, #16
 80072e4:	454d      	cmp	r5, r9
 80072e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072ea:	f84a 3b04 	str.w	r3, [sl], #4
 80072ee:	d8e7      	bhi.n	80072c0 <__mdiff+0x7c>
 80072f0:	1b2b      	subs	r3, r5, r4
 80072f2:	3b15      	subs	r3, #21
 80072f4:	f023 0303 	bic.w	r3, r3, #3
 80072f8:	3304      	adds	r3, #4
 80072fa:	3415      	adds	r4, #21
 80072fc:	42a5      	cmp	r5, r4
 80072fe:	bf38      	it	cc
 8007300:	2304      	movcc	r3, #4
 8007302:	4419      	add	r1, r3
 8007304:	4473      	add	r3, lr
 8007306:	469e      	mov	lr, r3
 8007308:	460d      	mov	r5, r1
 800730a:	4565      	cmp	r5, ip
 800730c:	d30e      	bcc.n	800732c <__mdiff+0xe8>
 800730e:	f10c 0203 	add.w	r2, ip, #3
 8007312:	1a52      	subs	r2, r2, r1
 8007314:	f022 0203 	bic.w	r2, r2, #3
 8007318:	3903      	subs	r1, #3
 800731a:	458c      	cmp	ip, r1
 800731c:	bf38      	it	cc
 800731e:	2200      	movcc	r2, #0
 8007320:	441a      	add	r2, r3
 8007322:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007326:	b17b      	cbz	r3, 8007348 <__mdiff+0x104>
 8007328:	6106      	str	r6, [r0, #16]
 800732a:	e7a5      	b.n	8007278 <__mdiff+0x34>
 800732c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007330:	fa17 f488 	uxtah	r4, r7, r8
 8007334:	1422      	asrs	r2, r4, #16
 8007336:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800733a:	b2a4      	uxth	r4, r4
 800733c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007340:	f84e 4b04 	str.w	r4, [lr], #4
 8007344:	1417      	asrs	r7, r2, #16
 8007346:	e7e0      	b.n	800730a <__mdiff+0xc6>
 8007348:	3e01      	subs	r6, #1
 800734a:	e7ea      	b.n	8007322 <__mdiff+0xde>
 800734c:	08008c07 	.word	0x08008c07
 8007350:	08008c18 	.word	0x08008c18

08007354 <__d2b>:
 8007354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007358:	4689      	mov	r9, r1
 800735a:	2101      	movs	r1, #1
 800735c:	ec57 6b10 	vmov	r6, r7, d0
 8007360:	4690      	mov	r8, r2
 8007362:	f7ff fcd5 	bl	8006d10 <_Balloc>
 8007366:	4604      	mov	r4, r0
 8007368:	b930      	cbnz	r0, 8007378 <__d2b+0x24>
 800736a:	4602      	mov	r2, r0
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <__d2b+0xb0>)
 800736e:	4826      	ldr	r0, [pc, #152]	; (8007408 <__d2b+0xb4>)
 8007370:	f240 310a 	movw	r1, #778	; 0x30a
 8007374:	f000 f9da 	bl	800772c <__assert_func>
 8007378:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800737c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007380:	bb35      	cbnz	r5, 80073d0 <__d2b+0x7c>
 8007382:	2e00      	cmp	r6, #0
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	d028      	beq.n	80073da <__d2b+0x86>
 8007388:	4668      	mov	r0, sp
 800738a:	9600      	str	r6, [sp, #0]
 800738c:	f7ff fd8c 	bl	8006ea8 <__lo0bits>
 8007390:	9900      	ldr	r1, [sp, #0]
 8007392:	b300      	cbz	r0, 80073d6 <__d2b+0x82>
 8007394:	9a01      	ldr	r2, [sp, #4]
 8007396:	f1c0 0320 	rsb	r3, r0, #32
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	430b      	orrs	r3, r1
 80073a0:	40c2      	lsrs	r2, r0
 80073a2:	6163      	str	r3, [r4, #20]
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	61a3      	str	r3, [r4, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bf14      	ite	ne
 80073ae:	2202      	movne	r2, #2
 80073b0:	2201      	moveq	r2, #1
 80073b2:	6122      	str	r2, [r4, #16]
 80073b4:	b1d5      	cbz	r5, 80073ec <__d2b+0x98>
 80073b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073ba:	4405      	add	r5, r0
 80073bc:	f8c9 5000 	str.w	r5, [r9]
 80073c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073c4:	f8c8 0000 	str.w	r0, [r8]
 80073c8:	4620      	mov	r0, r4
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073d4:	e7d5      	b.n	8007382 <__d2b+0x2e>
 80073d6:	6161      	str	r1, [r4, #20]
 80073d8:	e7e5      	b.n	80073a6 <__d2b+0x52>
 80073da:	a801      	add	r0, sp, #4
 80073dc:	f7ff fd64 	bl	8006ea8 <__lo0bits>
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	6163      	str	r3, [r4, #20]
 80073e4:	2201      	movs	r2, #1
 80073e6:	6122      	str	r2, [r4, #16]
 80073e8:	3020      	adds	r0, #32
 80073ea:	e7e3      	b.n	80073b4 <__d2b+0x60>
 80073ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073f4:	f8c9 0000 	str.w	r0, [r9]
 80073f8:	6918      	ldr	r0, [r3, #16]
 80073fa:	f7ff fd35 	bl	8006e68 <__hi0bits>
 80073fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007402:	e7df      	b.n	80073c4 <__d2b+0x70>
 8007404:	08008c07 	.word	0x08008c07
 8007408:	08008c18 	.word	0x08008c18

0800740c <_calloc_r>:
 800740c:	b513      	push	{r0, r1, r4, lr}
 800740e:	434a      	muls	r2, r1
 8007410:	4611      	mov	r1, r2
 8007412:	9201      	str	r2, [sp, #4]
 8007414:	f7fe f8f8 	bl	8005608 <_malloc_r>
 8007418:	4604      	mov	r4, r0
 800741a:	b118      	cbz	r0, 8007424 <_calloc_r+0x18>
 800741c:	9a01      	ldr	r2, [sp, #4]
 800741e:	2100      	movs	r1, #0
 8007420:	f7fe f89a 	bl	8005558 <memset>
 8007424:	4620      	mov	r0, r4
 8007426:	b002      	add	sp, #8
 8007428:	bd10      	pop	{r4, pc}

0800742a <_realloc_r>:
 800742a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742c:	4607      	mov	r7, r0
 800742e:	4614      	mov	r4, r2
 8007430:	460e      	mov	r6, r1
 8007432:	b921      	cbnz	r1, 800743e <_realloc_r+0x14>
 8007434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007438:	4611      	mov	r1, r2
 800743a:	f7fe b8e5 	b.w	8005608 <_malloc_r>
 800743e:	b922      	cbnz	r2, 800744a <_realloc_r+0x20>
 8007440:	f7fe f892 	bl	8005568 <_free_r>
 8007444:	4625      	mov	r5, r4
 8007446:	4628      	mov	r0, r5
 8007448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744a:	f000 f9ce 	bl	80077ea <_malloc_usable_size_r>
 800744e:	42a0      	cmp	r0, r4
 8007450:	d20f      	bcs.n	8007472 <_realloc_r+0x48>
 8007452:	4621      	mov	r1, r4
 8007454:	4638      	mov	r0, r7
 8007456:	f7fe f8d7 	bl	8005608 <_malloc_r>
 800745a:	4605      	mov	r5, r0
 800745c:	2800      	cmp	r0, #0
 800745e:	d0f2      	beq.n	8007446 <_realloc_r+0x1c>
 8007460:	4631      	mov	r1, r6
 8007462:	4622      	mov	r2, r4
 8007464:	f7fe f86a 	bl	800553c <memcpy>
 8007468:	4631      	mov	r1, r6
 800746a:	4638      	mov	r0, r7
 800746c:	f7fe f87c 	bl	8005568 <_free_r>
 8007470:	e7e9      	b.n	8007446 <_realloc_r+0x1c>
 8007472:	4635      	mov	r5, r6
 8007474:	e7e7      	b.n	8007446 <_realloc_r+0x1c>

08007476 <__ssputs_r>:
 8007476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747a:	688e      	ldr	r6, [r1, #8]
 800747c:	429e      	cmp	r6, r3
 800747e:	4682      	mov	sl, r0
 8007480:	460c      	mov	r4, r1
 8007482:	4690      	mov	r8, r2
 8007484:	461f      	mov	r7, r3
 8007486:	d838      	bhi.n	80074fa <__ssputs_r+0x84>
 8007488:	898a      	ldrh	r2, [r1, #12]
 800748a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800748e:	d032      	beq.n	80074f6 <__ssputs_r+0x80>
 8007490:	6825      	ldr	r5, [r4, #0]
 8007492:	6909      	ldr	r1, [r1, #16]
 8007494:	eba5 0901 	sub.w	r9, r5, r1
 8007498:	6965      	ldr	r5, [r4, #20]
 800749a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800749e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a2:	3301      	adds	r3, #1
 80074a4:	444b      	add	r3, r9
 80074a6:	106d      	asrs	r5, r5, #1
 80074a8:	429d      	cmp	r5, r3
 80074aa:	bf38      	it	cc
 80074ac:	461d      	movcc	r5, r3
 80074ae:	0553      	lsls	r3, r2, #21
 80074b0:	d531      	bpl.n	8007516 <__ssputs_r+0xa0>
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7fe f8a8 	bl	8005608 <_malloc_r>
 80074b8:	4606      	mov	r6, r0
 80074ba:	b950      	cbnz	r0, 80074d2 <__ssputs_r+0x5c>
 80074bc:	230c      	movs	r3, #12
 80074be:	f8ca 3000 	str.w	r3, [sl]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295
 80074ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d2:	6921      	ldr	r1, [r4, #16]
 80074d4:	464a      	mov	r2, r9
 80074d6:	f7fe f831 	bl	800553c <memcpy>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	6126      	str	r6, [r4, #16]
 80074e8:	6165      	str	r5, [r4, #20]
 80074ea:	444e      	add	r6, r9
 80074ec:	eba5 0509 	sub.w	r5, r5, r9
 80074f0:	6026      	str	r6, [r4, #0]
 80074f2:	60a5      	str	r5, [r4, #8]
 80074f4:	463e      	mov	r6, r7
 80074f6:	42be      	cmp	r6, r7
 80074f8:	d900      	bls.n	80074fc <__ssputs_r+0x86>
 80074fa:	463e      	mov	r6, r7
 80074fc:	4632      	mov	r2, r6
 80074fe:	6820      	ldr	r0, [r4, #0]
 8007500:	4641      	mov	r1, r8
 8007502:	f000 f958 	bl	80077b6 <memmove>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	1b9b      	subs	r3, r3, r6
 800750c:	4432      	add	r2, r6
 800750e:	60a3      	str	r3, [r4, #8]
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	2000      	movs	r0, #0
 8007514:	e7db      	b.n	80074ce <__ssputs_r+0x58>
 8007516:	462a      	mov	r2, r5
 8007518:	f7ff ff87 	bl	800742a <_realloc_r>
 800751c:	4606      	mov	r6, r0
 800751e:	2800      	cmp	r0, #0
 8007520:	d1e1      	bne.n	80074e6 <__ssputs_r+0x70>
 8007522:	6921      	ldr	r1, [r4, #16]
 8007524:	4650      	mov	r0, sl
 8007526:	f7fe f81f 	bl	8005568 <_free_r>
 800752a:	e7c7      	b.n	80074bc <__ssputs_r+0x46>

0800752c <_svfiprintf_r>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	4698      	mov	r8, r3
 8007532:	898b      	ldrh	r3, [r1, #12]
 8007534:	061b      	lsls	r3, r3, #24
 8007536:	b09d      	sub	sp, #116	; 0x74
 8007538:	4607      	mov	r7, r0
 800753a:	460d      	mov	r5, r1
 800753c:	4614      	mov	r4, r2
 800753e:	d50e      	bpl.n	800755e <_svfiprintf_r+0x32>
 8007540:	690b      	ldr	r3, [r1, #16]
 8007542:	b963      	cbnz	r3, 800755e <_svfiprintf_r+0x32>
 8007544:	2140      	movs	r1, #64	; 0x40
 8007546:	f7fe f85f 	bl	8005608 <_malloc_r>
 800754a:	6028      	str	r0, [r5, #0]
 800754c:	6128      	str	r0, [r5, #16]
 800754e:	b920      	cbnz	r0, 800755a <_svfiprintf_r+0x2e>
 8007550:	230c      	movs	r3, #12
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e0d1      	b.n	80076fe <_svfiprintf_r+0x1d2>
 800755a:	2340      	movs	r3, #64	; 0x40
 800755c:	616b      	str	r3, [r5, #20]
 800755e:	2300      	movs	r3, #0
 8007560:	9309      	str	r3, [sp, #36]	; 0x24
 8007562:	2320      	movs	r3, #32
 8007564:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007568:	f8cd 800c 	str.w	r8, [sp, #12]
 800756c:	2330      	movs	r3, #48	; 0x30
 800756e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007718 <_svfiprintf_r+0x1ec>
 8007572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007576:	f04f 0901 	mov.w	r9, #1
 800757a:	4623      	mov	r3, r4
 800757c:	469a      	mov	sl, r3
 800757e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007582:	b10a      	cbz	r2, 8007588 <_svfiprintf_r+0x5c>
 8007584:	2a25      	cmp	r2, #37	; 0x25
 8007586:	d1f9      	bne.n	800757c <_svfiprintf_r+0x50>
 8007588:	ebba 0b04 	subs.w	fp, sl, r4
 800758c:	d00b      	beq.n	80075a6 <_svfiprintf_r+0x7a>
 800758e:	465b      	mov	r3, fp
 8007590:	4622      	mov	r2, r4
 8007592:	4629      	mov	r1, r5
 8007594:	4638      	mov	r0, r7
 8007596:	f7ff ff6e 	bl	8007476 <__ssputs_r>
 800759a:	3001      	adds	r0, #1
 800759c:	f000 80aa 	beq.w	80076f4 <_svfiprintf_r+0x1c8>
 80075a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a2:	445a      	add	r2, fp
 80075a4:	9209      	str	r2, [sp, #36]	; 0x24
 80075a6:	f89a 3000 	ldrb.w	r3, [sl]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 80a2 	beq.w	80076f4 <_svfiprintf_r+0x1c8>
 80075b0:	2300      	movs	r3, #0
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ba:	f10a 0a01 	add.w	sl, sl, #1
 80075be:	9304      	str	r3, [sp, #16]
 80075c0:	9307      	str	r3, [sp, #28]
 80075c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075c6:	931a      	str	r3, [sp, #104]	; 0x68
 80075c8:	4654      	mov	r4, sl
 80075ca:	2205      	movs	r2, #5
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	4851      	ldr	r0, [pc, #324]	; (8007718 <_svfiprintf_r+0x1ec>)
 80075d2:	f7f8 fe0d 	bl	80001f0 <memchr>
 80075d6:	9a04      	ldr	r2, [sp, #16]
 80075d8:	b9d8      	cbnz	r0, 8007612 <_svfiprintf_r+0xe6>
 80075da:	06d0      	lsls	r0, r2, #27
 80075dc:	bf44      	itt	mi
 80075de:	2320      	movmi	r3, #32
 80075e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e4:	0711      	lsls	r1, r2, #28
 80075e6:	bf44      	itt	mi
 80075e8:	232b      	movmi	r3, #43	; 0x2b
 80075ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ee:	f89a 3000 	ldrb.w	r3, [sl]
 80075f2:	2b2a      	cmp	r3, #42	; 0x2a
 80075f4:	d015      	beq.n	8007622 <_svfiprintf_r+0xf6>
 80075f6:	9a07      	ldr	r2, [sp, #28]
 80075f8:	4654      	mov	r4, sl
 80075fa:	2000      	movs	r0, #0
 80075fc:	f04f 0c0a 	mov.w	ip, #10
 8007600:	4621      	mov	r1, r4
 8007602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007606:	3b30      	subs	r3, #48	; 0x30
 8007608:	2b09      	cmp	r3, #9
 800760a:	d94e      	bls.n	80076aa <_svfiprintf_r+0x17e>
 800760c:	b1b0      	cbz	r0, 800763c <_svfiprintf_r+0x110>
 800760e:	9207      	str	r2, [sp, #28]
 8007610:	e014      	b.n	800763c <_svfiprintf_r+0x110>
 8007612:	eba0 0308 	sub.w	r3, r0, r8
 8007616:	fa09 f303 	lsl.w	r3, r9, r3
 800761a:	4313      	orrs	r3, r2
 800761c:	9304      	str	r3, [sp, #16]
 800761e:	46a2      	mov	sl, r4
 8007620:	e7d2      	b.n	80075c8 <_svfiprintf_r+0x9c>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	1d19      	adds	r1, r3, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	9103      	str	r1, [sp, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	bfbb      	ittet	lt
 800762e:	425b      	neglt	r3, r3
 8007630:	f042 0202 	orrlt.w	r2, r2, #2
 8007634:	9307      	strge	r3, [sp, #28]
 8007636:	9307      	strlt	r3, [sp, #28]
 8007638:	bfb8      	it	lt
 800763a:	9204      	strlt	r2, [sp, #16]
 800763c:	7823      	ldrb	r3, [r4, #0]
 800763e:	2b2e      	cmp	r3, #46	; 0x2e
 8007640:	d10c      	bne.n	800765c <_svfiprintf_r+0x130>
 8007642:	7863      	ldrb	r3, [r4, #1]
 8007644:	2b2a      	cmp	r3, #42	; 0x2a
 8007646:	d135      	bne.n	80076b4 <_svfiprintf_r+0x188>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	1d1a      	adds	r2, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	9203      	str	r2, [sp, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfb8      	it	lt
 8007654:	f04f 33ff 	movlt.w	r3, #4294967295
 8007658:	3402      	adds	r4, #2
 800765a:	9305      	str	r3, [sp, #20]
 800765c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007728 <_svfiprintf_r+0x1fc>
 8007660:	7821      	ldrb	r1, [r4, #0]
 8007662:	2203      	movs	r2, #3
 8007664:	4650      	mov	r0, sl
 8007666:	f7f8 fdc3 	bl	80001f0 <memchr>
 800766a:	b140      	cbz	r0, 800767e <_svfiprintf_r+0x152>
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	eba0 000a 	sub.w	r0, r0, sl
 8007672:	fa03 f000 	lsl.w	r0, r3, r0
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	4303      	orrs	r3, r0
 800767a:	3401      	adds	r4, #1
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007682:	4826      	ldr	r0, [pc, #152]	; (800771c <_svfiprintf_r+0x1f0>)
 8007684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007688:	2206      	movs	r2, #6
 800768a:	f7f8 fdb1 	bl	80001f0 <memchr>
 800768e:	2800      	cmp	r0, #0
 8007690:	d038      	beq.n	8007704 <_svfiprintf_r+0x1d8>
 8007692:	4b23      	ldr	r3, [pc, #140]	; (8007720 <_svfiprintf_r+0x1f4>)
 8007694:	bb1b      	cbnz	r3, 80076de <_svfiprintf_r+0x1b2>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	3307      	adds	r3, #7
 800769a:	f023 0307 	bic.w	r3, r3, #7
 800769e:	3308      	adds	r3, #8
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	4433      	add	r3, r6
 80076a6:	9309      	str	r3, [sp, #36]	; 0x24
 80076a8:	e767      	b.n	800757a <_svfiprintf_r+0x4e>
 80076aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ae:	460c      	mov	r4, r1
 80076b0:	2001      	movs	r0, #1
 80076b2:	e7a5      	b.n	8007600 <_svfiprintf_r+0xd4>
 80076b4:	2300      	movs	r3, #0
 80076b6:	3401      	adds	r4, #1
 80076b8:	9305      	str	r3, [sp, #20]
 80076ba:	4619      	mov	r1, r3
 80076bc:	f04f 0c0a 	mov.w	ip, #10
 80076c0:	4620      	mov	r0, r4
 80076c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c6:	3a30      	subs	r2, #48	; 0x30
 80076c8:	2a09      	cmp	r2, #9
 80076ca:	d903      	bls.n	80076d4 <_svfiprintf_r+0x1a8>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0c5      	beq.n	800765c <_svfiprintf_r+0x130>
 80076d0:	9105      	str	r1, [sp, #20]
 80076d2:	e7c3      	b.n	800765c <_svfiprintf_r+0x130>
 80076d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d8:	4604      	mov	r4, r0
 80076da:	2301      	movs	r3, #1
 80076dc:	e7f0      	b.n	80076c0 <_svfiprintf_r+0x194>
 80076de:	ab03      	add	r3, sp, #12
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	462a      	mov	r2, r5
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <_svfiprintf_r+0x1f8>)
 80076e6:	a904      	add	r1, sp, #16
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7fe f887 	bl	80057fc <_printf_float>
 80076ee:	1c42      	adds	r2, r0, #1
 80076f0:	4606      	mov	r6, r0
 80076f2:	d1d6      	bne.n	80076a2 <_svfiprintf_r+0x176>
 80076f4:	89ab      	ldrh	r3, [r5, #12]
 80076f6:	065b      	lsls	r3, r3, #25
 80076f8:	f53f af2c 	bmi.w	8007554 <_svfiprintf_r+0x28>
 80076fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076fe:	b01d      	add	sp, #116	; 0x74
 8007700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	ab03      	add	r3, sp, #12
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	462a      	mov	r2, r5
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <_svfiprintf_r+0x1f8>)
 800770c:	a904      	add	r1, sp, #16
 800770e:	4638      	mov	r0, r7
 8007710:	f7fe fb18 	bl	8005d44 <_printf_i>
 8007714:	e7eb      	b.n	80076ee <_svfiprintf_r+0x1c2>
 8007716:	bf00      	nop
 8007718:	08008d74 	.word	0x08008d74
 800771c:	08008d7e 	.word	0x08008d7e
 8007720:	080057fd 	.word	0x080057fd
 8007724:	08007477 	.word	0x08007477
 8007728:	08008d7a 	.word	0x08008d7a

0800772c <__assert_func>:
 800772c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800772e:	4614      	mov	r4, r2
 8007730:	461a      	mov	r2, r3
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <__assert_func+0x2c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4605      	mov	r5, r0
 8007738:	68d8      	ldr	r0, [r3, #12]
 800773a:	b14c      	cbz	r4, 8007750 <__assert_func+0x24>
 800773c:	4b07      	ldr	r3, [pc, #28]	; (800775c <__assert_func+0x30>)
 800773e:	9100      	str	r1, [sp, #0]
 8007740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007744:	4906      	ldr	r1, [pc, #24]	; (8007760 <__assert_func+0x34>)
 8007746:	462b      	mov	r3, r5
 8007748:	f000 f80e 	bl	8007768 <fiprintf>
 800774c:	f000 fa7c 	bl	8007c48 <abort>
 8007750:	4b04      	ldr	r3, [pc, #16]	; (8007764 <__assert_func+0x38>)
 8007752:	461c      	mov	r4, r3
 8007754:	e7f3      	b.n	800773e <__assert_func+0x12>
 8007756:	bf00      	nop
 8007758:	20000010 	.word	0x20000010
 800775c:	08008d85 	.word	0x08008d85
 8007760:	08008d92 	.word	0x08008d92
 8007764:	08008dc0 	.word	0x08008dc0

08007768 <fiprintf>:
 8007768:	b40e      	push	{r1, r2, r3}
 800776a:	b503      	push	{r0, r1, lr}
 800776c:	4601      	mov	r1, r0
 800776e:	ab03      	add	r3, sp, #12
 8007770:	4805      	ldr	r0, [pc, #20]	; (8007788 <fiprintf+0x20>)
 8007772:	f853 2b04 	ldr.w	r2, [r3], #4
 8007776:	6800      	ldr	r0, [r0, #0]
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	f000 f867 	bl	800784c <_vfiprintf_r>
 800777e:	b002      	add	sp, #8
 8007780:	f85d eb04 	ldr.w	lr, [sp], #4
 8007784:	b003      	add	sp, #12
 8007786:	4770      	bx	lr
 8007788:	20000010 	.word	0x20000010

0800778c <__retarget_lock_init_recursive>:
 800778c:	4770      	bx	lr

0800778e <__retarget_lock_acquire_recursive>:
 800778e:	4770      	bx	lr

08007790 <__retarget_lock_release_recursive>:
 8007790:	4770      	bx	lr

08007792 <__ascii_mbtowc>:
 8007792:	b082      	sub	sp, #8
 8007794:	b901      	cbnz	r1, 8007798 <__ascii_mbtowc+0x6>
 8007796:	a901      	add	r1, sp, #4
 8007798:	b142      	cbz	r2, 80077ac <__ascii_mbtowc+0x1a>
 800779a:	b14b      	cbz	r3, 80077b0 <__ascii_mbtowc+0x1e>
 800779c:	7813      	ldrb	r3, [r2, #0]
 800779e:	600b      	str	r3, [r1, #0]
 80077a0:	7812      	ldrb	r2, [r2, #0]
 80077a2:	1e10      	subs	r0, r2, #0
 80077a4:	bf18      	it	ne
 80077a6:	2001      	movne	r0, #1
 80077a8:	b002      	add	sp, #8
 80077aa:	4770      	bx	lr
 80077ac:	4610      	mov	r0, r2
 80077ae:	e7fb      	b.n	80077a8 <__ascii_mbtowc+0x16>
 80077b0:	f06f 0001 	mvn.w	r0, #1
 80077b4:	e7f8      	b.n	80077a8 <__ascii_mbtowc+0x16>

080077b6 <memmove>:
 80077b6:	4288      	cmp	r0, r1
 80077b8:	b510      	push	{r4, lr}
 80077ba:	eb01 0402 	add.w	r4, r1, r2
 80077be:	d902      	bls.n	80077c6 <memmove+0x10>
 80077c0:	4284      	cmp	r4, r0
 80077c2:	4623      	mov	r3, r4
 80077c4:	d807      	bhi.n	80077d6 <memmove+0x20>
 80077c6:	1e43      	subs	r3, r0, #1
 80077c8:	42a1      	cmp	r1, r4
 80077ca:	d008      	beq.n	80077de <memmove+0x28>
 80077cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077d4:	e7f8      	b.n	80077c8 <memmove+0x12>
 80077d6:	4402      	add	r2, r0
 80077d8:	4601      	mov	r1, r0
 80077da:	428a      	cmp	r2, r1
 80077dc:	d100      	bne.n	80077e0 <memmove+0x2a>
 80077de:	bd10      	pop	{r4, pc}
 80077e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077e8:	e7f7      	b.n	80077da <memmove+0x24>

080077ea <_malloc_usable_size_r>:
 80077ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ee:	1f18      	subs	r0, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bfbc      	itt	lt
 80077f4:	580b      	ldrlt	r3, [r1, r0]
 80077f6:	18c0      	addlt	r0, r0, r3
 80077f8:	4770      	bx	lr

080077fa <__sfputc_r>:
 80077fa:	6893      	ldr	r3, [r2, #8]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	b410      	push	{r4}
 8007802:	6093      	str	r3, [r2, #8]
 8007804:	da08      	bge.n	8007818 <__sfputc_r+0x1e>
 8007806:	6994      	ldr	r4, [r2, #24]
 8007808:	42a3      	cmp	r3, r4
 800780a:	db01      	blt.n	8007810 <__sfputc_r+0x16>
 800780c:	290a      	cmp	r1, #10
 800780e:	d103      	bne.n	8007818 <__sfputc_r+0x1e>
 8007810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007814:	f000 b94a 	b.w	8007aac <__swbuf_r>
 8007818:	6813      	ldr	r3, [r2, #0]
 800781a:	1c58      	adds	r0, r3, #1
 800781c:	6010      	str	r0, [r2, #0]
 800781e:	7019      	strb	r1, [r3, #0]
 8007820:	4608      	mov	r0, r1
 8007822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007826:	4770      	bx	lr

08007828 <__sfputs_r>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	4614      	mov	r4, r2
 8007830:	18d5      	adds	r5, r2, r3
 8007832:	42ac      	cmp	r4, r5
 8007834:	d101      	bne.n	800783a <__sfputs_r+0x12>
 8007836:	2000      	movs	r0, #0
 8007838:	e007      	b.n	800784a <__sfputs_r+0x22>
 800783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783e:	463a      	mov	r2, r7
 8007840:	4630      	mov	r0, r6
 8007842:	f7ff ffda 	bl	80077fa <__sfputc_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d1f3      	bne.n	8007832 <__sfputs_r+0xa>
 800784a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800784c <_vfiprintf_r>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	460d      	mov	r5, r1
 8007852:	b09d      	sub	sp, #116	; 0x74
 8007854:	4614      	mov	r4, r2
 8007856:	4698      	mov	r8, r3
 8007858:	4606      	mov	r6, r0
 800785a:	b118      	cbz	r0, 8007864 <_vfiprintf_r+0x18>
 800785c:	6983      	ldr	r3, [r0, #24]
 800785e:	b90b      	cbnz	r3, 8007864 <_vfiprintf_r+0x18>
 8007860:	f000 fb14 	bl	8007e8c <__sinit>
 8007864:	4b89      	ldr	r3, [pc, #548]	; (8007a8c <_vfiprintf_r+0x240>)
 8007866:	429d      	cmp	r5, r3
 8007868:	d11b      	bne.n	80078a2 <_vfiprintf_r+0x56>
 800786a:	6875      	ldr	r5, [r6, #4]
 800786c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800786e:	07d9      	lsls	r1, r3, #31
 8007870:	d405      	bmi.n	800787e <_vfiprintf_r+0x32>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	059a      	lsls	r2, r3, #22
 8007876:	d402      	bmi.n	800787e <_vfiprintf_r+0x32>
 8007878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787a:	f7ff ff88 	bl	800778e <__retarget_lock_acquire_recursive>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	071b      	lsls	r3, r3, #28
 8007882:	d501      	bpl.n	8007888 <_vfiprintf_r+0x3c>
 8007884:	692b      	ldr	r3, [r5, #16]
 8007886:	b9eb      	cbnz	r3, 80078c4 <_vfiprintf_r+0x78>
 8007888:	4629      	mov	r1, r5
 800788a:	4630      	mov	r0, r6
 800788c:	f000 f96e 	bl	8007b6c <__swsetup_r>
 8007890:	b1c0      	cbz	r0, 80078c4 <_vfiprintf_r+0x78>
 8007892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007894:	07dc      	lsls	r4, r3, #31
 8007896:	d50e      	bpl.n	80078b6 <_vfiprintf_r+0x6a>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	b01d      	add	sp, #116	; 0x74
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <_vfiprintf_r+0x244>)
 80078a4:	429d      	cmp	r5, r3
 80078a6:	d101      	bne.n	80078ac <_vfiprintf_r+0x60>
 80078a8:	68b5      	ldr	r5, [r6, #8]
 80078aa:	e7df      	b.n	800786c <_vfiprintf_r+0x20>
 80078ac:	4b79      	ldr	r3, [pc, #484]	; (8007a94 <_vfiprintf_r+0x248>)
 80078ae:	429d      	cmp	r5, r3
 80078b0:	bf08      	it	eq
 80078b2:	68f5      	ldreq	r5, [r6, #12]
 80078b4:	e7da      	b.n	800786c <_vfiprintf_r+0x20>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	0598      	lsls	r0, r3, #22
 80078ba:	d4ed      	bmi.n	8007898 <_vfiprintf_r+0x4c>
 80078bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078be:	f7ff ff67 	bl	8007790 <__retarget_lock_release_recursive>
 80078c2:	e7e9      	b.n	8007898 <_vfiprintf_r+0x4c>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9309      	str	r3, [sp, #36]	; 0x24
 80078c8:	2320      	movs	r3, #32
 80078ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d2:	2330      	movs	r3, #48	; 0x30
 80078d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a98 <_vfiprintf_r+0x24c>
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078dc:	f04f 0901 	mov.w	r9, #1
 80078e0:	4623      	mov	r3, r4
 80078e2:	469a      	mov	sl, r3
 80078e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e8:	b10a      	cbz	r2, 80078ee <_vfiprintf_r+0xa2>
 80078ea:	2a25      	cmp	r2, #37	; 0x25
 80078ec:	d1f9      	bne.n	80078e2 <_vfiprintf_r+0x96>
 80078ee:	ebba 0b04 	subs.w	fp, sl, r4
 80078f2:	d00b      	beq.n	800790c <_vfiprintf_r+0xc0>
 80078f4:	465b      	mov	r3, fp
 80078f6:	4622      	mov	r2, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ff94 	bl	8007828 <__sfputs_r>
 8007900:	3001      	adds	r0, #1
 8007902:	f000 80aa 	beq.w	8007a5a <_vfiprintf_r+0x20e>
 8007906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007908:	445a      	add	r2, fp
 800790a:	9209      	str	r2, [sp, #36]	; 0x24
 800790c:	f89a 3000 	ldrb.w	r3, [sl]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80a2 	beq.w	8007a5a <_vfiprintf_r+0x20e>
 8007916:	2300      	movs	r3, #0
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800792c:	931a      	str	r3, [sp, #104]	; 0x68
 800792e:	4654      	mov	r4, sl
 8007930:	2205      	movs	r2, #5
 8007932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007936:	4858      	ldr	r0, [pc, #352]	; (8007a98 <_vfiprintf_r+0x24c>)
 8007938:	f7f8 fc5a 	bl	80001f0 <memchr>
 800793c:	9a04      	ldr	r2, [sp, #16]
 800793e:	b9d8      	cbnz	r0, 8007978 <_vfiprintf_r+0x12c>
 8007940:	06d1      	lsls	r1, r2, #27
 8007942:	bf44      	itt	mi
 8007944:	2320      	movmi	r3, #32
 8007946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794a:	0713      	lsls	r3, r2, #28
 800794c:	bf44      	itt	mi
 800794e:	232b      	movmi	r3, #43	; 0x2b
 8007950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007954:	f89a 3000 	ldrb.w	r3, [sl]
 8007958:	2b2a      	cmp	r3, #42	; 0x2a
 800795a:	d015      	beq.n	8007988 <_vfiprintf_r+0x13c>
 800795c:	9a07      	ldr	r2, [sp, #28]
 800795e:	4654      	mov	r4, sl
 8007960:	2000      	movs	r0, #0
 8007962:	f04f 0c0a 	mov.w	ip, #10
 8007966:	4621      	mov	r1, r4
 8007968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796c:	3b30      	subs	r3, #48	; 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d94e      	bls.n	8007a10 <_vfiprintf_r+0x1c4>
 8007972:	b1b0      	cbz	r0, 80079a2 <_vfiprintf_r+0x156>
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	e014      	b.n	80079a2 <_vfiprintf_r+0x156>
 8007978:	eba0 0308 	sub.w	r3, r0, r8
 800797c:	fa09 f303 	lsl.w	r3, r9, r3
 8007980:	4313      	orrs	r3, r2
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	46a2      	mov	sl, r4
 8007986:	e7d2      	b.n	800792e <_vfiprintf_r+0xe2>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d19      	adds	r1, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfbb      	ittet	lt
 8007994:	425b      	neglt	r3, r3
 8007996:	f042 0202 	orrlt.w	r2, r2, #2
 800799a:	9307      	strge	r3, [sp, #28]
 800799c:	9307      	strlt	r3, [sp, #28]
 800799e:	bfb8      	it	lt
 80079a0:	9204      	strlt	r2, [sp, #16]
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	2b2e      	cmp	r3, #46	; 0x2e
 80079a6:	d10c      	bne.n	80079c2 <_vfiprintf_r+0x176>
 80079a8:	7863      	ldrb	r3, [r4, #1]
 80079aa:	2b2a      	cmp	r3, #42	; 0x2a
 80079ac:	d135      	bne.n	8007a1a <_vfiprintf_r+0x1ce>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bfb8      	it	lt
 80079ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80079be:	3402      	adds	r4, #2
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007aa8 <_vfiprintf_r+0x25c>
 80079c6:	7821      	ldrb	r1, [r4, #0]
 80079c8:	2203      	movs	r2, #3
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fc10 	bl	80001f0 <memchr>
 80079d0:	b140      	cbz	r0, 80079e4 <_vfiprintf_r+0x198>
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	eba0 000a 	sub.w	r0, r0, sl
 80079d8:	fa03 f000 	lsl.w	r0, r3, r0
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	4303      	orrs	r3, r0
 80079e0:	3401      	adds	r4, #1
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e8:	482c      	ldr	r0, [pc, #176]	; (8007a9c <_vfiprintf_r+0x250>)
 80079ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ee:	2206      	movs	r2, #6
 80079f0:	f7f8 fbfe 	bl	80001f0 <memchr>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d03f      	beq.n	8007a78 <_vfiprintf_r+0x22c>
 80079f8:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <_vfiprintf_r+0x254>)
 80079fa:	bb1b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x1f8>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	3308      	adds	r3, #8
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	443b      	add	r3, r7
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	e767      	b.n	80078e0 <_vfiprintf_r+0x94>
 8007a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a14:	460c      	mov	r4, r1
 8007a16:	2001      	movs	r0, #1
 8007a18:	e7a5      	b.n	8007966 <_vfiprintf_r+0x11a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	3401      	adds	r4, #1
 8007a1e:	9305      	str	r3, [sp, #20]
 8007a20:	4619      	mov	r1, r3
 8007a22:	f04f 0c0a 	mov.w	ip, #10
 8007a26:	4620      	mov	r0, r4
 8007a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2c:	3a30      	subs	r2, #48	; 0x30
 8007a2e:	2a09      	cmp	r2, #9
 8007a30:	d903      	bls.n	8007a3a <_vfiprintf_r+0x1ee>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c5      	beq.n	80079c2 <_vfiprintf_r+0x176>
 8007a36:	9105      	str	r1, [sp, #20]
 8007a38:	e7c3      	b.n	80079c2 <_vfiprintf_r+0x176>
 8007a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a3e:	4604      	mov	r4, r0
 8007a40:	2301      	movs	r3, #1
 8007a42:	e7f0      	b.n	8007a26 <_vfiprintf_r+0x1da>
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <_vfiprintf_r+0x258>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f7fd fed4 	bl	80057fc <_printf_float>
 8007a54:	4607      	mov	r7, r0
 8007a56:	1c78      	adds	r0, r7, #1
 8007a58:	d1d6      	bne.n	8007a08 <_vfiprintf_r+0x1bc>
 8007a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5c:	07d9      	lsls	r1, r3, #31
 8007a5e:	d405      	bmi.n	8007a6c <_vfiprintf_r+0x220>
 8007a60:	89ab      	ldrh	r3, [r5, #12]
 8007a62:	059a      	lsls	r2, r3, #22
 8007a64:	d402      	bmi.n	8007a6c <_vfiprintf_r+0x220>
 8007a66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a68:	f7ff fe92 	bl	8007790 <__retarget_lock_release_recursive>
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	065b      	lsls	r3, r3, #25
 8007a70:	f53f af12 	bmi.w	8007898 <_vfiprintf_r+0x4c>
 8007a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a76:	e711      	b.n	800789c <_vfiprintf_r+0x50>
 8007a78:	ab03      	add	r3, sp, #12
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	462a      	mov	r2, r5
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <_vfiprintf_r+0x258>)
 8007a80:	a904      	add	r1, sp, #16
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7fe f95e 	bl	8005d44 <_printf_i>
 8007a88:	e7e4      	b.n	8007a54 <_vfiprintf_r+0x208>
 8007a8a:	bf00      	nop
 8007a8c:	08008eec 	.word	0x08008eec
 8007a90:	08008f0c 	.word	0x08008f0c
 8007a94:	08008ecc 	.word	0x08008ecc
 8007a98:	08008d74 	.word	0x08008d74
 8007a9c:	08008d7e 	.word	0x08008d7e
 8007aa0:	080057fd 	.word	0x080057fd
 8007aa4:	08007829 	.word	0x08007829
 8007aa8:	08008d7a 	.word	0x08008d7a

08007aac <__swbuf_r>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	b118      	cbz	r0, 8007abe <__swbuf_r+0x12>
 8007ab6:	6983      	ldr	r3, [r0, #24]
 8007ab8:	b90b      	cbnz	r3, 8007abe <__swbuf_r+0x12>
 8007aba:	f000 f9e7 	bl	8007e8c <__sinit>
 8007abe:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <__swbuf_r+0x98>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d12b      	bne.n	8007b1c <__swbuf_r+0x70>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	071a      	lsls	r2, r3, #28
 8007ace:	d52f      	bpl.n	8007b30 <__swbuf_r+0x84>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b36b      	cbz	r3, 8007b30 <__swbuf_r+0x84>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	6820      	ldr	r0, [r4, #0]
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	b2f6      	uxtb	r6, r6
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	4637      	mov	r7, r6
 8007ae2:	dc04      	bgt.n	8007aee <__swbuf_r+0x42>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 f93c 	bl	8007d64 <_fflush_r>
 8007aec:	bb30      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	701e      	strb	r6, [r3, #0]
 8007afc:	6963      	ldr	r3, [r4, #20]
 8007afe:	3001      	adds	r0, #1
 8007b00:	4283      	cmp	r3, r0
 8007b02:	d004      	beq.n	8007b0e <__swbuf_r+0x62>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d506      	bpl.n	8007b18 <__swbuf_r+0x6c>
 8007b0a:	2e0a      	cmp	r6, #10
 8007b0c:	d104      	bne.n	8007b18 <__swbuf_r+0x6c>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f927 	bl	8007d64 <_fflush_r>
 8007b16:	b988      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <__swbuf_r+0x9c>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d101      	bne.n	8007b26 <__swbuf_r+0x7a>
 8007b22:	68ac      	ldr	r4, [r5, #8]
 8007b24:	e7cf      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <__swbuf_r+0xa0>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	bf08      	it	eq
 8007b2c:	68ec      	ldreq	r4, [r5, #12]
 8007b2e:	e7ca      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f81a 	bl	8007b6c <__swsetup_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d0cb      	beq.n	8007ad4 <__swbuf_r+0x28>
 8007b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b40:	e7ea      	b.n	8007b18 <__swbuf_r+0x6c>
 8007b42:	bf00      	nop
 8007b44:	08008eec 	.word	0x08008eec
 8007b48:	08008f0c 	.word	0x08008f0c
 8007b4c:	08008ecc 	.word	0x08008ecc

08007b50 <__ascii_wctomb>:
 8007b50:	b149      	cbz	r1, 8007b66 <__ascii_wctomb+0x16>
 8007b52:	2aff      	cmp	r2, #255	; 0xff
 8007b54:	bf85      	ittet	hi
 8007b56:	238a      	movhi	r3, #138	; 0x8a
 8007b58:	6003      	strhi	r3, [r0, #0]
 8007b5a:	700a      	strbls	r2, [r1, #0]
 8007b5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b60:	bf98      	it	ls
 8007b62:	2001      	movls	r0, #1
 8007b64:	4770      	bx	lr
 8007b66:	4608      	mov	r0, r1
 8007b68:	4770      	bx	lr
	...

08007b6c <__swsetup_r>:
 8007b6c:	4b32      	ldr	r3, [pc, #200]	; (8007c38 <__swsetup_r+0xcc>)
 8007b6e:	b570      	push	{r4, r5, r6, lr}
 8007b70:	681d      	ldr	r5, [r3, #0]
 8007b72:	4606      	mov	r6, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	b125      	cbz	r5, 8007b82 <__swsetup_r+0x16>
 8007b78:	69ab      	ldr	r3, [r5, #24]
 8007b7a:	b913      	cbnz	r3, 8007b82 <__swsetup_r+0x16>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f985 	bl	8007e8c <__sinit>
 8007b82:	4b2e      	ldr	r3, [pc, #184]	; (8007c3c <__swsetup_r+0xd0>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d10f      	bne.n	8007ba8 <__swsetup_r+0x3c>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b90:	0719      	lsls	r1, r3, #28
 8007b92:	d42c      	bmi.n	8007bee <__swsetup_r+0x82>
 8007b94:	06dd      	lsls	r5, r3, #27
 8007b96:	d411      	bmi.n	8007bbc <__swsetup_r+0x50>
 8007b98:	2309      	movs	r3, #9
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba6:	e03e      	b.n	8007c26 <__swsetup_r+0xba>
 8007ba8:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <__swsetup_r+0xd4>)
 8007baa:	429c      	cmp	r4, r3
 8007bac:	d101      	bne.n	8007bb2 <__swsetup_r+0x46>
 8007bae:	68ac      	ldr	r4, [r5, #8]
 8007bb0:	e7eb      	b.n	8007b8a <__swsetup_r+0x1e>
 8007bb2:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <__swsetup_r+0xd8>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	bf08      	it	eq
 8007bb8:	68ec      	ldreq	r4, [r5, #12]
 8007bba:	e7e6      	b.n	8007b8a <__swsetup_r+0x1e>
 8007bbc:	0758      	lsls	r0, r3, #29
 8007bbe:	d512      	bpl.n	8007be6 <__swsetup_r+0x7a>
 8007bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc2:	b141      	cbz	r1, 8007bd6 <__swsetup_r+0x6a>
 8007bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	d002      	beq.n	8007bd2 <__swsetup_r+0x66>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7fd fccb 	bl	8005568 <_free_r>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	2300      	movs	r3, #0
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0308 	orr.w	r3, r3, #8
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	b94b      	cbnz	r3, 8007c06 <__swsetup_r+0x9a>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bfc:	d003      	beq.n	8007c06 <__swsetup_r+0x9a>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 fa05 	bl	8008010 <__smakebuf_r>
 8007c06:	89a0      	ldrh	r0, [r4, #12]
 8007c08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c0c:	f010 0301 	ands.w	r3, r0, #1
 8007c10:	d00a      	beq.n	8007c28 <__swsetup_r+0xbc>
 8007c12:	2300      	movs	r3, #0
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	425b      	negs	r3, r3
 8007c1a:	61a3      	str	r3, [r4, #24]
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	b943      	cbnz	r3, 8007c32 <__swsetup_r+0xc6>
 8007c20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c24:	d1ba      	bne.n	8007b9c <__swsetup_r+0x30>
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	0781      	lsls	r1, r0, #30
 8007c2a:	bf58      	it	pl
 8007c2c:	6963      	ldrpl	r3, [r4, #20]
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	e7f4      	b.n	8007c1c <__swsetup_r+0xb0>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e7f7      	b.n	8007c26 <__swsetup_r+0xba>
 8007c36:	bf00      	nop
 8007c38:	20000010 	.word	0x20000010
 8007c3c:	08008eec 	.word	0x08008eec
 8007c40:	08008f0c 	.word	0x08008f0c
 8007c44:	08008ecc 	.word	0x08008ecc

08007c48 <abort>:
 8007c48:	b508      	push	{r3, lr}
 8007c4a:	2006      	movs	r0, #6
 8007c4c:	f000 fa48 	bl	80080e0 <raise>
 8007c50:	2001      	movs	r0, #1
 8007c52:	f7fa ff92 	bl	8002b7a <_exit>
	...

08007c58 <__sflush_r>:
 8007c58:	898a      	ldrh	r2, [r1, #12]
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	0710      	lsls	r0, r2, #28
 8007c62:	460c      	mov	r4, r1
 8007c64:	d458      	bmi.n	8007d18 <__sflush_r+0xc0>
 8007c66:	684b      	ldr	r3, [r1, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc05      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d0f9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	d032      	beq.n	8007cf0 <__sflush_r+0x98>
 8007c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	075a      	lsls	r2, r3, #29
 8007c90:	d505      	bpl.n	8007c9e <__sflush_r+0x46>
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	1ac0      	subs	r0, r0, r3
 8007c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c98:	b10b      	cbz	r3, 8007c9e <__sflush_r+0x46>
 8007c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b0      	blx	r6
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	d106      	bne.n	8007cbe <__sflush_r+0x66>
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	291d      	cmp	r1, #29
 8007cb4:	d82c      	bhi.n	8007d10 <__sflush_r+0xb8>
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	; (8007d60 <__sflush_r+0x108>)
 8007cb8:	40ca      	lsrs	r2, r1
 8007cba:	07d6      	lsls	r6, r2, #31
 8007cbc:	d528      	bpl.n	8007d10 <__sflush_r+0xb8>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6062      	str	r2, [r4, #4]
 8007cc2:	04d9      	lsls	r1, r3, #19
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	d504      	bpl.n	8007cd4 <__sflush_r+0x7c>
 8007cca:	1c42      	adds	r2, r0, #1
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0x7a>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b903      	cbnz	r3, 8007cd4 <__sflush_r+0x7c>
 8007cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	d0ca      	beq.n	8007c72 <__sflush_r+0x1a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__sflush_r+0x92>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7fd fc3f 	bl	8005568 <_free_r>
 8007cea:	2000      	movs	r0, #0
 8007cec:	6360      	str	r0, [r4, #52]	; 0x34
 8007cee:	e7c1      	b.n	8007c74 <__sflush_r+0x1c>
 8007cf0:	6a21      	ldr	r1, [r4, #32]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	1c41      	adds	r1, r0, #1
 8007cfa:	d1c7      	bne.n	8007c8c <__sflush_r+0x34>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c4      	beq.n	8007c8c <__sflush_r+0x34>
 8007d02:	2b1d      	cmp	r3, #29
 8007d04:	d001      	beq.n	8007d0a <__sflush_r+0xb2>
 8007d06:	2b16      	cmp	r3, #22
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0xb6>
 8007d0a:	602f      	str	r7, [r5, #0]
 8007d0c:	e7b1      	b.n	8007c72 <__sflush_r+0x1a>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	e7ad      	b.n	8007c74 <__sflush_r+0x1c>
 8007d18:	690f      	ldr	r7, [r1, #16]
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	d0a9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007d1e:	0793      	lsls	r3, r2, #30
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	bf08      	it	eq
 8007d24:	694b      	ldreq	r3, [r1, #20]
 8007d26:	600f      	str	r7, [r1, #0]
 8007d28:	bf18      	it	ne
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	eba6 0807 	sub.w	r8, r6, r7
 8007d30:	608b      	str	r3, [r1, #8]
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	dd9c      	ble.n	8007c72 <__sflush_r+0x1a>
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d3c:	4643      	mov	r3, r8
 8007d3e:	463a      	mov	r2, r7
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b0      	blx	r6
 8007d44:	2800      	cmp	r0, #0
 8007d46:	dc06      	bgt.n	8007d56 <__sflush_r+0xfe>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e78e      	b.n	8007c74 <__sflush_r+0x1c>
 8007d56:	4407      	add	r7, r0
 8007d58:	eba8 0800 	sub.w	r8, r8, r0
 8007d5c:	e7e9      	b.n	8007d32 <__sflush_r+0xda>
 8007d5e:	bf00      	nop
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b913      	cbnz	r3, 8007d74 <_fflush_r+0x10>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	4628      	mov	r0, r5
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	b118      	cbz	r0, 8007d7e <_fflush_r+0x1a>
 8007d76:	6983      	ldr	r3, [r0, #24]
 8007d78:	b90b      	cbnz	r3, 8007d7e <_fflush_r+0x1a>
 8007d7a:	f000 f887 	bl	8007e8c <__sinit>
 8007d7e:	4b14      	ldr	r3, [pc, #80]	; (8007dd0 <_fflush_r+0x6c>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d11b      	bne.n	8007dbc <_fflush_r+0x58>
 8007d84:	686c      	ldr	r4, [r5, #4]
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0ef      	beq.n	8007d6e <_fflush_r+0xa>
 8007d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d90:	07d0      	lsls	r0, r2, #31
 8007d92:	d404      	bmi.n	8007d9e <_fflush_r+0x3a>
 8007d94:	0599      	lsls	r1, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_fflush_r+0x3a>
 8007d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9a:	f7ff fcf8 	bl	800778e <__retarget_lock_acquire_recursive>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4621      	mov	r1, r4
 8007da2:	f7ff ff59 	bl	8007c58 <__sflush_r>
 8007da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	4605      	mov	r5, r0
 8007dac:	d4e0      	bmi.n	8007d70 <_fflush_r+0xc>
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	059b      	lsls	r3, r3, #22
 8007db2:	d4dd      	bmi.n	8007d70 <_fflush_r+0xc>
 8007db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db6:	f7ff fceb 	bl	8007790 <__retarget_lock_release_recursive>
 8007dba:	e7d9      	b.n	8007d70 <_fflush_r+0xc>
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <_fflush_r+0x70>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <_fflush_r+0x62>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7df      	b.n	8007d86 <_fflush_r+0x22>
 8007dc6:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <_fflush_r+0x74>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7da      	b.n	8007d86 <_fflush_r+0x22>
 8007dd0:	08008eec 	.word	0x08008eec
 8007dd4:	08008f0c 	.word	0x08008f0c
 8007dd8:	08008ecc 	.word	0x08008ecc

08007ddc <std>:
 8007ddc:	2300      	movs	r3, #0
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	e9c0 3300 	strd	r3, r3, [r0]
 8007de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dea:	6083      	str	r3, [r0, #8]
 8007dec:	8181      	strh	r1, [r0, #12]
 8007dee:	6643      	str	r3, [r0, #100]	; 0x64
 8007df0:	81c2      	strh	r2, [r0, #14]
 8007df2:	6183      	str	r3, [r0, #24]
 8007df4:	4619      	mov	r1, r3
 8007df6:	2208      	movs	r2, #8
 8007df8:	305c      	adds	r0, #92	; 0x5c
 8007dfa:	f7fd fbad 	bl	8005558 <memset>
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x38>)
 8007e00:	6263      	str	r3, [r4, #36]	; 0x24
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x3c>)
 8007e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <std+0x40>)
 8007e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x44>)
 8007e0c:	6224      	str	r4, [r4, #32]
 8007e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	bf00      	nop
 8007e14:	08008119 	.word	0x08008119
 8007e18:	0800813b 	.word	0x0800813b
 8007e1c:	08008173 	.word	0x08008173
 8007e20:	08008197 	.word	0x08008197

08007e24 <_cleanup_r>:
 8007e24:	4901      	ldr	r1, [pc, #4]	; (8007e2c <_cleanup_r+0x8>)
 8007e26:	f000 b8af 	b.w	8007f88 <_fwalk_reent>
 8007e2a:	bf00      	nop
 8007e2c:	08007d65 	.word	0x08007d65

08007e30 <__sfmoreglue>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	1e4a      	subs	r2, r1, #1
 8007e34:	2568      	movs	r5, #104	; 0x68
 8007e36:	4355      	muls	r5, r2
 8007e38:	460e      	mov	r6, r1
 8007e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e3e:	f7fd fbe3 	bl	8005608 <_malloc_r>
 8007e42:	4604      	mov	r4, r0
 8007e44:	b140      	cbz	r0, 8007e58 <__sfmoreglue+0x28>
 8007e46:	2100      	movs	r1, #0
 8007e48:	e9c0 1600 	strd	r1, r6, [r0]
 8007e4c:	300c      	adds	r0, #12
 8007e4e:	60a0      	str	r0, [r4, #8]
 8007e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e54:	f7fd fb80 	bl	8005558 <memset>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}

08007e5c <__sfp_lock_acquire>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sfp_lock_acquire+0x8>)
 8007e5e:	f7ff bc96 	b.w	800778e <__retarget_lock_acquire_recursive>
 8007e62:	bf00      	nop
 8007e64:	200004f4 	.word	0x200004f4

08007e68 <__sfp_lock_release>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__sfp_lock_release+0x8>)
 8007e6a:	f7ff bc91 	b.w	8007790 <__retarget_lock_release_recursive>
 8007e6e:	bf00      	nop
 8007e70:	200004f4 	.word	0x200004f4

08007e74 <__sinit_lock_acquire>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__sinit_lock_acquire+0x8>)
 8007e76:	f7ff bc8a 	b.w	800778e <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	200004ef 	.word	0x200004ef

08007e80 <__sinit_lock_release>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__sinit_lock_release+0x8>)
 8007e82:	f7ff bc85 	b.w	8007790 <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	200004ef 	.word	0x200004ef

08007e8c <__sinit>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4604      	mov	r4, r0
 8007e90:	f7ff fff0 	bl	8007e74 <__sinit_lock_acquire>
 8007e94:	69a3      	ldr	r3, [r4, #24]
 8007e96:	b11b      	cbz	r3, 8007ea0 <__sinit+0x14>
 8007e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e9c:	f7ff bff0 	b.w	8007e80 <__sinit_lock_release>
 8007ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <__sinit+0x68>)
 8007ea8:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <__sinit+0x6c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	bf04      	itt	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	61a3      	streq	r3, [r4, #24]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f820 	bl	8007efc <__sfp>
 8007ebc:	6060      	str	r0, [r4, #4]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f81c 	bl	8007efc <__sfp>
 8007ec4:	60a0      	str	r0, [r4, #8]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 f818 	bl	8007efc <__sfp>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	60e0      	str	r0, [r4, #12]
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	6860      	ldr	r0, [r4, #4]
 8007ed4:	f7ff ff82 	bl	8007ddc <std>
 8007ed8:	68a0      	ldr	r0, [r4, #8]
 8007eda:	2201      	movs	r2, #1
 8007edc:	2109      	movs	r1, #9
 8007ede:	f7ff ff7d 	bl	8007ddc <std>
 8007ee2:	68e0      	ldr	r0, [r4, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f7ff ff78 	bl	8007ddc <std>
 8007eec:	2301      	movs	r3, #1
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	e7d2      	b.n	8007e98 <__sinit+0xc>
 8007ef2:	bf00      	nop
 8007ef4:	08008b4c 	.word	0x08008b4c
 8007ef8:	08007e25 	.word	0x08007e25

08007efc <__sfp>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	4607      	mov	r7, r0
 8007f00:	f7ff ffac 	bl	8007e5c <__sfp_lock_acquire>
 8007f04:	4b1e      	ldr	r3, [pc, #120]	; (8007f80 <__sfp+0x84>)
 8007f06:	681e      	ldr	r6, [r3, #0]
 8007f08:	69b3      	ldr	r3, [r6, #24]
 8007f0a:	b913      	cbnz	r3, 8007f12 <__sfp+0x16>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff ffbd 	bl	8007e8c <__sinit>
 8007f12:	3648      	adds	r6, #72	; 0x48
 8007f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	d503      	bpl.n	8007f24 <__sfp+0x28>
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	b30b      	cbz	r3, 8007f64 <__sfp+0x68>
 8007f20:	6836      	ldr	r6, [r6, #0]
 8007f22:	e7f7      	b.n	8007f14 <__sfp+0x18>
 8007f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f28:	b9d5      	cbnz	r5, 8007f60 <__sfp+0x64>
 8007f2a:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <__sfp+0x88>)
 8007f2c:	60e3      	str	r3, [r4, #12]
 8007f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f32:	6665      	str	r5, [r4, #100]	; 0x64
 8007f34:	f7ff fc2a 	bl	800778c <__retarget_lock_init_recursive>
 8007f38:	f7ff ff96 	bl	8007e68 <__sfp_lock_release>
 8007f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f44:	6025      	str	r5, [r4, #0]
 8007f46:	61a5      	str	r5, [r4, #24]
 8007f48:	2208      	movs	r2, #8
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f50:	f7fd fb02 	bl	8005558 <memset>
 8007f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f60:	3468      	adds	r4, #104	; 0x68
 8007f62:	e7d9      	b.n	8007f18 <__sfp+0x1c>
 8007f64:	2104      	movs	r1, #4
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7ff ff62 	bl	8007e30 <__sfmoreglue>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	6030      	str	r0, [r6, #0]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1d5      	bne.n	8007f20 <__sfp+0x24>
 8007f74:	f7ff ff78 	bl	8007e68 <__sfp_lock_release>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	e7ee      	b.n	8007f5c <__sfp+0x60>
 8007f7e:	bf00      	nop
 8007f80:	08008b4c 	.word	0x08008b4c
 8007f84:	ffff0001 	.word	0xffff0001

08007f88 <_fwalk_reent>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	4688      	mov	r8, r1
 8007f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f94:	2700      	movs	r7, #0
 8007f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f9e:	d505      	bpl.n	8007fac <_fwalk_reent+0x24>
 8007fa0:	6824      	ldr	r4, [r4, #0]
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	d1f7      	bne.n	8007f96 <_fwalk_reent+0xe>
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fac:	89ab      	ldrh	r3, [r5, #12]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d907      	bls.n	8007fc2 <_fwalk_reent+0x3a>
 8007fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	d003      	beq.n	8007fc2 <_fwalk_reent+0x3a>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	47c0      	blx	r8
 8007fc0:	4307      	orrs	r7, r0
 8007fc2:	3568      	adds	r5, #104	; 0x68
 8007fc4:	e7e9      	b.n	8007f9a <_fwalk_reent+0x12>

08007fc6 <__swhatbuf_r>:
 8007fc6:	b570      	push	{r4, r5, r6, lr}
 8007fc8:	460e      	mov	r6, r1
 8007fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	b096      	sub	sp, #88	; 0x58
 8007fd2:	4614      	mov	r4, r2
 8007fd4:	461d      	mov	r5, r3
 8007fd6:	da07      	bge.n	8007fe8 <__swhatbuf_r+0x22>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	89b3      	ldrh	r3, [r6, #12]
 8007fde:	061a      	lsls	r2, r3, #24
 8007fe0:	d410      	bmi.n	8008004 <__swhatbuf_r+0x3e>
 8007fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe6:	e00e      	b.n	8008006 <__swhatbuf_r+0x40>
 8007fe8:	466a      	mov	r2, sp
 8007fea:	f000 f8fb 	bl	80081e4 <_fstat_r>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	dbf2      	blt.n	8007fd8 <__swhatbuf_r+0x12>
 8007ff2:	9a01      	ldr	r2, [sp, #4]
 8007ff4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ff8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ffc:	425a      	negs	r2, r3
 8007ffe:	415a      	adcs	r2, r3
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	e7ee      	b.n	8007fe2 <__swhatbuf_r+0x1c>
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	2000      	movs	r0, #0
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	b016      	add	sp, #88	; 0x58
 800800c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008010 <__smakebuf_r>:
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008014:	079d      	lsls	r5, r3, #30
 8008016:	4606      	mov	r6, r0
 8008018:	460c      	mov	r4, r1
 800801a:	d507      	bpl.n	800802c <__smakebuf_r+0x1c>
 800801c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	2301      	movs	r3, #1
 8008026:	6163      	str	r3, [r4, #20]
 8008028:	b002      	add	sp, #8
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	ab01      	add	r3, sp, #4
 800802e:	466a      	mov	r2, sp
 8008030:	f7ff ffc9 	bl	8007fc6 <__swhatbuf_r>
 8008034:	9900      	ldr	r1, [sp, #0]
 8008036:	4605      	mov	r5, r0
 8008038:	4630      	mov	r0, r6
 800803a:	f7fd fae5 	bl	8005608 <_malloc_r>
 800803e:	b948      	cbnz	r0, 8008054 <__smakebuf_r+0x44>
 8008040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008044:	059a      	lsls	r2, r3, #22
 8008046:	d4ef      	bmi.n	8008028 <__smakebuf_r+0x18>
 8008048:	f023 0303 	bic.w	r3, r3, #3
 800804c:	f043 0302 	orr.w	r3, r3, #2
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	e7e3      	b.n	800801c <__smakebuf_r+0xc>
 8008054:	4b0d      	ldr	r3, [pc, #52]	; (800808c <__smakebuf_r+0x7c>)
 8008056:	62b3      	str	r3, [r6, #40]	; 0x28
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	9b00      	ldr	r3, [sp, #0]
 8008064:	6163      	str	r3, [r4, #20]
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	6120      	str	r0, [r4, #16]
 800806a:	b15b      	cbz	r3, 8008084 <__smakebuf_r+0x74>
 800806c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008070:	4630      	mov	r0, r6
 8008072:	f000 f8c9 	bl	8008208 <_isatty_r>
 8008076:	b128      	cbz	r0, 8008084 <__smakebuf_r+0x74>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f023 0303 	bic.w	r3, r3, #3
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	89a0      	ldrh	r0, [r4, #12]
 8008086:	4305      	orrs	r5, r0
 8008088:	81a5      	strh	r5, [r4, #12]
 800808a:	e7cd      	b.n	8008028 <__smakebuf_r+0x18>
 800808c:	08007e25 	.word	0x08007e25

08008090 <_raise_r>:
 8008090:	291f      	cmp	r1, #31
 8008092:	b538      	push	{r3, r4, r5, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	460d      	mov	r5, r1
 8008098:	d904      	bls.n	80080a4 <_raise_r+0x14>
 800809a:	2316      	movs	r3, #22
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 30ff 	mov.w	r0, #4294967295
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080a6:	b112      	cbz	r2, 80080ae <_raise_r+0x1e>
 80080a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ac:	b94b      	cbnz	r3, 80080c2 <_raise_r+0x32>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f830 	bl	8008114 <_getpid_r>
 80080b4:	462a      	mov	r2, r5
 80080b6:	4601      	mov	r1, r0
 80080b8:	4620      	mov	r0, r4
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080be:	f000 b817 	b.w	80080f0 <_kill_r>
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d00a      	beq.n	80080dc <_raise_r+0x4c>
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	d103      	bne.n	80080d2 <_raise_r+0x42>
 80080ca:	2316      	movs	r3, #22
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	2001      	movs	r0, #1
 80080d0:	e7e7      	b.n	80080a2 <_raise_r+0x12>
 80080d2:	2400      	movs	r4, #0
 80080d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080d8:	4628      	mov	r0, r5
 80080da:	4798      	blx	r3
 80080dc:	2000      	movs	r0, #0
 80080de:	e7e0      	b.n	80080a2 <_raise_r+0x12>

080080e0 <raise>:
 80080e0:	4b02      	ldr	r3, [pc, #8]	; (80080ec <raise+0xc>)
 80080e2:	4601      	mov	r1, r0
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f7ff bfd3 	b.w	8008090 <_raise_r>
 80080ea:	bf00      	nop
 80080ec:	20000010 	.word	0x20000010

080080f0 <_kill_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_kill_r+0x20>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f7fa fd2c 	bl	8002b5a <_kill>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_kill_r+0x1c>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	b103      	cbz	r3, 800810c <_kill_r+0x1c>
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	200004e8 	.word	0x200004e8

08008114 <_getpid_r>:
 8008114:	f7fa bd19 	b.w	8002b4a <_getpid>

08008118 <__sread>:
 8008118:	b510      	push	{r4, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008120:	f000 f894 	bl	800824c <_read_r>
 8008124:	2800      	cmp	r0, #0
 8008126:	bfab      	itete	ge
 8008128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800812a:	89a3      	ldrhlt	r3, [r4, #12]
 800812c:	181b      	addge	r3, r3, r0
 800812e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008132:	bfac      	ite	ge
 8008134:	6563      	strge	r3, [r4, #84]	; 0x54
 8008136:	81a3      	strhlt	r3, [r4, #12]
 8008138:	bd10      	pop	{r4, pc}

0800813a <__swrite>:
 800813a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813e:	461f      	mov	r7, r3
 8008140:	898b      	ldrh	r3, [r1, #12]
 8008142:	05db      	lsls	r3, r3, #23
 8008144:	4605      	mov	r5, r0
 8008146:	460c      	mov	r4, r1
 8008148:	4616      	mov	r6, r2
 800814a:	d505      	bpl.n	8008158 <__swrite+0x1e>
 800814c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008150:	2302      	movs	r3, #2
 8008152:	2200      	movs	r2, #0
 8008154:	f000 f868 	bl	8008228 <_lseek_r>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800815e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	4632      	mov	r2, r6
 8008166:	463b      	mov	r3, r7
 8008168:	4628      	mov	r0, r5
 800816a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800816e:	f000 b817 	b.w	80081a0 <_write_r>

08008172 <__sseek>:
 8008172:	b510      	push	{r4, lr}
 8008174:	460c      	mov	r4, r1
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	f000 f855 	bl	8008228 <_lseek_r>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	bf15      	itete	ne
 8008184:	6560      	strne	r0, [r4, #84]	; 0x54
 8008186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800818a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800818e:	81a3      	strheq	r3, [r4, #12]
 8008190:	bf18      	it	ne
 8008192:	81a3      	strhne	r3, [r4, #12]
 8008194:	bd10      	pop	{r4, pc}

08008196 <__sclose>:
 8008196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819a:	f000 b813 	b.w	80081c4 <_close_r>
	...

080081a0 <_write_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	; (80081c0 <_write_r+0x20>)
 80081a4:	4604      	mov	r4, r0
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	2200      	movs	r2, #0
 80081ac:	602a      	str	r2, [r5, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	f7fa fd0a 	bl	8002bc8 <_write>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_write_r+0x1e>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_write_r+0x1e>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	200004e8 	.word	0x200004e8

080081c4 <_close_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d06      	ldr	r5, [pc, #24]	; (80081e0 <_close_r+0x1c>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7fa fd16 	bl	8002c00 <_close>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_close_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_close_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	200004e8 	.word	0x200004e8

080081e4 <_fstat_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4d07      	ldr	r5, [pc, #28]	; (8008204 <_fstat_r+0x20>)
 80081e8:	2300      	movs	r3, #0
 80081ea:	4604      	mov	r4, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	602b      	str	r3, [r5, #0]
 80081f2:	f7fa fd11 	bl	8002c18 <_fstat>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	d102      	bne.n	8008200 <_fstat_r+0x1c>
 80081fa:	682b      	ldr	r3, [r5, #0]
 80081fc:	b103      	cbz	r3, 8008200 <_fstat_r+0x1c>
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	bf00      	nop
 8008204:	200004e8 	.word	0x200004e8

08008208 <_isatty_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d06      	ldr	r5, [pc, #24]	; (8008224 <_isatty_r+0x1c>)
 800820c:	2300      	movs	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	f7fa fd10 	bl	8002c38 <_isatty>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_isatty_r+0x1a>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_isatty_r+0x1a>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	200004e8 	.word	0x200004e8

08008228 <_lseek_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d07      	ldr	r5, [pc, #28]	; (8008248 <_lseek_r+0x20>)
 800822c:	4604      	mov	r4, r0
 800822e:	4608      	mov	r0, r1
 8008230:	4611      	mov	r1, r2
 8008232:	2200      	movs	r2, #0
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f7fa fd09 	bl	8002c4e <_lseek>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_lseek_r+0x1e>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_lseek_r+0x1e>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	200004e8 	.word	0x200004e8

0800824c <_read_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4d07      	ldr	r5, [pc, #28]	; (800826c <_read_r+0x20>)
 8008250:	4604      	mov	r4, r0
 8008252:	4608      	mov	r0, r1
 8008254:	4611      	mov	r1, r2
 8008256:	2200      	movs	r2, #0
 8008258:	602a      	str	r2, [r5, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	f7fa fc97 	bl	8002b8e <_read>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_read_r+0x1e>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_read_r+0x1e>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	200004e8 	.word	0x200004e8

08008270 <_init>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	bf00      	nop
 8008274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008276:	bc08      	pop	{r3}
 8008278:	469e      	mov	lr, r3
 800827a:	4770      	bx	lr

0800827c <_fini>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	bf00      	nop
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr
