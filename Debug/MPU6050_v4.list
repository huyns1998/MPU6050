
MPU6050_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008868  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  08008a08  08008a08  00018a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096ac  080096ac  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b4  080096b4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080096c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001ec  080098ac  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  080098ac  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022186  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a95  00000000  00000000  000423a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00044e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  00046240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c42e  00000000  00000000  000475c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a6  00000000  00000000  000639ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e39  00000000  00000000  00075a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a8cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  0010a920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089f0 	.word	0x080089f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080089f0 	.word	0x080089f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b9 	b.w	8000fec <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96e 	b.w	8000fec <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bfb8      	it	lt
 8000ffe:	425b      	neglt	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;
        
        Quaternion() {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800101a:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
        }
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_ZN11VectorInt16C1Ev>:
    public:
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
            x = 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
            y = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
            z = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	809a      	strh	r2, [r3, #4]
        }
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
            x = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
            y = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
            z = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
        }
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_ZN7MPU605013dmpInitializeEv>:
    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,
    0x01,   0x62,   0x02,   0x00, 0x00,
    0x00,   0x60,   0x04,   0x00, 0x40, 0x00, 0x00
};

uint8_t MPU6050::dmpInitialize() {
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	; 0xb0
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]





	reset();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f001 fc73 	bl	800298c <_ZN7MPU60505resetEv>
		HAL_Delay(30); // wait after reset
 80010a6:	201e      	movs	r0, #30
 80010a8:	f002 fa82 	bl	80035b0 <HAL_Delay>

		setSleepEnabled(false);
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 fc7b 	bl	80029aa <_ZN7MPU605015setSleepEnabledEb>

		setMemoryBank(0x10, true, true);
 80010b4:	2301      	movs	r3, #1
 80010b6:	2201      	movs	r2, #1
 80010b8:	2110      	movs	r1, #16
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f001 fde3 	bl	8002c86 <_ZN7MPU605013setMemoryBankEhbb>

		setMemoryStartAddress(0x06);
 80010c0:	2106      	movs	r1, #6
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fe09 	bl	8002cda <_ZN7MPU605021setMemoryStartAddressEh>

		uint8_t hwRevision = readMemoryByte();
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f001 fe17 	bl	8002cfc <_ZN7MPU605014readMemoryByteEv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

		setMemoryBank(0, false, false);
 80010d4:	2300      	movs	r3, #0
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 fdd3 	bl	8002c86 <_ZN7MPU605013setMemoryBankEhbb>

		uint8_t otpValid = getOTPBankValid();
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 fcb6 	bl	8002a52 <_ZN7MPU605015getOTPBankValidEv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

		int8_t xgOffsetTC = getXGyroOffsetTC();
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 fcd5 	bl	8002a9c <_ZN7MPU605016getXGyroOffsetTCEv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		int8_t ygOffsetTC = getYGyroOffsetTC();
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f001 fcf9 	bl	8002af0 <_ZN7MPU605016getYGyroOffsetTCEv>
 80010fe:	4603      	mov	r3, r0
 8001100:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		int8_t zgOffsetTC = getZGyroOffsetTC();
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 fd1d 	bl	8002b44 <_ZN7MPU605016getZGyroOffsetTCEv>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

		setSlaveAddress(0, 0x7F);
 8001110:	227f      	movs	r2, #127	; 0x7f
 8001112:	2100      	movs	r1, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 fac0 	bl	800269a <_ZN7MPU605015setSlaveAddressEhh>

		setI2CMasterModeEnabled(false);
 800111a:	2100      	movs	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f001 fc06 	bl	800292e <_ZN7MPU605023setI2CMasterModeEnabledEb>

		setSlaveAddress(0, 0x68);
 8001122:	2268      	movs	r2, #104	; 0x68
 8001124:	2100      	movs	r1, #0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fab7 	bl	800269a <_ZN7MPU605015setSlaveAddressEhh>

		resetI2CMaster();
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f001 fc1e 	bl	800296e <_ZN7MPU605014resetI2CMasterEv>
		HAL_Delay(20);
 8001132:	2014      	movs	r0, #20
 8001134:	f002 fa3c 	bl	80035b0 <HAL_Delay>

		if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true)) {
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	f240 7289 	movw	r2, #1929	; 0x789
 8001146:	4949      	ldr	r1, [pc, #292]	; (800126c <_ZN7MPU605013dmpInitializeEv+0x1d4>)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f001 febd 	bl	8002ec8 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8085 	beq.w	8001260 <_ZN7MPU605013dmpInitializeEv+0x1c8>
			if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 8001156:	22c0      	movs	r2, #192	; 0xc0
 8001158:	4945      	ldr	r1, [pc, #276]	; (8001270 <_ZN7MPU605013dmpInitializeEv+0x1d8>)
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f001 ff97 	bl	800308e <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d07a      	beq.n	800125c <_ZN7MPU605013dmpInitializeEv+0x1c4>
				setClockSource(MPU6050_CLOCK_PLL_YGYRO);
 8001166:	2102      	movs	r1, #2
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 fc2f 	bl	80029cc <_ZN7MPU605014setClockSourceEh>

				setIntEnabled(0x12);
 800116e:	2112      	movs	r1, #18
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f001 faaf 	bl	80026d4 <_ZN7MPU605013setIntEnabledEh>

				setRate(4); // khz / (1 + 4) = 200 Hz
 8001176:	2104      	movs	r1, #4
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f001 fa31 	bl	80025e0 <_ZN7MPU60507setRateEh>

				setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 800117e:	2101      	movs	r1, #1
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f001 fa3e 	bl	8002602 <_ZN7MPU605020setExternalFrameSyncEh>

				setDLPFMode(MPU6050_DLPF_BW_42);
 8001186:	2103      	movs	r1, #3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f001 fa4d 	bl	8002628 <_ZN7MPU605011setDLPFModeEh>

				setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 800118e:	2103      	movs	r1, #3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f001 fa5c 	bl	800264e <_ZN7MPU605021setFullScaleGyroRangeEh>


				setDMPConfig1(0x03);
 8001196:	2103      	movs	r1, #3
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f001 ff8a 	bl	80030b2 <_ZN7MPU605013setDMPConfig1Eh>
				setDMPConfig2(0x00);
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f001 ff97 	bl	80030d4 <_ZN7MPU605013setDMPConfig2Eh>

				setOTPBankValid(false);
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f001 fc66 	bl	8002a7a <_ZN7MPU605015setOTPBankValidEb>

				setXGyroOffsetTC(xgOffsetTC);
 80011ae:	f997 30a5 	ldrsb.w	r3, [r7, #165]	; 0xa5
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f001 fc88 	bl	8002aca <_ZN7MPU605016setXGyroOffsetTCEa>
				setYGyroOffsetTC(ygOffsetTC);
 80011ba:	f997 30a4 	ldrsb.w	r3, [r7, #164]	; 0xa4
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 fcac 	bl	8002b1e <_ZN7MPU605016setYGyroOffsetTCEa>
				setZGyroOffsetTC(zgOffsetTC);
 80011c6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f001 fcd0 	bl	8002b72 <_ZN7MPU605016setZGyroOffsetTCEa>

				setXGyroOffset(0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f001 fd12 	bl	8002bfe <_ZN7MPU605014setXGyroOffsetEs>
				setYGyroOffset(0);
 80011da:	2100      	movs	r1, #0
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f001 fd1f 	bl	8002c20 <_ZN7MPU605014setYGyroOffsetEs>
				setZGyroOffset(0);
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f001 fd2c 	bl	8002c42 <_ZN7MPU605014setZGyroOffsetEs>

				uint8_t dmpUpdate[16], j;
				uint16_t pos = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

				uint8_t fifoBuffer[128];

				setFIFOEnabled(true);
 80011f0:	2101      	movs	r1, #1
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f001 fb8a 	bl	800290c <_ZN7MPU605014setFIFOEnabledEb>

				setDMPEnabled(true);
 80011f8:	2101      	movs	r1, #1
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f001 fd32 	bl	8002c64 <_ZN7MPU605013setDMPEnabledEb>

				uint16_t fifoCount;
				while ((fifoCount = getFIFOCount()) < 3);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f001 fbf6 	bl	80029f2 <_ZN7MPU605012getFIFOCountEv>
 8001206:	4603      	mov	r3, r0
 8001208:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800120c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001210:	2b02      	cmp	r3, #2
 8001212:	bf94      	ite	ls
 8001214:	2301      	movls	r3, #1
 8001216:	2300      	movhi	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d000      	beq.n	8001220 <_ZN7MPU605013dmpInitializeEv+0x188>
 800121e:	e7ef      	b.n	8001200 <_ZN7MPU605013dmpInitializeEv+0x168>

				getFIFOBytes(fifoBuffer, fifoCount);
 8001220:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f001 fbfc 	bl	8002a2a <_ZN7MPU605012getFIFOBytesEPhh>

				uint8_t mpuIntStatus = getIntStatus();
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 fa5f 	bl	80026f6 <_ZN7MPU605012getIntStatusEv>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

				setDMPEnabled(false);
 800123e:	2100      	movs	r1, #0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 fd0f 	bl	8002c64 <_ZN7MPU605013setDMPEnabledEb>

				dmpPacketSize = 42;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	222a      	movs	r2, #42	; 0x2a
 800124a:	809a      	strh	r2, [r3, #4]

				resetFIFO();
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 fb7f 	bl	8002950 <_ZN7MPU60509resetFIFOEv>
				getIntStatus();
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f001 fa4f 	bl	80026f6 <_ZN7MPU605012getIntStatusEv>
				return 2; // configuration block loading failed
			}
		} else {
			return 1; // main binary block loading failed
		}
		return 0; // success
 8001258:	2300      	movs	r3, #0
 800125a:	e002      	b.n	8001262 <_ZN7MPU605013dmpInitializeEv+0x1ca>
				return 2; // configuration block loading failed
 800125c:	2302      	movs	r3, #2
 800125e:	e000      	b.n	8001262 <_ZN7MPU605013dmpInitializeEv+0x1ca>
			return 1; // main binary block loading failed
 8001260:	2301      	movs	r3, #1


}
 8001262:	4618      	mov	r0, r3
 8001264:	37a8      	adds	r7, #168	; 0xa8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08008a68 	.word	0x08008a68
 8001270:	080091f4 	.word	0x080091f4

08001274 <_ZN7MPU605016dmpGetQuaternionEPsPKh>:
    data[1] = ((packet[4] << 24) + (packet[5] << 16) + (packet[6] << 8) + packet[7]);
    data[2] = ((packet[8] << 24) + (packet[9] << 16) + (packet[10] << 8) + packet[11]);
    data[3] = ((packet[12] << 24) + (packet[13] << 16) + (packet[14] << 8) + packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <_ZN7MPU605016dmpGetQuaternionEPsPKh+0x18>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	607b      	str	r3, [r7, #4]
    data[0] = ((packet[0] << 8) + packet[1]);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	801a      	strh	r2, [r3, #0]
    data[1] = ((packet[4] << 8) + packet[5]);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3304      	adds	r3, #4
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3305      	adds	r3, #5
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4413      	add	r3, r2
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3302      	adds	r3, #2
 80012c4:	b212      	sxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]
    data[2] = ((packet[8] << 8) + packet[9]);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3308      	adds	r3, #8
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3309      	adds	r3, #9
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3304      	adds	r3, #4
 80012e4:	b212      	sxth	r2, r2
 80012e6:	801a      	strh	r2, [r3, #0]
    data[3] = ((packet[12] << 8) + packet[13]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	330c      	adds	r3, #12
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	330d      	adds	r3, #13
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3306      	adds	r3, #6
 8001304:	b212      	sxth	r2, r2
 8001306:	801a      	strh	r2, [r3, #0]
    return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4619      	mov	r1, r3
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff ffa1 	bl	8001274 <_ZN7MPU605016dmpGetQuaternionEPsPKh>
 8001332:	4603      	mov	r3, r0
 8001334:	77fb      	strb	r3, [r7, #31]
    if (status == 0) {
 8001336:	7ffb      	ldrb	r3, [r7, #31]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d135      	bne.n	80013a8 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x90>
        q -> w = (float)qI[0] / 16384.0f;
 800133c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013b4 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 800134c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	edc3 7a00 	vstr	s15, [r3]
        q -> x = (float)qI[1] / 16384.0f;
 8001356:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	eddf 6a14 	vldr	s13, [pc, #80]	; 80013b4 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8001366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	edc3 7a01 	vstr	s15, [r3, #4]
        q -> y = (float)qI[2] / 16384.0f;
 8001370:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80013b4 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8001380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	edc3 7a02 	vstr	s15, [r3, #8]
        q -> z = (float)qI[3] / 16384.0f;
 800138a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001396:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013b4 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 800139a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	edc3 7a03 	vstr	s15, [r3, #12]
        return 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x92>
    }
    return status; // int16 return value, indicates error if this line is reached
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	46800000 	.word	0x46800000

080013b8 <_ZN7MPU605020dmpGetFIFOPacketSizeEv>:
// uint8_t MPU6050::dmpSetGyroDataSource(uint_fast8_t source);
// uint8_t MPU6050::dmpDecodeQuantizedAccel();
// uint32_t MPU6050::dmpGetGyroSumOfSquare();
// uint32_t MPU6050::dmpGetAccelSumOfSquare();
// void MPU6050::dmpOverrideQuaternion(long *q);
uint16_t MPU6050::dmpGetFIFOPacketSize() {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    return dmpPacketSize;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	889b      	ldrh	r3, [r3, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_Z16MPU_dmpDataReadyv>:
*
* @param 		-		None
*
* @return		-	 	None
*/
void_t MPU_dmpDataReady(void_t) {
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	g_boMpuInterrupt = TRUE;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <_Z16MPU_dmpDataReadyv+0x14>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000294 	.word	0x20000294

080013e8 <_Z8MPU_InitP17I2C_HandleTypeDef>:
  * @param 	[iwGyroZOffset]		:		gyroZ offset
  * @param 	[iwAccelZOffset]	:		Accel Z offset
  * @return		:	 	1 if success and 0 if fail
  */
u8_t MPU_Init(I2C_HandleTypeDef* hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	I2Cdev_init(hi2c);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 febb 	bl	800216c <_Z11I2Cdev_initP17I2C_HandleTypeDef>
	g_mpu.initialize();
 80013f6:	4825      	ldr	r0, [pc, #148]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 80013f8:	f001 f8da 	bl	80025b0 <_ZN7MPU605010initializeEv>

	// load and configure the DMP
	g_byDevStatus = g_mpu.dmpInitialize();
 80013fc:	4823      	ldr	r0, [pc, #140]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 80013fe:	f7ff fe4b 	bl	8001098 <_ZN7MPU605013dmpInitializeEv>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <_Z8MPU_InitP17I2C_HandleTypeDef+0xa8>)
 8001408:	701a      	strb	r2, [r3, #0]

	// make sure it worked (returns 0 if so)
	if (g_byDevStatus == 0) {
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <_Z8MPU_InitP17I2C_HandleTypeDef+0xa8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d136      	bne.n	8001480 <_Z8MPU_InitP17I2C_HandleTypeDef+0x98>

		calibSetup();
 8001412:	f000 f96b 	bl	80016ec <_ZL10calibSetupv>

		calibration_caloffset();
 8001416:	f000 fc11 	bl	8001c3c <_ZL21calibration_caloffsetv>
		//supply your own gyro offsets here, scaled for min sensitivity
		g_mpu.setXGyroOffset(g_iwGx_offset);
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <_Z8MPU_InitP17I2C_HandleTypeDef+0xac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 8001424:	f001 fbeb 	bl	8002bfe <_ZN7MPU605014setXGyroOffsetEs>
		g_mpu.setYGyroOffset(g_iwGy_offset);
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <_Z8MPU_InitP17I2C_HandleTypeDef+0xb0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4619      	mov	r1, r3
 8001430:	4816      	ldr	r0, [pc, #88]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 8001432:	f001 fbf5 	bl	8002c20 <_ZN7MPU605014setYGyroOffsetEs>
		g_mpu.setZGyroOffset(g_iwGz_offset);
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <_Z8MPU_InitP17I2C_HandleTypeDef+0xb4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 8001440:	f001 fbff 	bl	8002c42 <_ZN7MPU605014setZGyroOffsetEs>
		g_mpu.setZAccelOffset(g_iwAz_offset); // 1688 factory default for my test chip
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <_Z8MPU_InitP17I2C_HandleTypeDef+0xb8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 800144e:	f001 fbc5 	bl	8002bdc <_ZN7MPU605015setZAccelOffsetEs>
//		g_mpu.setYGyroOffset(103);
//		g_mpu.setZGyroOffset(44);
//		g_mpu.setZAccelOffset(1268); // 1688 factory default for my test chip

		// turn on the DMP, now that it's ready
		g_mpu.setDMPEnabled(true);
 8001452:	2101      	movs	r1, #1
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 8001456:	f001 fc05 	bl	8002c64 <_ZN7MPU605013setDMPEnabledEb>

		// enable Arduino interrupt detection

		//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
		g_byMpuIntStatus = g_mpu.getIntStatus();
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 800145c:	f001 f94b 	bl	80026f6 <_ZN7MPU605012getIntStatusEv>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <_Z8MPU_InitP17I2C_HandleTypeDef+0xbc>)
 8001466:	701a      	strb	r2, [r3, #0]

		// set our DMP Ready flag so the main loop() function knows it's okay to use it
		g_boDmpReady = true;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <_Z8MPU_InitP17I2C_HandleTypeDef+0xc0>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]

		// get expected DMP packet size for later comparison
		g_wPacketSize = g_mpu.dmpGetFIFOPacketSize();
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <_Z8MPU_InitP17I2C_HandleTypeDef+0xa4>)
 8001470:	f7ff ffa2 	bl	80013b8 <_ZN7MPU605020dmpGetFIFOPacketSizeEv>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <_Z8MPU_InitP17I2C_HandleTypeDef+0xc4>)
 800147a:	801a      	strh	r2, [r3, #0]
		return MPU_SUCCESS;
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <_Z8MPU_InitP17I2C_HandleTypeDef+0x9a>
	}
	else
	{
	  return MPU_FAIL;
 8001480:	2301      	movs	r3, #1
	}
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000027c 	.word	0x2000027c
 8001490:	20000209 	.word	0x20000209
 8001494:	200002cc 	.word	0x200002cc
 8001498:	200002d0 	.word	0x200002d0
 800149c:	200002d4 	.word	0x200002d4
 80014a0:	200002c8 	.word	0x200002c8
 80014a4:	20000295 	.word	0x20000295
 80014a8:	20000208 	.word	0x20000208
 80014ac:	2000020a 	.word	0x2000020a

080014b0 <_ZL7readDMPv>:
* @param 		-		None
*
* @return		-	 	None
*/
static u8_t readDMP(void_t)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	// if programming failed, don't try to do anything
	  if (!g_boDmpReady) return READ_MPU_DMP_FAIL;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <_ZL7readDMPv+0xd0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <_ZL7readDMPv+0x10>
 80014bc:	2303      	movs	r3, #3
 80014be:	e05c      	b.n	800157a <_ZL7readDMPv+0xca>

	  // wait for MPU interrupt or extra packet(s) available
	  while (!g_boMpuInterrupt && g_wFifoCount < g_wPacketSize) {
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <_ZL7readDMPv+0xd4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d107      	bne.n	80014da <_ZL7readDMPv+0x2a>
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <_ZL7readDMPv+0xd8>)
 80014cc:	881a      	ldrh	r2, [r3, #0]
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <_ZL7readDMPv+0xdc>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d201      	bcs.n	80014da <_ZL7readDMPv+0x2a>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <_ZL7readDMPv+0x2c>
 80014da:	2300      	movs	r3, #0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d000      	beq.n	80014e2 <_ZL7readDMPv+0x32>
 80014e0:	e7ee      	b.n	80014c0 <_ZL7readDMPv+0x10>
		  // .
		  // .
	  }

	  // reset interrupt flag and get INT_STATUS byte
	  g_boMpuInterrupt = false;
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <_ZL7readDMPv+0xd4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	  g_byMpuIntStatus = g_mpu.getIntStatus();
 80014e8:	4829      	ldr	r0, [pc, #164]	; (8001590 <_ZL7readDMPv+0xe0>)
 80014ea:	f001 f904 	bl	80026f6 <_ZN7MPU605012getIntStatusEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <_ZL7readDMPv+0xe4>)
 80014f4:	701a      	strb	r2, [r3, #0]

	  // get current FIFO count
	  g_wFifoCount = g_mpu.getFIFOCount();
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <_ZL7readDMPv+0xe0>)
 80014f8:	f001 fa7b 	bl	80029f2 <_ZN7MPU605012getFIFOCountEv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <_ZL7readDMPv+0xd8>)
 8001502:	801a      	strh	r2, [r3, #0]

	  // check for overflow (this should never happen unless our code is too inefficient)
	  if ((g_byMpuIntStatus & 0x10) || g_wFifoCount == 1024) {
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <_ZL7readDMPv+0xe4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <_ZL7readDMPv+0x6a>
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <_ZL7readDMPv+0xd8>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d103      	bne.n	8001522 <_ZL7readDMPv+0x72>
		  // reset so we can continue cleanly
		  g_mpu.resetFIFO();
 800151a:	481d      	ldr	r0, [pc, #116]	; (8001590 <_ZL7readDMPv+0xe0>)
 800151c:	f001 fa18 	bl	8002950 <_ZN7MPU60509resetFIFOEv>
	  }
	  else
	  {
		  return READ_MPU_I2C_LOST;
	  }
}
 8001520:	e02b      	b.n	800157a <_ZL7readDMPv+0xca>
	  } else if (g_byMpuIntStatus & 0x02) {
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <_ZL7readDMPv+0xe4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d024      	beq.n	8001578 <_ZL7readDMPv+0xc8>
		  while (g_wFifoCount < g_wPacketSize) g_wFifoCount = g_mpu.getFIFOCount();
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <_ZL7readDMPv+0xd8>)
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <_ZL7readDMPv+0xdc>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d207      	bcs.n	800154a <_ZL7readDMPv+0x9a>
 800153a:	4815      	ldr	r0, [pc, #84]	; (8001590 <_ZL7readDMPv+0xe0>)
 800153c:	f001 fa59 	bl	80029f2 <_ZN7MPU605012getFIFOCountEv>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_ZL7readDMPv+0xd8>)
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	e7f1      	b.n	800152e <_ZL7readDMPv+0x7e>
		  g_mpu.getFIFOBytes(g_byFifoBuffer, g_wPacketSize);
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_ZL7readDMPv+0xdc>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4911      	ldr	r1, [pc, #68]	; (8001598 <_ZL7readDMPv+0xe8>)
 8001554:	480e      	ldr	r0, [pc, #56]	; (8001590 <_ZL7readDMPv+0xe0>)
 8001556:	f001 fa68 	bl	8002a2a <_ZN7MPU605012getFIFOBytesEPhh>
		  g_wFifoCount -= g_wPacketSize;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <_ZL7readDMPv+0xd8>)
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <_ZL7readDMPv+0xdc>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_ZL7readDMPv+0xd8>)
 8001568:	801a      	strh	r2, [r3, #0]
			  g_mpu.dmpGetQuaternion(&g_q, g_byFifoBuffer);
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <_ZL7readDMPv+0xe8>)
 800156c:	490b      	ldr	r1, [pc, #44]	; (800159c <_ZL7readDMPv+0xec>)
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <_ZL7readDMPv+0xe0>)
 8001570:	f7ff fed2 	bl	8001318 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
		  return READ_MPU_SUCCESS;
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <_ZL7readDMPv+0xca>
		  return READ_MPU_I2C_LOST;
 8001578:	2302      	movs	r3, #2
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000208 	.word	0x20000208
 8001584:	20000294 	.word	0x20000294
 8001588:	2000020c 	.word	0x2000020c
 800158c:	2000020a 	.word	0x2000020a
 8001590:	2000027c 	.word	0x2000027c
 8001594:	20000295 	.word	0x20000295
 8001598:	20000210 	.word	0x20000210
 800159c:	20000250 	.word	0x20000250

080015a0 <_Z15MPU_GetDMPValueR10DMP_data_t>:
 * @param 	[&]		:		return result
 *
 * @return	[status]	:		status
 */
u8_t MPU_GetDMPValue(DMP_data_t &d)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	u8_t status = readDMP();
 80015a8:	f7ff ff82 	bl	80014b0 <_ZL7readDMPv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]

	d.qw = g_q.w;
 80015b0:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
	d.qx = g_q.x;
 80015b8:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	605a      	str	r2, [r3, #4]
	d.qy = g_q.y;
 80015c0:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
	d.qz = g_q.z;
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <_Z15MPU_GetDMPValueR10DMP_data_t+0x140>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]

	d.accelX = g_mpu.getAccelerationX()/16384.0;
 80015d0:	4844      	ldr	r0, [pc, #272]	; (80016e4 <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 80015d2:	f001 f8f9 	bl	80027c8 <_ZN7MPU605016getAccelerationXEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffab 	bl	8000534 <__aeabi_i2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x148>)
 80015e4:	f7ff f93a 	bl	800085c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fae2 	bl	8000bb8 <__aeabi_d2f>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	61da      	str	r2, [r3, #28]
	d.accelY = g_mpu.getAccelerationY()/16384.0;
 80015fa:	483a      	ldr	r0, [pc, #232]	; (80016e4 <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 80015fc:	f001 f8ff 	bl	80027fe <_ZN7MPU605016getAccelerationYEv>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff96 	bl	8000534 <__aeabi_i2d>
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x148>)
 800160e:	f7ff f925 	bl	800085c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff facd 	bl	8000bb8 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	621a      	str	r2, [r3, #32]
	d.accelZ = g_mpu.getAccelerationZ()/16384.0;
 8001624:	482f      	ldr	r0, [pc, #188]	; (80016e4 <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 8001626:	f001 f905 	bl	8002834 <_ZN7MPU605016getAccelerationZEv>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff81 	bl	8000534 <__aeabi_i2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x148>)
 8001638:	f7ff f910 	bl	800085c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fab8 	bl	8000bb8 <__aeabi_d2f>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

	d.gyroX = g_mpu.getRotationX()/16.4;
 800164e:	4825      	ldr	r0, [pc, #148]	; (80016e4 <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 8001650:	f001 f90b 	bl	800286a <_ZN7MPU605012getRotationXEv>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff6c 	bl	8000534 <__aeabi_i2d>
 800165c:	a31e      	add	r3, pc, #120	; (adr r3, 80016d8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x138>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7ff f8fb 	bl	800085c <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff faa3 	bl	8000bb8 <__aeabi_d2f>
 8001672:	4602      	mov	r2, r0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	611a      	str	r2, [r3, #16]
	d.gyroY = g_mpu.getRotationY()/16.4;
 8001678:	481a      	ldr	r0, [pc, #104]	; (80016e4 <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 800167a:	f001 f911 	bl	80028a0 <_ZN7MPU605012getRotationYEv>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff57 	bl	8000534 <__aeabi_i2d>
 8001686:	a314      	add	r3, pc, #80	; (adr r3, 80016d8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x138>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f8e6 	bl	800085c <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa8e 	bl	8000bb8 <__aeabi_d2f>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	615a      	str	r2, [r3, #20]
	d.gyroZ = g_mpu.getRotationZ()/16.4;
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <_Z15MPU_GetDMPValueR10DMP_data_t+0x144>)
 80016a4:	f001 f917 	bl	80028d6 <_ZN7MPU605012getRotationZEv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff42 	bl	8000534 <__aeabi_i2d>
 80016b0:	a309      	add	r3, pc, #36	; (adr r3, 80016d8 <_Z15MPU_GetDMPValueR10DMP_data_t+0x138>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7ff f8d1 	bl	800085c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa79 	bl	8000bb8 <__aeabi_d2f>
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]

	return status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	66666666 	.word	0x66666666
 80016dc:	40306666 	.word	0x40306666
 80016e0:	20000250 	.word	0x20000250
 80016e4:	2000027c 	.word	0x2000027c
 80016e8:	40d00000 	.word	0x40d00000

080016ec <_ZL10calibSetupv>:
 * @param 		-		None
 *
 * @return		-	 	None
 */
static void_t calibSetup(void_t)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	g_mpu.setXAccelOffset(0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <_ZL10calibSetupv+0x38>)
 80016f4:	f001 fa50 	bl	8002b98 <_ZN7MPU605015setXAccelOffsetEs>
	g_mpu.setYAccelOffset(0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <_ZL10calibSetupv+0x38>)
 80016fc:	f001 fa5d 	bl	8002bba <_ZN7MPU605015setYAccelOffsetEs>
	g_mpu.setZAccelOffset(0);
 8001700:	2100      	movs	r1, #0
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <_ZL10calibSetupv+0x38>)
 8001704:	f001 fa6a 	bl	8002bdc <_ZN7MPU605015setZAccelOffsetEs>
	g_mpu.setXGyroOffset(0);
 8001708:	2100      	movs	r1, #0
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <_ZL10calibSetupv+0x38>)
 800170c:	f001 fa77 	bl	8002bfe <_ZN7MPU605014setXGyroOffsetEs>
	g_mpu.setYGyroOffset(0);
 8001710:	2100      	movs	r1, #0
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <_ZL10calibSetupv+0x38>)
 8001714:	f001 fa84 	bl	8002c20 <_ZN7MPU605014setYGyroOffsetEs>
	g_mpu.setZGyroOffset(0);
 8001718:	2100      	movs	r1, #0
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <_ZL10calibSetupv+0x38>)
 800171c:	f001 fa91 	bl	8002c42 <_ZN7MPU605014setZGyroOffsetEs>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000027c 	.word	0x2000027c

08001728 <_ZL11meansensorsv>:
 *
 * @param 		-		None
 *
 * @return		-	 	None
 */
static void_t meansensors(void_t){
 8001728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800172c:	b09b      	sub	sp, #108	; 0x6c
 800172e:	af04      	add	r7, sp, #16
  i64_t idw_i = 0, idwBuff_ax=0, idwBuff_ay=0, idwBuff_az=0, idwBuff_gx=0, idwBuff_gy=0, idwBuff_gz=0;
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9c7 2308 	strd	r2, r3, [r7, #32]

  while (idw_i < (g_iwBuffersize+101)){
 8001784:	4b77      	ldr	r3, [pc, #476]	; (8001964 <_ZL11meansensorsv+0x23c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3365      	adds	r3, #101	; 0x65
 800178a:	4618      	mov	r0, r3
 800178c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001794:	4282      	cmp	r2, r0
 8001796:	418b      	sbcs	r3, r1
 8001798:	f280 80df 	bge.w	800195a <_ZL11meansensorsv+0x232>
    // read raw accel/gyro measurements from device
    g_mpu.getMotion6(&g_iwAx, &g_iwAy, &g_iwAz, &g_iwGx, &g_iwGy, &g_iwGz);
 800179c:	4b72      	ldr	r3, [pc, #456]	; (8001968 <_ZL11meansensorsv+0x240>)
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	4b72      	ldr	r3, [pc, #456]	; (800196c <_ZL11meansensorsv+0x244>)
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	4b72      	ldr	r3, [pc, #456]	; (8001970 <_ZL11meansensorsv+0x248>)
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	4b72      	ldr	r3, [pc, #456]	; (8001974 <_ZL11meansensorsv+0x24c>)
 80017aa:	4a73      	ldr	r2, [pc, #460]	; (8001978 <_ZL11meansensorsv+0x250>)
 80017ac:	4973      	ldr	r1, [pc, #460]	; (800197c <_ZL11meansensorsv+0x254>)
 80017ae:	4874      	ldr	r0, [pc, #464]	; (8001980 <_ZL11meansensorsv+0x258>)
 80017b0:	f000 ffb3 	bl	800271a <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>

    if (idw_i>100 && idw_i<=(g_iwBuffersize+100)){ //First 100 measures are discarded
 80017b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017b8:	2a65      	cmp	r2, #101	; 0x65
 80017ba:	f173 0300 	sbcs.w	r3, r3, #0
 80017be:	db67      	blt.n	8001890 <_ZL11meansensorsv+0x168>
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <_ZL11meansensorsv+0x23c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3364      	adds	r3, #100	; 0x64
 80017c6:	4618      	mov	r0, r3
 80017c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017d0:	4290      	cmp	r0, r2
 80017d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80017d6:	db5b      	blt.n	8001890 <_ZL11meansensorsv+0x168>
      idwBuff_ax = idwBuff_ax + g_iwAx;
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <_ZL11meansensorsv+0x254>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	b218      	sxth	r0, r3
 80017e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017e8:	eb12 0800 	adds.w	r8, r2, r0
 80017ec:	eb43 0901 	adc.w	r9, r3, r1
 80017f0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
      idwBuff_ay = idwBuff_ay + g_iwAy;
 80017f4:	4b60      	ldr	r3, [pc, #384]	; (8001978 <_ZL11meansensorsv+0x250>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	b218      	sxth	r0, r3
 80017fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001800:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001804:	eb12 0a00 	adds.w	sl, r2, r0
 8001808:	eb43 0b01 	adc.w	fp, r3, r1
 800180c:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
      idwBuff_az = idwBuff_az + g_iwAz;
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <_ZL11meansensorsv+0x24c>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	b218      	sxth	r0, r3
 8001818:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800181c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001820:	1816      	adds	r6, r2, r0
 8001822:	61be      	str	r6, [r7, #24]
 8001824:	414b      	adcs	r3, r1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800182c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      idwBuff_gx = idwBuff_gx + g_iwGx;
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <_ZL11meansensorsv+0x248>)
 8001832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001836:	b218      	sxth	r0, r3
 8001838:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800183c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001840:	1816      	adds	r6, r2, r0
 8001842:	613e      	str	r6, [r7, #16]
 8001844:	414b      	adcs	r3, r1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800184c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      idwBuff_gy = idwBuff_gy + g_iwGy;
 8001850:	4b46      	ldr	r3, [pc, #280]	; (800196c <_ZL11meansensorsv+0x244>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	b218      	sxth	r0, r3
 8001858:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800185c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001860:	1816      	adds	r6, r2, r0
 8001862:	60be      	str	r6, [r7, #8]
 8001864:	414b      	adcs	r3, r1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      idwBuff_gz = idwBuff_gz + g_iwGz;
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <_ZL11meansensorsv+0x240>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	b218      	sxth	r0, r3
 8001878:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800187c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001880:	1816      	adds	r6, r2, r0
 8001882:	603e      	str	r6, [r7, #0]
 8001884:	414b      	adcs	r3, r1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800188c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    if (idw_i == (g_iwBuffersize + 100)){
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <_ZL11meansensorsv+0x23c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3364      	adds	r3, #100	; 0x64
 8001896:	4618      	mov	r0, r3
 8001898:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800189c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018a0:	428b      	cmp	r3, r1
 80018a2:	bf08      	it	eq
 80018a4:	4282      	cmpeq	r2, r0
 80018a6:	d14d      	bne.n	8001944 <_ZL11meansensorsv+0x21c>
    	g_iwMean_ax = idwBuff_ax / g_iwBuffersize;
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <_ZL11meansensorsv+0x23c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018b6:	f7ff f9cf 	bl	8000c58 <__aeabi_ldivmod>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <_ZL11meansensorsv+0x25c>)
 80018c0:	601a      	str	r2, [r3, #0]
    	g_iwMean_ay = idwBuff_ay / g_iwBuffersize;
 80018c2:	4b28      	ldr	r3, [pc, #160]	; (8001964 <_ZL11meansensorsv+0x23c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018d0:	f7ff f9c2 	bl	8000c58 <__aeabi_ldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <_ZL11meansensorsv+0x260>)
 80018da:	601a      	str	r2, [r3, #0]
    	g_iwMean_az = idwBuff_az / g_iwBuffersize;
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <_ZL11meansensorsv+0x23c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80018ea:	f7ff f9b5 	bl	8000c58 <__aeabi_ldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <_ZL11meansensorsv+0x264>)
 80018f4:	601a      	str	r2, [r3, #0]
    	g_iwMean_gx = idwBuff_gx / g_iwBuffersize;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <_ZL11meansensorsv+0x23c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001900:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001904:	f7ff f9a8 	bl	8000c58 <__aeabi_ldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <_ZL11meansensorsv+0x268>)
 800190e:	601a      	str	r2, [r3, #0]
    	g_iwMean_gy = idwBuff_gy / g_iwBuffersize;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <_ZL11meansensorsv+0x23c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800191a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800191e:	f7ff f99b 	bl	8000c58 <__aeabi_ldivmod>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <_ZL11meansensorsv+0x26c>)
 8001928:	601a      	str	r2, [r3, #0]
    	g_iwMean_gz = idwBuff_gz / g_iwBuffersize;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <_ZL11meansensorsv+0x23c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001934:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001938:	f7ff f98e 	bl	8000c58 <__aeabi_ldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_ZL11meansensorsv+0x270>)
 8001942:	601a      	str	r2, [r3, #0]
    }
    idw_i++;
 8001944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001948:	1c54      	adds	r4, r2, #1
 800194a:	f143 0500 	adc.w	r5, r3, #0
 800194e:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
    HAL_Delay(2); //Needed so we don't get repeated measures
 8001952:	2002      	movs	r0, #2
 8001954:	f001 fe2c 	bl	80035b0 <HAL_Delay>
  while (idw_i < (g_iwBuffersize+101)){
 8001958:	e714      	b.n	8001784 <_ZL11meansensorsv+0x5c>
  }
}
 800195a:	bf00      	nop
 800195c:	375c      	adds	r7, #92	; 0x5c
 800195e:	46bd      	mov	sp, r7
 8001960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001964:	20000000 	.word	0x20000000
 8001968:	200002a0 	.word	0x200002a0
 800196c:	2000029e 	.word	0x2000029e
 8001970:	2000029c 	.word	0x2000029c
 8001974:	2000029a 	.word	0x2000029a
 8001978:	20000298 	.word	0x20000298
 800197c:	20000296 	.word	0x20000296
 8001980:	2000027c 	.word	0x2000027c
 8001984:	200002a4 	.word	0x200002a4
 8001988:	200002a8 	.word	0x200002a8
 800198c:	200002ac 	.word	0x200002ac
 8001990:	200002b0 	.word	0x200002b0
 8001994:	200002b4 	.word	0x200002b4
 8001998:	200002b8 	.word	0x200002b8

0800199c <_ZL11calibrationv>:
 *
 * @param 		-		None
 *
 * @return		-	 	None
 */
static void_t calibration(void_t){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	g_iwAx_offset =- g_iwMean_ax / 8;
 80019a2:	4b97      	ldr	r3, [pc, #604]	; (8001c00 <_ZL11calibrationv+0x264>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da00      	bge.n	80019ac <_ZL11calibrationv+0x10>
 80019aa:	3307      	adds	r3, #7
 80019ac:	10db      	asrs	r3, r3, #3
 80019ae:	425b      	negs	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <_ZL11calibrationv+0x268>)
 80019b4:	601a      	str	r2, [r3, #0]
	g_iwAy_offset =- g_iwMean_ay / 8;
 80019b6:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <_ZL11calibrationv+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da00      	bge.n	80019c0 <_ZL11calibrationv+0x24>
 80019be:	3307      	adds	r3, #7
 80019c0:	10db      	asrs	r3, r3, #3
 80019c2:	425b      	negs	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b91      	ldr	r3, [pc, #580]	; (8001c0c <_ZL11calibrationv+0x270>)
 80019c8:	601a      	str	r2, [r3, #0]
	g_iwAz_offset = (16384 - g_iwMean_az) / 8;
 80019ca:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <_ZL11calibrationv+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <_ZL11calibrationv+0x3c>
 80019d6:	3307      	adds	r3, #7
 80019d8:	10db      	asrs	r3, r3, #3
 80019da:	461a      	mov	r2, r3
 80019dc:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <_ZL11calibrationv+0x278>)
 80019de:	601a      	str	r2, [r3, #0]

	g_iwGx_offset =- g_iwMean_gx / 4;
 80019e0:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <_ZL11calibrationv+0x27c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <_ZL11calibrationv+0x4e>
 80019e8:	3303      	adds	r3, #3
 80019ea:	109b      	asrs	r3, r3, #2
 80019ec:	425b      	negs	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b8a      	ldr	r3, [pc, #552]	; (8001c1c <_ZL11calibrationv+0x280>)
 80019f2:	601a      	str	r2, [r3, #0]
	g_iwGy_offset =- g_iwMean_gy / 4;
 80019f4:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <_ZL11calibrationv+0x284>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <_ZL11calibrationv+0x62>
 80019fc:	3303      	adds	r3, #3
 80019fe:	109b      	asrs	r3, r3, #2
 8001a00:	425b      	negs	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <_ZL11calibrationv+0x288>)
 8001a06:	601a      	str	r2, [r3, #0]
	g_iwGz_offset =- g_iwMean_gz / 4;
 8001a08:	4b87      	ldr	r3, [pc, #540]	; (8001c28 <_ZL11calibrationv+0x28c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da00      	bge.n	8001a12 <_ZL11calibrationv+0x76>
 8001a10:	3303      	adds	r3, #3
 8001a12:	109b      	asrs	r3, r3, #2
 8001a14:	425b      	negs	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b84      	ldr	r3, [pc, #528]	; (8001c2c <_ZL11calibrationv+0x290>)
 8001a1a:	601a      	str	r2, [r3, #0]
  while (1){
    i32_t iwReady = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
    g_mpu.setXAccelOffset(g_iwAx_offset);
 8001a20:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <_ZL11calibrationv+0x268>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	4881      	ldr	r0, [pc, #516]	; (8001c30 <_ZL11calibrationv+0x294>)
 8001a2a:	f001 f8b5 	bl	8002b98 <_ZN7MPU605015setXAccelOffsetEs>
    g_mpu.setYAccelOffset(g_iwAy_offset);
 8001a2e:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <_ZL11calibrationv+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4619      	mov	r1, r3
 8001a36:	487e      	ldr	r0, [pc, #504]	; (8001c30 <_ZL11calibrationv+0x294>)
 8001a38:	f001 f8bf 	bl	8002bba <_ZN7MPU605015setYAccelOffsetEs>
    g_mpu.setZAccelOffset(g_iwAz_offset);
 8001a3c:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <_ZL11calibrationv+0x278>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	487a      	ldr	r0, [pc, #488]	; (8001c30 <_ZL11calibrationv+0x294>)
 8001a46:	f001 f8c9 	bl	8002bdc <_ZN7MPU605015setZAccelOffsetEs>

    g_mpu.setXGyroOffset(g_iwGx_offset);
 8001a4a:	4b74      	ldr	r3, [pc, #464]	; (8001c1c <_ZL11calibrationv+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	4877      	ldr	r0, [pc, #476]	; (8001c30 <_ZL11calibrationv+0x294>)
 8001a54:	f001 f8d3 	bl	8002bfe <_ZN7MPU605014setXGyroOffsetEs>
    g_mpu.setYGyroOffset(g_iwGy_offset);
 8001a58:	4b72      	ldr	r3, [pc, #456]	; (8001c24 <_ZL11calibrationv+0x288>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4873      	ldr	r0, [pc, #460]	; (8001c30 <_ZL11calibrationv+0x294>)
 8001a62:	f001 f8dd 	bl	8002c20 <_ZN7MPU605014setYGyroOffsetEs>
    g_mpu.setZGyroOffset(g_iwGz_offset);
 8001a66:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <_ZL11calibrationv+0x290>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4870      	ldr	r0, [pc, #448]	; (8001c30 <_ZL11calibrationv+0x294>)
 8001a70:	f001 f8e7 	bl	8002c42 <_ZN7MPU605014setZGyroOffsetEs>

    meansensors();
 8001a74:	f7ff fe58 	bl	8001728 <_ZL11meansensorsv>
    if (abs(g_iwMean_ax) <= g_iwAcel_deadzone) iwReady++;
 8001a78:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <_ZL11calibrationv+0x264>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fab7 	bl	8000ff0 <_ZSt3absl>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <_ZL11calibrationv+0x298>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	bfd4      	ite	le
 8001a8c:	2301      	movle	r3, #1
 8001a8e:	2300      	movgt	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <_ZL11calibrationv+0x102>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	e00a      	b.n	8001ab4 <_ZL11calibrationv+0x118>
    else g_iwAx_offset = g_iwAx_offset - g_iwMean_ax / g_iwAcel_deadzone;
 8001a9e:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <_ZL11calibrationv+0x268>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <_ZL11calibrationv+0x264>)
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <_ZL11calibrationv+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fb91 f3f3 	sdiv	r3, r1, r3
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <_ZL11calibrationv+0x268>)
 8001ab2:	6013      	str	r3, [r2, #0]

    if (abs(g_iwMean_ay) <= g_iwAcel_deadzone) iwReady++;
 8001ab4:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <_ZL11calibrationv+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa99 	bl	8000ff0 <_ZSt3absl>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <_ZL11calibrationv+0x298>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	bfd4      	ite	le
 8001ac8:	2301      	movle	r3, #1
 8001aca:	2300      	movgt	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <_ZL11calibrationv+0x13e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	e00a      	b.n	8001af0 <_ZL11calibrationv+0x154>
    else g_iwAy_offset = g_iwAy_offset-g_iwMean_ay / g_iwAcel_deadzone;
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <_ZL11calibrationv+0x270>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <_ZL11calibrationv+0x26c>)
 8001ae0:	6819      	ldr	r1, [r3, #0]
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <_ZL11calibrationv+0x298>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fb91 f3f3 	sdiv	r3, r1, r3
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <_ZL11calibrationv+0x270>)
 8001aee:	6013      	str	r3, [r2, #0]

    if (abs(16384-g_iwMean_az) <= g_iwAcel_deadzone) iwReady++;
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <_ZL11calibrationv+0x274>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fa79 	bl	8000ff0 <_ZSt3absl>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <_ZL11calibrationv+0x298>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	bfd4      	ite	le
 8001b08:	2301      	movle	r3, #1
 8001b0a:	2300      	movgt	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <_ZL11calibrationv+0x17e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	e00c      	b.n	8001b34 <_ZL11calibrationv+0x198>
    else g_iwAz_offset = g_iwAz_offset + (16384 - g_iwMean_az)/g_iwAcel_deadzone;
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <_ZL11calibrationv+0x274>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f5c3 4280 	rsb	r2, r3, #16384	; 0x4000
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <_ZL11calibrationv+0x298>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <_ZL11calibrationv+0x278>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <_ZL11calibrationv+0x278>)
 8001b32:	6013      	str	r3, [r2, #0]

    if (abs(g_iwMean_gx)<=g_iwGiro_deadzone) iwReady++;
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <_ZL11calibrationv+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fa59 	bl	8000ff0 <_ZSt3absl>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <_ZL11calibrationv+0x29c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	bfd4      	ite	le
 8001b48:	2301      	movle	r3, #1
 8001b4a:	2300      	movgt	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <_ZL11calibrationv+0x1be>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3301      	adds	r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	e00b      	b.n	8001b72 <_ZL11calibrationv+0x1d6>
    else g_iwGx_offset = g_iwGx_offset - g_iwMean_gx / (g_iwGiro_deadzone + 1);
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <_ZL11calibrationv+0x280>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <_ZL11calibrationv+0x27c>)
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <_ZL11calibrationv+0x29c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	fb91 f3f3 	sdiv	r3, r1, r3
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <_ZL11calibrationv+0x280>)
 8001b70:	6013      	str	r3, [r2, #0]

    if (abs(g_iwMean_gy)<=g_iwGiro_deadzone) iwReady++;
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <_ZL11calibrationv+0x284>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fa3a 	bl	8000ff0 <_ZSt3absl>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <_ZL11calibrationv+0x29c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	bfd4      	ite	le
 8001b86:	2301      	movle	r3, #1
 8001b88:	2300      	movgt	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <_ZL11calibrationv+0x1fc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3301      	adds	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	e00b      	b.n	8001bb0 <_ZL11calibrationv+0x214>
    else g_iwGy_offset = g_iwGy_offset - g_iwMean_gy / (g_iwGiro_deadzone + 1);
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <_ZL11calibrationv+0x288>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <_ZL11calibrationv+0x284>)
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <_ZL11calibrationv+0x29c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	fb91 f3f3 	sdiv	r3, r1, r3
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <_ZL11calibrationv+0x288>)
 8001bae:	6013      	str	r3, [r2, #0]

    if (abs(g_iwMean_gz)<=g_iwGiro_deadzone) iwReady++;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <_ZL11calibrationv+0x28c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fa1b 	bl	8000ff0 <_ZSt3absl>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <_ZL11calibrationv+0x29c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	bfd4      	ite	le
 8001bc4:	2301      	movle	r3, #1
 8001bc6:	2300      	movgt	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <_ZL11calibrationv+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	e00b      	b.n	8001bee <_ZL11calibrationv+0x252>
    else g_iwGz_offset=g_iwGz_offset-g_iwMean_gz / (g_iwGiro_deadzone+1);
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <_ZL11calibrationv+0x290>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_ZL11calibrationv+0x28c>)
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <_ZL11calibrationv+0x29c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	fb91 f3f3 	sdiv	r3, r1, r3
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <_ZL11calibrationv+0x290>)
 8001bec:	6013      	str	r3, [r2, #0]

    if (iwReady==6) break;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d000      	beq.n	8001bf6 <_ZL11calibrationv+0x25a>
  }
 8001bf4:	e712      	b.n	8001a1c <_ZL11calibrationv+0x80>
    if (iwReady==6) break;
 8001bf6:	bf00      	nop
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200002a4 	.word	0x200002a4
 8001c04:	200002c0 	.word	0x200002c0
 8001c08:	200002a8 	.word	0x200002a8
 8001c0c:	200002c4 	.word	0x200002c4
 8001c10:	200002ac 	.word	0x200002ac
 8001c14:	200002c8 	.word	0x200002c8
 8001c18:	200002b0 	.word	0x200002b0
 8001c1c:	200002cc 	.word	0x200002cc
 8001c20:	200002b4 	.word	0x200002b4
 8001c24:	200002d0 	.word	0x200002d0
 8001c28:	200002b8 	.word	0x200002b8
 8001c2c:	200002d4 	.word	0x200002d4
 8001c30:	2000027c 	.word	0x2000027c
 8001c34:	20000004 	.word	0x20000004
 8001c38:	20000008 	.word	0x20000008

08001c3c <_ZL21calibration_caloffsetv>:
 * @param 		-		None
 *
 * @return		-	 	None
 */
static void_t calibration_caloffset(void_t)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	if(g_iwState == 0)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <_ZL21calibration_caloffsetv+0x22>
	{
		meansensors();
 8001c48:	f7ff fd6e 	bl	8001728 <_ZL11meansensorsv>
		g_iwState++;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c54:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8001c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5a:	f001 fca9 	bl	80035b0 <HAL_Delay>
	}
	if(g_iwState == 1)
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10a      	bne.n	8001c7c <_ZL21calibration_caloffsetv+0x40>
	{
		calibration();
 8001c66:	f7ff fe99 	bl	800199c <_ZL11calibrationv>
		g_iwState++;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c72:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8001c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c78:	f001 fc9a 	bl	80035b0 <HAL_Delay>
	}
	if(g_iwState == 2)
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <_ZL21calibration_caloffsetv+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d101      	bne.n	8001c88 <_ZL21calibration_caloffsetv+0x4c>
	{
		meansensors();
 8001c84:	f7ff fd50 	bl	8001728 <_ZL11meansensorsv>
	}
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200002bc 	.word	0x200002bc

08001c90 <_Z41__static_initialization_and_destruction_0ii>:
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d113      	bne.n	8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10e      	bne.n	8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x38>
Quaternion g_q;           // [w, x, y, z]         quaternion container
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001cac:	f7ff f9ae 	bl	800100c <_ZN10QuaternionC1Ev>
VectorInt16 g_Aa;         // [x, y, z]            accel sensor measurements
 8001cb0:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001cb2:	f7ff f9c6 	bl	8001042 <_ZN11VectorInt16C1Ev>
VectorInt16 g_AaReal;     // [x, y, z]            gravity-free accel sensor measurements
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001cb8:	f7ff f9c3 	bl	8001042 <_ZN11VectorInt16C1Ev>
VectorFloat g_gravity;    // [x, y, z]            gravity vector
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001cbe:	f7ff f9d4 	bl	800106a <_ZN11VectorFloatC1Ev>
MPU6050 g_mpu;
 8001cc2:	4807      	ldr	r0, [pc, #28]	; (8001ce0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001cc4:	f000 fc66 	bl	8002594 <_ZN7MPU6050C1Ev>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000250 	.word	0x20000250
 8001cd4:	20000260 	.word	0x20000260
 8001cd8:	20000268 	.word	0x20000268
 8001cdc:	20000270 	.word	0x20000270
 8001ce0:	2000027c 	.word	0x2000027c

08001ce4 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff ffcf 	bl	8001c90 <_Z41__static_initialization_and_destruction_0ii>
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <main>:
Quaternion_t q;
YPRAngle_t   y;
Accel_gyro_t a;
DMP_data_t d;
int main(void)
{
 8001cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af06      	add	r7, sp, #24

	HAL_Init();
 8001cfc:	f001 fbe6 	bl	80034cc <HAL_Init>

	SystemClock_Config();
 8001d00:	f000 f898 	bl	8001e34 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 8001d04:	f000 f9cc 	bl	80020a0 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8001d08:	f000 f972 	bl	8001ff0 <_ZL19MX_USART2_UART_Initv>
	MX_I2C3_Init();
 8001d0c:	f000 f93c 	bl	8001f88 <_ZL12MX_I2C3_Initv>
	MX_I2C1_Init();
 8001d10:	f000 f906 	bl	8001f20 <_Z12MX_I2C1_Initv>
	sprintf(data,"Calibrating...\r\n");
 8001d14:	493f      	ldr	r1, [pc, #252]	; (8001e14 <main+0x120>)
 8001d16:	4840      	ldr	r0, [pc, #256]	; (8001e18 <main+0x124>)
 8001d18:	f004 fd12 	bl	8006740 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001d1c:	483e      	ldr	r0, [pc, #248]	; (8001e18 <main+0x124>)
 8001d1e:	f7fe fa5f 	bl	80001e0 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	2364      	movs	r3, #100	; 0x64
 8001d28:	493b      	ldr	r1, [pc, #236]	; (8001e18 <main+0x124>)
 8001d2a:	483c      	ldr	r0, [pc, #240]	; (8001e1c <main+0x128>)
 8001d2c:	f003 fcb5 	bl	800569a <HAL_UART_Transmit>
	if(MPU_Init(&hi2c1) == MPU_FAIL)
 8001d30:	483b      	ldr	r0, [pc, #236]	; (8001e20 <main+0x12c>)
 8001d32:	f7ff fb59 	bl	80013e8 <_Z8MPU_InitP17I2C_HandleTypeDef>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00f      	beq.n	8001d66 <main+0x72>
	{
		sprintf(data,"MPU Init fail\r\n");
 8001d46:	4937      	ldr	r1, [pc, #220]	; (8001e24 <main+0x130>)
 8001d48:	4833      	ldr	r0, [pc, #204]	; (8001e18 <main+0x124>)
 8001d4a:	f004 fcf9 	bl	8006740 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001d4e:	4832      	ldr	r0, [pc, #200]	; (8001e18 <main+0x124>)
 8001d50:	f7fe fa46 	bl	80001e0 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	492f      	ldr	r1, [pc, #188]	; (8001e18 <main+0x124>)
 8001d5c:	482f      	ldr	r0, [pc, #188]	; (8001e1c <main+0x128>)
 8001d5e:	f003 fc9c 	bl	800569a <HAL_UART_Transmit>
		return 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e051      	b.n	8001e0a <main+0x116>
	}
	sprintf(data,"Calibration successful\r\n");
 8001d66:	4930      	ldr	r1, [pc, #192]	; (8001e28 <main+0x134>)
 8001d68:	482b      	ldr	r0, [pc, #172]	; (8001e18 <main+0x124>)
 8001d6a:	f004 fce9 	bl	8006740 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001d6e:	482a      	ldr	r0, [pc, #168]	; (8001e18 <main+0x124>)
 8001d70:	f7fe fa36 	bl	80001e0 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	2364      	movs	r3, #100	; 0x64
 8001d7a:	4927      	ldr	r1, [pc, #156]	; (8001e18 <main+0x124>)
 8001d7c:	4827      	ldr	r0, [pc, #156]	; (8001e1c <main+0x128>)
 8001d7e:	f003 fc8c 	bl	800569a <HAL_UART_Transmit>
	u8_t status;
	while (1)
	{
		status = MPU_GetDMPValue(d);
 8001d82:	482a      	ldr	r0, [pc, #168]	; (8001e2c <main+0x138>)
 8001d84:	f7ff fc0c 	bl	80015a0 <_Z15MPU_GetDMPValueR10DMP_data_t>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
		if(status == READ_MPU_SUCCESS)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d135      	bne.n	8001dfe <main+0x10a>
//			sprintf(data,"DMP:  %.2f,  %.2f, %.2f, %.2f, %.2f, %.2f\r\n", d.accelX, d.accelY, d.accelZ, d.gyroX, d.gyroY, d.gyroZ);
//			HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);

//			sprintf(data,"DMP:  %.2f,  %.2f, %.2f, %.2f, %.2f, %.2f\r\n", a.accelX, a.accelY, a.accelZ, a.gyroX, a.gyroY, a.gyroZ);
//			HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
			sprintf(data,"DMP:  %.2f,  %.2f, %.2f, %.2f\r\n",d.qw, d.qx, d.qy, d.qz);
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <main+0x138>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_f2d>
 8001d9c:	4682      	mov	sl, r0
 8001d9e:	468b      	mov	fp, r1
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <main+0x138>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbd7 	bl	8000558 <__aeabi_f2d>
 8001daa:	4604      	mov	r4, r0
 8001dac:	460d      	mov	r5, r1
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <main+0x138>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd0 	bl	8000558 <__aeabi_f2d>
 8001db8:	4680      	mov	r8, r0
 8001dba:	4689      	mov	r9, r1
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <main+0x138>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dd2:	e9cd 4500 	strd	r4, r5, [sp]
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	465b      	mov	r3, fp
 8001dda:	4915      	ldr	r1, [pc, #84]	; (8001e30 <main+0x13c>)
 8001ddc:	480e      	ldr	r0, [pc, #56]	; (8001e18 <main+0x124>)
 8001dde:	f004 fcaf 	bl	8006740 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 100);
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <main+0x124>)
 8001de4:	f7fe f9fc 	bl	80001e0 <strlen>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2364      	movs	r3, #100	; 0x64
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <main+0x124>)
 8001df0:	480a      	ldr	r0, [pc, #40]	; (8001e1c <main+0x128>)
 8001df2:	f003 fc52 	bl	800569a <HAL_UART_Transmit>
			HAL_Delay(100);
 8001df6:	2064      	movs	r0, #100	; 0x64
 8001df8:	f001 fbda 	bl	80035b0 <HAL_Delay>
 8001dfc:	e7c1      	b.n	8001d82 <main+0x8e>
		}
		else
		{
			if(status == READ_MPU_I2C_LOST)
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d1be      	bne.n	8001d82 <main+0x8e>
			{
				MX_I2C1_Init();
 8001e04:	f000 f88c 	bl	8001f20 <_Z12MX_I2C1_Initv>
		status = MPU_GetDMPValue(d);
 8001e08:	e7bb      	b.n	8001d82 <main+0x8e>
			}
		}
	}
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e14:	08008a08 	.word	0x08008a08
 8001e18:	200003c4 	.word	0x200003c4
 8001e1c:	20000380 	.word	0x20000380
 8001e20:	200002d8 	.word	0x200002d8
 8001e24:	08008a1c 	.word	0x08008a1c
 8001e28:	08008a2c 	.word	0x08008a2c
 8001e2c:	200003f8 	.word	0x200003f8
 8001e30:	08008a48 	.word	0x08008a48

08001e34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	; 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2230      	movs	r2, #48	; 0x30
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 ff48 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <_Z18SystemClock_Configv+0xe4>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <_Z18SystemClock_Configv+0xe4>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <_Z18SystemClock_Configv+0xe4>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <_Z18SystemClock_Configv+0xe8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <_Z18SystemClock_Configv+0xe8>)
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <_Z18SystemClock_Configv+0xe8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 ff56 	bl	8004d70 <HAL_RCC_OscConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001ed4:	f000 f944 	bl	8002160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed8:	230f      	movs	r3, #15
 8001eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001edc:	2302      	movs	r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 f9b3 	bl	8005260 <HAL_RCC_ClockConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001f0a:	f000 f929 	bl	8002160 <Error_Handler>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3750      	adds	r7, #80	; 0x50
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000

08001f20 <_Z12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f26:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <_Z12MX_I2C1_Initv+0x60>)
 8001f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <_Z12MX_I2C1_Initv+0x64>)
 8001f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <_Z12MX_I2C1_Initv+0x5c>)
 8001f5e:	f001 fde1 	bl	8003b24 <HAL_I2C_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <_Z12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001f72:	f000 f8f5 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
//  I2Cdev_init(&hi2c1);
  /* USER CODE END I2C1_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200002d8 	.word	0x200002d8
 8001f80:	40005400 	.word	0x40005400
 8001f84:	00061a80 	.word	0x00061a80

08001f88 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <_ZL12MX_I2C3_Initv+0x60>)
 8001f90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <_ZL12MX_I2C3_Initv+0x64>)
 8001f96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001faa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fc6:	f001 fdad 	bl	8003b24 <HAL_I2C_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8001fda:	f000 f8c1 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
//  I2Cdev_init(&hi2c3);
  /* USER CODE END I2C3_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000032c 	.word	0x2000032c
 8001fe8:	40005c00 	.word	0x40005c00
 8001fec:	000186a0 	.word	0x000186a0

08001ff0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ffc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002028:	f003 faea 	bl	8005600 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800203c:	f000 f890 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000380 	.word	0x20000380
 8002048:	40004400 	.word	0x40004400

0800204c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x38>)
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_EXTI_IRQHandler+0x2e>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800206c:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x38>)
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f807 	bl	8002088 <HAL_GPIO_EXTI_Callback>
  }
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40013c00 	.word	0x40013c00

08002088 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
	MPU_dmpDataReady();
 8002092:	f7ff f99d 	bl	80013d0 <_Z16MPU_dmpDataReadyv>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a26      	ldr	r2, [pc, #152]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <_ZL12MX_GPIO_Initv+0xb8>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002126:	2320      	movs	r3, #32
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800212a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <_ZL12MX_GPIO_Initv+0xbc>)
 800213c:	f001 fb6e 	bl	800381c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2017      	movs	r0, #23
 8002146:	f001 fb32 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800214a:	2017      	movs	r0, #23
 800214c:	f001 fb4b 	bl	80037e6 <HAL_NVIC_EnableIRQ>

}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	40020400 	.word	0x40020400

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	e7fe      	b.n	8002168 <Error_Handler+0x8>
	...

0800216c <_Z11I2Cdev_initP17I2C_HandleTypeDef>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <_Z11I2Cdev_initP17I2C_HandleTypeDef+0x1c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000520 	.word	0x20000520

0800218c <_Z14I2Cdev_readBithhhPht>:
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	460b      	mov	r3, r1
 800219a:	71bb      	strb	r3, [r7, #6]
 800219c:	4613      	mov	r3, r2
 800219e:	717b      	strb	r3, [r7, #5]
	uint8_t b;
	uint8_t count = I2Cdev_readByte(devAddr, regAddr, &b, timeout);
 80021a0:	8b3b      	ldrh	r3, [r7, #24]
 80021a2:	f107 020e 	add.w	r2, r7, #14
 80021a6:	79b9      	ldrb	r1, [r7, #6]
 80021a8:	79f8      	ldrb	r0, [r7, #7]
 80021aa:	f000 f856 	bl	800225a <_Z15I2Cdev_readBytehhPht>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
	*data = b & (1 << bitNum);
 80021b2:	797b      	ldrb	r3, [r7, #5]
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	b25a      	sxtb	r2, r3
 80021bc:	7bbb      	ldrb	r3, [r7, #14]
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
	return count;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_Z15I2Cdev_readBitshhhhPht>:
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4604      	mov	r4, r0
 80021dc:	4608      	mov	r0, r1
 80021de:	4611      	mov	r1, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	4623      	mov	r3, r4
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	4603      	mov	r3, r0
 80021e8:	71bb      	strb	r3, [r7, #6]
 80021ea:	460b      	mov	r3, r1
 80021ec:	717b      	strb	r3, [r7, #5]
 80021ee:	4613      	mov	r3, r2
 80021f0:	713b      	strb	r3, [r7, #4]
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
   uint8_t count, b;
   if ((count = I2Cdev_readByte(devAddr, regAddr, &b, timeout)) != 0)
 80021f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021f4:	f107 020d 	add.w	r2, r7, #13
 80021f8:	79b9      	ldrb	r1, [r7, #6]
 80021fa:	79f8      	ldrb	r0, [r7, #7]
 80021fc:	f000 f82d 	bl	800225a <_Z15I2Cdev_readBytehhPht>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01d      	beq.n	8002250 <_Z15I2Cdev_readBitshhhhPht+0x7c>
   {
	   uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8002214:	793b      	ldrb	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	7979      	ldrb	r1, [r7, #5]
 8002220:	793b      	ldrb	r3, [r7, #4]
 8002222:	1acb      	subs	r3, r1, r3
 8002224:	3301      	adds	r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	73bb      	strb	r3, [r7, #14]
	   b &= mask;
 800222c:	7b7a      	ldrb	r2, [r7, #13]
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	4013      	ands	r3, r2
 8002232:	b2db      	uxtb	r3, r3
 8002234:	737b      	strb	r3, [r7, #13]
	   b >>= (bitStart - length + 1);
 8002236:	7b7b      	ldrb	r3, [r7, #13]
 8002238:	4619      	mov	r1, r3
 800223a:	797a      	ldrb	r2, [r7, #5]
 800223c:	793b      	ldrb	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	3301      	adds	r3, #1
 8002242:	fa41 f303 	asr.w	r3, r1, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	737b      	strb	r3, [r7, #13]
	   *data = b;
 800224a:	7b7a      	ldrb	r2, [r7, #13]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	701a      	strb	r2, [r3, #0]
   }
   return count;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}

0800225a <_Z15I2Cdev_readBytehhPht>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af02      	add	r7, sp, #8
 8002260:	603a      	str	r2, [r7, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	460b      	mov	r3, r1
 800226a:	71bb      	strb	r3, [r7, #6]
 800226c:	4613      	mov	r3, r2
 800226e:	80bb      	strh	r3, [r7, #4]
	 return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 8002270:	79b9      	ldrb	r1, [r7, #6]
 8002272:	79f8      	ldrb	r0, [r7, #7]
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	f000 f806 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <_Z16I2Cdev_readByteshhhPht>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	460b      	mov	r3, r1
 800229a:	71bb      	strb	r3, [r7, #6]
 800229c:	4613      	mov	r3, r2
 800229e:	717b      	strb	r3, [r7, #5]
	  uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80022a0:	8b3b      	ldrh	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <_Z16I2Cdev_readByteshhhPht+0x1e>
 80022a6:	8b3b      	ldrh	r3, [r7, #24]
 80022a8:	e001      	b.n	80022ae <_Z16I2Cdev_readByteshhhPht+0x22>
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	81fb      	strh	r3, [r7, #14]

	  HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <_Z16I2Cdev_readByteshhhPht+0x78>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	b299      	uxth	r1, r3
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	1dba      	adds	r2, r7, #6
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	f001 fd72 	bl	8003dac <HAL_I2C_Master_Transmit>
	  if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <_Z16I2Cdev_readByteshhhPht+0x78>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b299      	uxth	r1, r3
 80022d4:	797b      	ldrb	r3, [r7, #5]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	89fb      	ldrh	r3, [r7, #14]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	f001 fe62 	bl	8003fa8 <HAL_I2C_Master_Receive>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <_Z16I2Cdev_readByteshhhPht+0x6c>
 80022f4:	797b      	ldrb	r3, [r7, #5]
 80022f6:	e000      	b.n	80022fa <_Z16I2Cdev_readByteshhhPht+0x6e>
	  return -1;
 80022f8:	23ff      	movs	r3, #255	; 0xff
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000520 	.word	0x20000520

08002308 <_Z15I2Cdev_writeBithhhh>:
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	4604      	mov	r4, r0
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	4603      	mov	r3, r0
 800231c:	71bb      	strb	r3, [r7, #6]
 800231e:	460b      	mov	r3, r1
 8002320:	717b      	strb	r3, [r7, #5]
 8002322:	4613      	mov	r3, r2
 8002324:	713b      	strb	r3, [r7, #4]
	//first reading registery value
	uint8_t b;
	I2Cdev_readByte(devAddr, regAddr, &b, I2Cdev_readTimeout);
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <_Z15I2Cdev_writeBithhhh+0x7c>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f107 020f 	add.w	r2, r7, #15
 800232e:	79b9      	ldrb	r1, [r7, #6]
 8002330:	79f8      	ldrb	r0, [r7, #7]
 8002332:	f7ff ff92 	bl	800225a <_Z15I2Cdev_readBytehhPht>
	b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8002336:	793b      	ldrb	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <_Z15I2Cdev_writeBithhhh+0x4a>
 800233c:	797b      	ldrb	r3, [r7, #5]
 800233e:	2201      	movs	r2, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	b25a      	sxtb	r2, r3
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b25b      	sxtb	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e00b      	b.n	800236a <_Z15I2Cdev_writeBithhhh+0x62>
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	2201      	movs	r2, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	b25b      	sxtb	r3, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	b25a      	sxtb	r2, r3
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	b25b      	sxtb	r3, r3
 8002364:	4013      	ands	r3, r2
 8002366:	b25b      	sxtb	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	73fb      	strb	r3, [r7, #15]
	return I2Cdev_writeByte(devAddr, regAddr, b);
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	79b9      	ldrb	r1, [r7, #6]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f85f 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	bf00      	nop
 8002384:	2000000c 	.word	0x2000000c

08002388 <_Z16I2Cdev_writeBitshhhhh>:
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	4603      	mov	r3, r0
 800239c:	71bb      	strb	r3, [r7, #6]
 800239e:	460b      	mov	r3, r1
 80023a0:	717b      	strb	r3, [r7, #5]
 80023a2:	4613      	mov	r3, r2
 80023a4:	713b      	strb	r3, [r7, #4]
  // 00011100 mask byte
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value
	uint8_t b;
	if (I2Cdev_readByte(devAddr, regAddr, &b, 100) != 0)
 80023a6:	f107 020e 	add.w	r2, r7, #14
 80023aa:	79b9      	ldrb	r1, [r7, #6]
 80023ac:	79f8      	ldrb	r0, [r7, #7]
 80023ae:	2364      	movs	r3, #100	; 0x64
 80023b0:	f7ff ff53 	bl	800225a <_Z15I2Cdev_readBytehhPht>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d033      	beq.n	800242c <_Z16I2Cdev_writeBitshhhhh+0xa4>
	{
		uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80023c4:	793b      	ldrb	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	7979      	ldrb	r1, [r7, #5]
 80023d0:	793b      	ldrb	r3, [r7, #4]
 80023d2:	1acb      	subs	r3, r1, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	73fb      	strb	r3, [r7, #15]
		data <<= (bitStart - length + 1); // shift data into correct position
 80023dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023e0:	7979      	ldrb	r1, [r7, #5]
 80023e2:	793b      	ldrb	r3, [r7, #4]
 80023e4:	1acb      	subs	r3, r1, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	f887 3020 	strb.w	r3, [r7, #32]
		data &= mask; // zero all non-important bits in data
 80023f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4013      	ands	r3, r2
 80023f8:	f887 3020 	strb.w	r3, [r7, #32]
		b &= ~(mask); // zero all important bits in existing byte
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	43db      	mvns	r3, r3
 8002402:	b25a      	sxtb	r2, r3
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4013      	ands	r3, r2
 800240a:	b25b      	sxtb	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	73bb      	strb	r3, [r7, #14]
		b |= data; // combine data with existing byte
 8002410:	7bba      	ldrb	r2, [r7, #14]
 8002412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002416:	4313      	orrs	r3, r2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	73bb      	strb	r3, [r7, #14]
		return I2Cdev_writeByte(devAddr, regAddr, b);
 800241c:	7bba      	ldrb	r2, [r7, #14]
 800241e:	79b9      	ldrb	r1, [r7, #6]
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f807 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
 8002428:	4603      	mov	r3, r0
 800242a:	e000      	b.n	800242e <_Z16I2Cdev_writeBitshhhhh+0xa6>
	}
	else
	{
		return 0;
 800242c:	2300      	movs	r3, #0
	}
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}

08002436 <_Z16I2Cdev_writeBytehhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	460b      	mov	r3, r1
 8002442:	71bb      	strb	r3, [r7, #6]
 8002444:	4613      	mov	r3, r2
 8002446:	717b      	strb	r3, [r7, #5]
	return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 8002448:	1d7b      	adds	r3, r7, #5
 800244a:	79b9      	ldrb	r1, [r7, #6]
 800244c:	79f8      	ldrb	r0, [r7, #7]
 800244e:	2201      	movs	r2, #1
 8002450:	f000 f81a 	bl	8002488 <_Z17I2Cdev_writeByteshhhPh>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_Z16I2Cdev_writeWordhht>:
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	460b      	mov	r3, r1
 800246a:	71bb      	strb	r3, [r7, #6]
 800246c:	4613      	mov	r3, r2
 800246e:	80bb      	strh	r3, [r7, #4]
	return I2Cdev_writeWords(devAddr, regAddr, 1, &data);
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	79b9      	ldrb	r1, [r7, #6]
 8002474:	79f8      	ldrb	r0, [r7, #7]
 8002476:	2201      	movs	r2, #1
 8002478:	f000 f832 	bl	80024e0 <_Z17I2Cdev_writeWordshhhPt>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <_Z17I2Cdev_writeByteshhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af04      	add	r7, sp, #16
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	460b      	mov	r3, r1
 8002496:	71bb      	strb	r3, [r7, #6]
 8002498:	4613      	mov	r3, r2
 800249a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <_Z17I2Cdev_writeByteshhhPh+0x54>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	b299      	uxth	r1, r3
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	797b      	ldrb	r3, [r7, #5]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80024b4:	9402      	str	r4, [sp, #8]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2301      	movs	r3, #1
 80024be:	f001 ff99 	bl	80043f4 <HAL_I2C_Mem_Write>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b29b      	uxth	r3, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	20000520 	.word	0x20000520

080024e0 <_Z17I2Cdev_writeWordshhhPt>:
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* pData)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af04      	add	r7, sp, #16
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
 80024ec:	460b      	mov	r3, r1
 80024ee:	71bb      	strb	r3, [r7, #6]
 80024f0:	4613      	mov	r3, r2
 80024f2:	717b      	strb	r3, [r7, #5]
	uint8_t i;
  for (i = 0; i < length; i++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	797b      	ldrb	r3, [r7, #5]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d219      	bcs.n	8002534 <_Z17I2Cdev_writeWordshhhPt+0x54>
	sendBuf[2*i] = (uint8_t) (pData[i] >> 8);
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	4413      	add	r3, r2
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	121a      	asrs	r2, r3, #8
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	b2d1      	uxtb	r1, r2
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <_Z17I2Cdev_writeWordshhhPt+0xac>)
 8002514:	54d1      	strb	r1, [r2, r3]
	sendBuf[1+2*i] = (uint8_t) (pData[i] >> 0);
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	3301      	adds	r3, #1
 8002526:	b2d1      	uxtb	r1, r2
 8002528:	4a18      	ldr	r2, [pc, #96]	; (800258c <_Z17I2Cdev_writeWordshhhPt+0xac>)
 800252a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e7e1      	b.n	80024f8 <_Z17I2Cdev_writeWordshhhPt+0x18>
  }
  while(HAL_I2C_Mem_Write(I2Cdev_hi2c,devAddr << 1,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length*2,I2CDLY) != HAL_OK){
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <_Z17I2Cdev_writeWordshhhPt+0xb0>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	b29b      	uxth	r3, r3
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	b299      	uxth	r1, r3
 8002540:	79bb      	ldrb	r3, [r7, #6]
 8002542:	b29a      	uxth	r2, r3
 8002544:	797b      	ldrb	r3, [r7, #5]
 8002546:	b29b      	uxth	r3, r3
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	2401      	movs	r4, #1
 800254e:	9402      	str	r4, [sp, #8]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <_Z17I2Cdev_writeWordshhhPt+0xac>)
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	f001 ff4c 	bl	80043f4 <HAL_I2C_Mem_Write>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <_Z17I2Cdev_writeWordshhhPt+0x92>
	  return -1;
 800256c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002570:	e008      	b.n	8002584 <_Z17I2Cdev_writeWordshhhPt+0xa4>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8002572:	2301      	movs	r3, #1
 8002574:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	b29b      	uxth	r3, r3

}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	20000420 	.word	0x20000420
 8002590:	20000520 	.word	0x20000520

08002594 <_ZN7MPU6050C1Ev>:
#include "../MPU6050/MPU6050.h"

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2268      	movs	r2, #104	; 0x68
 80025a0:	719a      	strb	r2, [r3, #6]
}
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80025b8:	2101      	movs	r1, #1
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa06 	bl	80029cc <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80025c0:	2100      	movs	r1, #0
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f843 	bl	800264e <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80025c8:	2100      	movs	r1, #0
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f852 	bl	8002674 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80025d0:	2100      	movs	r1, #0
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9e9 	bl	80029aa <_ZN7MPU605015setSleepEnabledEb>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	799b      	ldrb	r3, [r3, #6]
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	2119      	movs	r1, #25
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff1e 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af02      	add	r7, sp, #8
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7998      	ldrb	r0, [r3, #6]
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2303      	movs	r3, #3
 8002618:	2205      	movs	r2, #5
 800261a:	211a      	movs	r1, #26
 800261c:	f7ff feb4 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af02      	add	r7, sp, #8
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7998      	ldrb	r0, [r3, #6]
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2303      	movs	r3, #3
 800263e:	2202      	movs	r2, #2
 8002640:	211a      	movs	r1, #26
 8002642:	f7ff fea1 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af02      	add	r7, sp, #8
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7998      	ldrb	r0, [r3, #6]
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2302      	movs	r3, #2
 8002664:	2204      	movs	r2, #4
 8002666:	211b      	movs	r1, #27
 8002668:	f7ff fe8e 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af02      	add	r7, sp, #8
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7998      	ldrb	r0, [r3, #6]
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2302      	movs	r3, #2
 800268a:	2204      	movs	r2, #4
 800268c:	211c      	movs	r1, #28
 800268e:	f7ff fe7b 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
 80026a6:	4613      	mov	r3, r2
 80026a8:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d80d      	bhi.n	80026cc <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev_writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7998      	ldrb	r0, [r3, #6]
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	461a      	mov	r2, r3
 80026b8:	0052      	lsls	r2, r2, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3325      	adds	r3, #37	; 0x25
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	78ba      	ldrb	r2, [r7, #2]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7ff feb6 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
 80026ca:	e000      	b.n	80026ce <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 80026cc:	bf00      	nop
}
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	799b      	ldrb	r3, [r3, #6]
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	2138      	movs	r1, #56	; 0x38
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fea4 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
    I2Cdev_readByte(devAddr, MPU6050_RA_INT_STATUS, buffer, 0);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7998      	ldrb	r0, [r3, #6]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	1dda      	adds	r2, r3, #7
 8002706:	2300      	movs	r3, #0
 8002708:	213a      	movs	r1, #58	; 0x3a
 800270a:	f7ff fda6 	bl	800225a <_Z15I2Cdev_readBytehhPht>
    return buffer[0];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	79db      	ldrb	r3, [r3, #7]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer, 0);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	7998      	ldrb	r0, [r3, #6]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3307      	adds	r3, #7
 8002730:	2200      	movs	r2, #0
 8002732:	9200      	str	r2, [sp, #0]
 8002734:	220e      	movs	r2, #14
 8002736:	213b      	movs	r1, #59	; 0x3b
 8002738:	f7ff fda8 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	79db      	ldrb	r3, [r3, #7]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b21a      	sxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	7a1b      	ldrb	r3, [r3, #8]
 8002748:	b21b      	sxth	r3, r3
 800274a:	4313      	orrs	r3, r2
 800274c:	b21a      	sxth	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	801a      	strh	r2, [r3, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	7a5b      	ldrb	r3, [r3, #9]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	b21a      	sxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	7a9b      	ldrb	r3, [r3, #10]
 800275e:	b21b      	sxth	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b21a      	sxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	801a      	strh	r2, [r3, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7adb      	ldrb	r3, [r3, #11]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b21a      	sxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	7b1b      	ldrb	r3, [r3, #12]
 8002774:	b21b      	sxth	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b21a      	sxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	801a      	strh	r2, [r3, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	7bdb      	ldrb	r3, [r3, #15]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b21a      	sxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	7c1b      	ldrb	r3, [r3, #16]
 800278a:	b21b      	sxth	r3, r3
 800278c:	4313      	orrs	r3, r2
 800278e:	b21a      	sxth	r2, r3
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	801a      	strh	r2, [r3, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	7c5b      	ldrb	r3, [r3, #17]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21a      	sxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	7c9b      	ldrb	r3, [r3, #18]
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	801a      	strh	r2, [r3, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	7cdb      	ldrb	r3, [r3, #19]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	7d1b      	ldrb	r3, [r3, #20]
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	801a      	strh	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZN7MPU605016getAccelerationXEv>:
/** Get X-axis accelerometer reading.
 * @return X-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
int16_t MPU6050::getAccelerationX() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer, 0);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7998      	ldrb	r0, [r3, #6]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3307      	adds	r3, #7
 80027d8:	2200      	movs	r2, #0
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	213b      	movs	r1, #59	; 0x3b
 80027e0:	f7ff fd54 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	79db      	ldrb	r3, [r3, #7]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7a1b      	ldrb	r3, [r3, #8]
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b21b      	sxth	r3, r3
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZN7MPU605016getAccelerationYEv>:
/** Get Y-axis accelerometer reading.
 * @return Y-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_YOUT_H
 */
int16_t MPU6050::getAccelerationY() {
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af02      	add	r7, sp, #8
 8002804:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer, 0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7998      	ldrb	r0, [r3, #6]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3307      	adds	r3, #7
 800280e:	2200      	movs	r2, #0
 8002810:	9200      	str	r2, [sp, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	213d      	movs	r1, #61	; 0x3d
 8002816:	f7ff fd39 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	79db      	ldrb	r3, [r3, #7]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	b21a      	sxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7a1b      	ldrb	r3, [r3, #8]
 8002826:	b21b      	sxth	r3, r3
 8002828:	4313      	orrs	r3, r2
 800282a:	b21b      	sxth	r3, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN7MPU605016getAccelerationZEv>:
/** Get Z-axis accelerometer reading.
 * @return Z-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_ZOUT_H
 */
int16_t MPU6050::getAccelerationZ() {
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af02      	add	r7, sp, #8
 800283a:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer, 0);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7998      	ldrb	r0, [r3, #6]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3307      	adds	r3, #7
 8002844:	2200      	movs	r2, #0
 8002846:	9200      	str	r2, [sp, #0]
 8002848:	2202      	movs	r2, #2
 800284a:	213f      	movs	r1, #63	; 0x3f
 800284c:	f7ff fd1e 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	79db      	ldrb	r3, [r3, #7]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	b21a      	sxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7a1b      	ldrb	r3, [r3, #8]
 800285c:	b21b      	sxth	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b21b      	sxth	r3, r3
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_ZN7MPU605012getRotationXEv>:
/** Get X-axis gyroscope reading.
 * @return X-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_XOUT_H
 */
int16_t MPU6050::getRotationX() {
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af02      	add	r7, sp, #8
 8002870:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 2, buffer, 0);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7998      	ldrb	r0, [r3, #6]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3307      	adds	r3, #7
 800287a:	2200      	movs	r2, #0
 800287c:	9200      	str	r2, [sp, #0]
 800287e:	2202      	movs	r2, #2
 8002880:	2143      	movs	r1, #67	; 0x43
 8002882:	f7ff fd03 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	79db      	ldrb	r3, [r3, #7]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b21a      	sxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7a1b      	ldrb	r3, [r3, #8]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b21b      	sxth	r3, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_ZN7MPU605012getRotationYEv>:
/** Get Y-axis gyroscope reading.
 * @return Y-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_YOUT_H
 */
int16_t MPU6050::getRotationY() {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_GYRO_YOUT_H, 2, buffer, 0);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7998      	ldrb	r0, [r3, #6]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3307      	adds	r3, #7
 80028b0:	2200      	movs	r2, #0
 80028b2:	9200      	str	r2, [sp, #0]
 80028b4:	2202      	movs	r2, #2
 80028b6:	2145      	movs	r1, #69	; 0x45
 80028b8:	f7ff fce8 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	79db      	ldrb	r3, [r3, #7]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7a1b      	ldrb	r3, [r3, #8]
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b21b      	sxth	r3, r3
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZN7MPU605012getRotationZEv>:
/** Get Z-axis gyroscope reading.
 * @return Z-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_ZOUT_H
 */
int16_t MPU6050::getRotationZ() {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af02      	add	r7, sp, #8
 80028dc:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_GYRO_ZOUT_H, 2, buffer, 0);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7998      	ldrb	r0, [r3, #6]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3307      	adds	r3, #7
 80028e6:	2200      	movs	r2, #0
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	2202      	movs	r2, #2
 80028ec:	2147      	movs	r1, #71	; 0x47
 80028ee:	f7ff fccd 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	79db      	ldrb	r3, [r3, #7]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7a1b      	ldrb	r3, [r3, #8]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b21b      	sxth	r3, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7998      	ldrb	r0, [r3, #6]
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2206      	movs	r2, #6
 8002920:	216a      	movs	r1, #106	; 0x6a
 8002922:	f7ff fcf1 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7998      	ldrb	r0, [r3, #6]
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	2205      	movs	r2, #5
 8002942:	216a      	movs	r1, #106	; 0x6a
 8002944:	f7ff fce0 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7998      	ldrb	r0, [r3, #6]
 800295c:	2301      	movs	r3, #1
 800295e:	2202      	movs	r2, #2
 8002960:	216a      	movs	r1, #106	; 0x6a
 8002962:	f7ff fcd1 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7998      	ldrb	r0, [r3, #6]
 800297a:	2301      	movs	r3, #1
 800297c:	2201      	movs	r2, #1
 800297e:	216a      	movs	r1, #106	; 0x6a
 8002980:	f7ff fcc2 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7998      	ldrb	r0, [r3, #6]
 8002998:	2301      	movs	r3, #1
 800299a:	2207      	movs	r2, #7
 800299c:	216b      	movs	r1, #107	; 0x6b
 800299e:	f7ff fcb3 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7998      	ldrb	r0, [r3, #6]
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	2206      	movs	r2, #6
 80029be:	216b      	movs	r1, #107	; 0x6b
 80029c0:	f7ff fca2 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7998      	ldrb	r0, [r3, #6]
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2303      	movs	r3, #3
 80029e2:	2202      	movs	r2, #2
 80029e4:	216b      	movs	r1, #107	; 0x6b
 80029e6:	f7ff fccf 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer, 0);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7998      	ldrb	r0, [r3, #6]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3307      	adds	r3, #7
 8002a02:	2200      	movs	r2, #0
 8002a04:	9200      	str	r2, [sp, #0]
 8002a06:	2202      	movs	r2, #2
 8002a08:	2172      	movs	r1, #114	; 0x72
 8002a0a:	f7ff fc3f 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	79db      	ldrb	r3, [r3, #7]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7a1b      	ldrb	r3, [r3, #8]
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	b29b      	uxth	r3, r3
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev_readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer, 0);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71fb      	strb	r3, [r7, #7]
    I2Cdev_readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data, 0);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	7998      	ldrb	r0, [r3, #6]
 8002a3c:	79fa      	ldrb	r2, [r7, #7]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2174      	movs	r1, #116	; 0x74
 8002a46:	f7ff fc21 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	6078      	str	r0, [r7, #4]
    I2Cdev_readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer, 0);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7998      	ldrb	r0, [r3, #6]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3307      	adds	r3, #7
 8002a62:	2200      	movs	r2, #0
 8002a64:	9200      	str	r2, [sp, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f7ff fb8f 	bl	800218c <_Z14I2Cdev_readBithhhPht>
    return buffer[0];
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	79db      	ldrb	r3, [r3, #7]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7998      	ldrb	r0, [r3, #6]
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f7ff fc3a 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer, 0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7998      	ldrb	r0, [r3, #6]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3307      	adds	r3, #7
 8002aac:	2200      	movs	r2, #0
 8002aae:	9201      	str	r2, [sp, #4]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	2206      	movs	r2, #6
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f7ff fb8c 	bl	80021d4 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	79db      	ldrb	r3, [r3, #7]
 8002ac0:	b25b      	sxtb	r3, r3
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af02      	add	r7, sp, #8
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7998      	ldrb	r0, [r3, #6]
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2306      	movs	r3, #6
 8002ae0:	2206      	movs	r2, #6
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f7ff fc50 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer, 0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7998      	ldrb	r0, [r3, #6]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3307      	adds	r3, #7
 8002b00:	2200      	movs	r2, #0
 8002b02:	9201      	str	r2, [sp, #4]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2306      	movs	r3, #6
 8002b08:	2206      	movs	r2, #6
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	f7ff fb62 	bl	80021d4 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	79db      	ldrb	r3, [r3, #7]
 8002b14:	b25b      	sxtb	r3, r3
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7998      	ldrb	r0, [r3, #6]
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2306      	movs	r3, #6
 8002b34:	2206      	movs	r2, #6
 8002b36:	2101      	movs	r1, #1
 8002b38:	f7ff fc26 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer, 0);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7998      	ldrb	r0, [r3, #6]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3307      	adds	r3, #7
 8002b54:	2200      	movs	r2, #0
 8002b56:	9201      	str	r2, [sp, #4]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	2206      	movs	r2, #6
 8002b5e:	2102      	movs	r1, #2
 8002b60:	f7ff fb38 	bl	80021d4 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	79db      	ldrb	r3, [r3, #7]
 8002b68:	b25b      	sxtb	r3, r3
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af02      	add	r7, sp, #8
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7998      	ldrb	r0, [r3, #6]
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2306      	movs	r3, #6
 8002b88:	2206      	movs	r2, #6
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	f7ff fbfc 	bl	8002388 <_Z16I2Cdev_writeBitshhhhh>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	799b      	ldrb	r3, [r3, #6]
 8002ba8:	887a      	ldrh	r2, [r7, #2]
 8002baa:	2106      	movs	r1, #6
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fc56 	bl	800245e <_Z16I2Cdev_writeWordhht>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	799b      	ldrb	r3, [r3, #6]
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	2108      	movs	r1, #8
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fc45 	bl	800245e <_Z16I2Cdev_writeWordhht>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	799b      	ldrb	r3, [r3, #6]
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	210a      	movs	r1, #10
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fc34 	bl	800245e <_Z16I2Cdev_writeWordhht>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	799b      	ldrb	r3, [r3, #6]
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	2113      	movs	r1, #19
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fc23 	bl	800245e <_Z16I2Cdev_writeWordhht>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	799b      	ldrb	r3, [r3, #6]
 8002c30:	887a      	ldrh	r2, [r7, #2]
 8002c32:	2115      	movs	r1, #21
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fc12 	bl	800245e <_Z16I2Cdev_writeWordhht>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev_readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer, 0);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	807b      	strh	r3, [r7, #2]
    I2Cdev_writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	799b      	ldrb	r3, [r3, #6]
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	2117      	movs	r1, #23
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fc01 	bl	800245e <_Z16I2Cdev_writeWordhht>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev_readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer, 0);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7998      	ldrb	r0, [r3, #6]
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2207      	movs	r2, #7
 8002c78:	216a      	movs	r1, #106	; 0x6a
 8002c7a:	f7ff fb45 	bl	8002308 <_Z15I2Cdev_writeBithhhh>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZN7MPU605013setMemoryBankEhbb>:
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
}

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	4608      	mov	r0, r1
 8002c90:	4611      	mov	r1, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	4603      	mov	r3, r0
 8002c96:	70fb      	strb	r3, [r7, #3]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70bb      	strb	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002ca8:	787b      	ldrb	r3, [r7, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002cb6:	78bb      	ldrb	r3, [r7, #2]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc2:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	799b      	ldrb	r3, [r3, #6]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	216d      	movs	r1, #109	; 0x6d
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fbb2 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	216e      	movs	r1, #110	; 0x6e
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fba1 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_ZN7MPU605014readMemoryByteEv>:

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    I2Cdev_readByte(devAddr, MPU6050_RA_MEM_R_W, buffer, 0);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7998      	ldrb	r0, [r3, #6]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	1dda      	adds	r2, r3, #7
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	216f      	movs	r1, #111	; 0x6f
 8002d10:	f7ff faa3 	bl	800225a <_Z15I2Cdev_readBytehhPht>
    return buffer[0];
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	79db      	ldrb	r3, [r3, #7]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
            setMemoryBank(bank);
            setMemoryStartAddress(address);
        }
    }
}
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	460b      	mov	r3, r1
 8002d30:	80fb      	strh	r3, [r7, #6]
 8002d32:	4613      	mov	r3, r2
 8002d34:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002d36:	7979      	ldrb	r1, [r7, #5]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff ffa2 	bl	8002c86 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ffc6 	bl	8002cda <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer;
    uint8_t *progBuffer;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x40>
 8002d56:	2010      	movs	r0, #16
 8002d58:	f002 ff92 	bl	8005c80 <malloc>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002d60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x52>
 8002d68:	2010      	movs	r0, #16
 8002d6a:	f002 ff89 	bl	8005c80 <malloc>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002d72:	2300      	movs	r3, #0
 8002d74:	827b      	strh	r3, [r7, #18]
 8002d76:	8a7a      	ldrh	r2, [r7, #18]
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	f080 8091 	bcs.w	8002ea2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x182>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002d80:	2310      	movs	r3, #16
 8002d82:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002d84:	8a7a      	ldrh	r2, [r7, #18]
 8002d86:	7ffb      	ldrb	r3, [r7, #31]
 8002d88:	441a      	add	r2, r3
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dd05      	ble.n	8002d9c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x7c>
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	8a7b      	ldrh	r3, [r7, #18]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002d9c:	7ffa      	ldrb	r2, [r7, #31]
 8002d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002da2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002da6:	429a      	cmp	r2, r3
 8002da8:	dd03      	ble.n	8002db2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x92>
 8002daa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002dae:	425b      	negs	r3, r3
 8002db0:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002db2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d013      	beq.n	8002de2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xc2>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	747b      	strb	r3, [r7, #17]
 8002dbe:	7c7a      	ldrb	r2, [r7, #17]
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d211      	bcs.n	8002dea <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
 8002dc6:	8a7a      	ldrh	r2, [r7, #18]
 8002dc8:	7c7b      	ldrb	r3, [r7, #17]
 8002dca:	4413      	add	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	441a      	add	r2, r3
 8002dd0:	7c7b      	ldrb	r3, [r7, #17]
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	440b      	add	r3, r1
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	7c7b      	ldrb	r3, [r7, #17]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	747b      	strb	r3, [r7, #17]
 8002de0:	e7ed      	b.n	8002dbe <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9e>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002de2:	8a7b      	ldrh	r3, [r7, #18]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
        }

        I2Cdev_writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	7998      	ldrb	r0, [r3, #6]
 8002dee:	7ffa      	ldrb	r2, [r7, #31]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	216f      	movs	r1, #111	; 0x6f
 8002df4:	f7ff fb48 	bl	8002488 <_Z17I2Cdev_writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002df8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02c      	beq.n	8002e5a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d029      	beq.n	8002e5a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
            setMemoryBank(bank);
 8002e06:	7979      	ldrb	r1, [r7, #5]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff3a 	bl	8002c86 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e16:	4619      	mov	r1, r3
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff ff5e 	bl	8002cda <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev_readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer, 0);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	7998      	ldrb	r0, [r3, #6]
 8002e22:	7ffa      	ldrb	r2, [r7, #31]
 8002e24:	2300      	movs	r3, #0
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	216f      	movs	r1, #111	; 0x6f
 8002e2c:	f7ff fa2e 	bl	800228c <_Z16I2Cdev_readByteshhhPht>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002e30:	7ffb      	ldrb	r3, [r7, #31]
 8002e32:	461a      	mov	r2, r3
 8002e34:	69b9      	ldr	r1, [r7, #24]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f002 ff32 	bl	8005ca0 <memcmp>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002e42:	69b8      	ldr	r0, [r7, #24]
 8002e44:	f002 ff24 	bl	8005c90 <free>
                if (useProgMem) free(progBuffer);
 8002e48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x136>
 8002e50:	6978      	ldr	r0, [r7, #20]
 8002e52:	f002 ff1d 	bl	8005c90 <free>
                return false; // uh oh.
 8002e56:	2300      	movs	r3, #0
 8002e58:	e032      	b.n	8002ec0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	8a7b      	ldrh	r3, [r7, #18]
 8002e60:	4413      	add	r3, r2
 8002e62:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002e64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e68:	7ffb      	ldrb	r3, [r7, #31]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002e70:	8a7a      	ldrh	r2, [r7, #18]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f4bf af7e 	bcs.w	8002d76 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x56>
            if (address == 0) bank++;
 8002e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x168>
 8002e82:	797b      	ldrb	r3, [r7, #5]
 8002e84:	3301      	adds	r3, #1
 8002e86:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002e88:	7979      	ldrb	r1, [r7, #5]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff fef9 	bl	8002c86 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff ff1d 	bl	8002cda <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002ea0:	e769      	b.n	8002d76 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x56>
        }
    }
    if (verify) free(verifyBuffer);
 8002ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x190>
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	f002 fef0 	bl	8005c90 <free>
    if (useProgMem) free(progBuffer);
 8002eb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x19e>
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f002 fee9 	bl	8005c90 <free>
    return true;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	80fb      	strh	r3, [r7, #6]
 8002eda:	4613      	mov	r3, r2
 8002edc:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002ede:	7979      	ldrb	r1, [r7, #5]
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	7f3b      	ldrb	r3, [r7, #28]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	7e3b      	ldrb	r3, [r7, #24]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff ff14 	bl	8002d20 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b08c      	sub	sp, #48	; 0x30
 8002f06:	af04      	add	r7, sp, #16
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	461a      	mov	r2, r3
 8002f10:	460b      	mov	r3, r1
 8002f12:	80fb      	strh	r3, [r7, #6]
 8002f14:	4613      	mov	r3, r2
 8002f16:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer, success, special;
    uint16_t i, j;
    if (useProgMem) {
 8002f18:	797b      	ldrb	r3, [r7, #5]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x26>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002f1e:	2008      	movs	r0, #8
 8002f20:	f002 feae 	bl	8005c80 <malloc>
 8002f24:	4603      	mov	r3, r0
 8002f26:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8002f28:	2300      	movs	r3, #0
 8002f2a:	833b      	strh	r3, [r7, #24]
 8002f2c:	8b3a      	ldrh	r2, [r7, #24]
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f080 80a1 	bcs.w	8003078 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
        if (useProgMem) {
 8002f36:	797b      	ldrb	r3, [r7, #5]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d018      	beq.n	8002f6e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x6c>
            bank = pgm_read_byte(data + i++);
 8002f3c:	8b3b      	ldrh	r3, [r7, #24]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	833a      	strh	r2, [r7, #24]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8002f4c:	8b3b      	ldrh	r3, [r7, #24]
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	833a      	strh	r2, [r7, #24]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8002f5c:	8b3b      	ldrh	r3, [r7, #24]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	833a      	strh	r2, [r7, #24]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	74fb      	strb	r3, [r7, #19]
 8002f6c:	e017      	b.n	8002f9e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x9c>
        } else {
            bank = data[i++];
 8002f6e:	8b3b      	ldrh	r3, [r7, #24]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	833a      	strh	r2, [r7, #24]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 8002f7e:	8b3b      	ldrh	r3, [r7, #24]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	833a      	strh	r2, [r7, #24]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 8002f8e:	8b3b      	ldrh	r3, [r7, #24]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	833a      	strh	r2, [r7, #24]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d03a      	beq.n	800301a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x118>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8002fa4:	797b      	ldrb	r3, [r7, #5]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01d      	beq.n	8002fe6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe4>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d905      	bls.n	8002fbc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xba>
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	69f8      	ldr	r0, [r7, #28]
 8002fb6:	f003 fbab 	bl	8006710 <realloc>
 8002fba:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	82fb      	strh	r3, [r7, #22]
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8afa      	ldrh	r2, [r7, #22]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d211      	bcs.n	8002fee <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xec>
 8002fca:	8b3a      	ldrh	r2, [r7, #24]
 8002fcc:	8afb      	ldrh	r3, [r7, #22]
 8002fce:	4413      	add	r3, r2
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	8afb      	ldrh	r3, [r7, #22]
 8002fd6:	69f9      	ldr	r1, [r7, #28]
 8002fd8:	440b      	add	r3, r1
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	8afb      	ldrh	r3, [r7, #22]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	82fb      	strh	r3, [r7, #22]
 8002fe4:	e7ec      	b.n	8002fc0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
            } else {
                progBuffer = (uint8_t *)data + i;
 8002fe6:	8b3b      	ldrh	r3, [r7, #24]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	7d79      	ldrb	r1, [r7, #21]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	7d3b      	ldrb	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	460b      	mov	r3, r1
 8003002:	69f9      	ldr	r1, [r7, #28]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff fe8b 	bl	8002d20 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800300a:	4603      	mov	r3, r0
 800300c:	76fb      	strb	r3, [r7, #27]
            i += length;
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	b29a      	uxth	r2, r3
 8003012:	8b3b      	ldrh	r3, [r7, #24]
 8003014:	4413      	add	r3, r2
 8003016:	833b      	strh	r3, [r7, #24]
 8003018:	e022      	b.n	8003060 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 800301a:	797b      	ldrb	r3, [r7, #5]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x130>
                special = pgm_read_byte(data + i++);
 8003020:	8b3b      	ldrh	r3, [r7, #24]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	833a      	strh	r2, [r7, #24]
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4413      	add	r3, r2
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	76bb      	strb	r3, [r7, #26]
 8003030:	e007      	b.n	8003042 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x140>
            } else {
                special = data[i++];
 8003032:	8b3b      	ldrh	r3, [r7, #24]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	833a      	strh	r2, [r7, #24]
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 8003042:	7ebb      	ldrb	r3, [r7, #26]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d109      	bne.n	800305c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15a>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev_writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	799b      	ldrb	r3, [r3, #6]
 800304c:	2232      	movs	r2, #50	; 0x32
 800304e:	2138      	movs	r1, #56	; 0x38
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f9f0 	bl	8002436 <_Z16I2Cdev_writeBytehhh>

                success = true;
 8003056:	2301      	movs	r3, #1
 8003058:	76fb      	strb	r3, [r7, #27]
 800305a:	e001      	b.n	8003060 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
            } else {
                // unknown special command
                success = false;
 800305c:	2300      	movs	r3, #0
 800305e:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 8003060:	7efb      	ldrb	r3, [r7, #27]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f47f af62 	bne.w	8002f2c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
            if (useProgMem) free(progBuffer);
 8003068:	797b      	ldrb	r3, [r7, #5]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x172>
 800306e:	69f8      	ldr	r0, [r7, #28]
 8003070:	f002 fe0e 	bl	8005c90 <free>
            return false; // uh oh
 8003074:	2300      	movs	r3, #0
 8003076:	e006      	b.n	8003086 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x184>
        }
    }
    if (useProgMem) free(progBuffer);
 8003078:	797b      	ldrb	r3, [r7, #5]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x182>
 800307e:	69f8      	ldr	r0, [r7, #28]
 8003080:	f002 fe06 	bl	8005c90 <free>
    return true;
 8003084:	2301      	movs	r3, #1
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	4613      	mov	r3, r2
 800309a:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	2301      	movs	r3, #1
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff ff2d 	bl	8002f02 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev_readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer, 0);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	799b      	ldrb	r3, [r3, #6]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	2170      	movs	r1, #112	; 0x70
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f9b5 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev_readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer, 0);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	799b      	ldrb	r3, [r3, #6]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	2171      	movs	r1, #113	; 0x71
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f9a4 	bl	8002436 <_Z16I2Cdev_writeBytehhh>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_MspInit+0x4c>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <HAL_MspInit+0x4c>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_MspInit+0x4c>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_MspInit+0x4c>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_MspInit+0x4c>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_MspInit+0x4c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_I2C_MspInit+0x84>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d12c      	bne.n	80031c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_I2C_MspInit+0x88>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_I2C_MspInit+0x88>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_I2C_MspInit+0x88>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800318a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800318c:	2312      	movs	r3, #18
 800318e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003198:	2304      	movs	r3, #4
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	480c      	ldr	r0, [pc, #48]	; (80031d4 <HAL_I2C_MspInit+0x8c>)
 80031a4:	f000 fb3a 	bl	800381c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_I2C_MspInit+0x88>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_I2C_MspInit+0x88>)
 80031b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_I2C_MspInit+0x88>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40005400 	.word	0x40005400
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020400 	.word	0x40020400

080031d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <HAL_UART_MspInit+0x84>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d12b      	bne.n	8003252 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_UART_MspInit+0x88>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <HAL_UART_MspInit+0x88>)
 8003204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_UART_MspInit+0x88>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_UART_MspInit+0x88>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_UART_MspInit+0x88>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_UART_MspInit+0x88>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003232:	230c      	movs	r3, #12
 8003234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003242:	2307      	movs	r3, #7
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <HAL_UART_MspInit+0x8c>)
 800324e:	f000 fae5 	bl	800381c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003252:	bf00      	nop
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40004400 	.word	0x40004400
 8003260:	40023800 	.word	0x40023800
 8003264:	40020000 	.word	0x40020000

08003268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800326c:	e7fe      	b.n	800326c <NMI_Handler+0x4>

0800326e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <HardFault_Handler+0x4>

08003274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <MemManage_Handler+0x4>

0800327a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327e:	e7fe      	b.n	800327e <BusFault_Handler+0x4>

08003280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003284:	e7fe      	b.n	8003284 <UsageFault_Handler+0x4>

08003286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b4:	f000 f95c 	bl	8003570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80032c0:	2020      	movs	r0, #32
 80032c2:	f7fe fec3 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
	return 1;
 80032ce:	2301      	movs	r3, #1
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_kill>:

int _kill(int pid, int sig)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032e4:	f002 fca2 	bl	8005c2c <__errno>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2216      	movs	r2, #22
 80032ec:	601a      	str	r2, [r3, #0]
	return -1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_exit>:

void _exit (int status)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003302:	f04f 31ff 	mov.w	r1, #4294967295
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffe7 	bl	80032da <_kill>
	while (1) {}		/* Make sure we hang here */
 800330c:	e7fe      	b.n	800330c <_exit+0x12>

0800330e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e00a      	b.n	8003336 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003320:	f3af 8000 	nop.w
 8003324:	4601      	mov	r1, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	60ba      	str	r2, [r7, #8]
 800332c:	b2ca      	uxtb	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3301      	adds	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	dbf0      	blt.n	8003320 <_read+0x12>
	}

return len;
 800333e:	687b      	ldr	r3, [r7, #4]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e009      	b.n	800336e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	60ba      	str	r2, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	dbf1      	blt.n	800335a <_write+0x12>
	}
	return len;
 8003376:	687b      	ldr	r3, [r7, #4]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_close>:

int _close(int file)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033a8:	605a      	str	r2, [r3, #4]
	return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_isatty>:

int _isatty(int file)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	return 1;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
	return 0;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <_sbrk+0x5c>)
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <_sbrk+0x60>)
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <_sbrk+0x64>)
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <_sbrk+0x68>)
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <_sbrk+0x64>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d207      	bcs.n	8003428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003418:	f002 fc08 	bl	8005c2c <__errno>
 800341c:	4603      	mov	r3, r0
 800341e:	220c      	movs	r2, #12
 8003420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	e009      	b.n	800343c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	4a05      	ldr	r2, [pc, #20]	; (800344c <_sbrk+0x64>)
 8003438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20018000 	.word	0x20018000
 8003448:	00000400 	.word	0x00000400
 800344c:	20000524 	.word	0x20000524
 8003450:	20000548 	.word	0x20000548

08003454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <SystemInit+0x20>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <SystemInit+0x20>)
 8003460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800347c:	480d      	ldr	r0, [pc, #52]	; (80034b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800347e:	490e      	ldr	r1, [pc, #56]	; (80034b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003484:	e002      	b.n	800348c <LoopCopyDataInit>

08003486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348a:	3304      	adds	r3, #4

0800348c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800348c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003490:	d3f9      	bcc.n	8003486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003492:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003494:	4c0b      	ldr	r4, [pc, #44]	; (80034c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003498:	e001      	b.n	800349e <LoopFillZerobss>

0800349a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800349c:	3204      	adds	r2, #4

0800349e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a0:	d3fb      	bcc.n	800349a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034a2:	f7ff ffd7 	bl	8003454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034a6:	f002 fbc7 	bl	8005c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034aa:	f7fe fc23 	bl	8001cf4 <main>
  bx  lr    
 80034ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80034bc:	080096c0 	.word	0x080096c0
  ldr r2, =_sbss
 80034c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80034c4:	20000544 	.word	0x20000544

080034c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c8:	e7fe      	b.n	80034c8 <ADC_IRQHandler>
	...

080034cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_Init+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_Init+0x40>)
 80034d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_Init+0x40>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_Init+0x40>)
 80034e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_Init+0x40>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_Init+0x40>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f4:	2003      	movs	r0, #3
 80034f6:	f000 f94f 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034fa:	200f      	movs	r0, #15
 80034fc:	f000 f808 	bl	8003510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003500:	f7ff fdfa 	bl	80030f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023c00 	.word	0x40023c00

08003510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_InitTick+0x54>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_InitTick+0x58>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003526:	fbb3 f3f1 	udiv	r3, r3, r1
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f967 	bl	8003802 <HAL_SYSTICK_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e00e      	b.n	800355c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d80a      	bhi.n	800355a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003544:	2200      	movs	r2, #0
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f000 f92f 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003550:	4a06      	ldr	r2, [pc, #24]	; (800356c <HAL_InitTick+0x5c>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000010 	.word	0x20000010
 8003568:	20000018 	.word	0x20000018
 800356c:	20000014 	.word	0x20000014

08003570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_IncTick+0x20>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_IncTick+0x24>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4413      	add	r3, r2
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_IncTick+0x24>)
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000018 	.word	0x20000018
 8003594:	20000530 	.word	0x20000530

08003598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return uwTick;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_GetTick+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000530 	.word	0x20000530

080035b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7ff ffee 	bl	8003598 <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d005      	beq.n	80035d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_Delay+0x44>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035d6:	bf00      	nop
 80035d8:	f7ff ffde 	bl	8003598 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d8f7      	bhi.n	80035d8 <HAL_Delay+0x28>
  {
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000018 	.word	0x20000018

080035f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db0b      	blt.n	8003686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <__NVIC_EnableIRQ+0x38>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2001      	movs	r0, #1
 800367e:	fa00 f202 	lsl.w	r2, r0, r2
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db0a      	blt.n	80036c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	490c      	ldr	r1, [pc, #48]	; (80036e4 <__NVIC_SetPriority+0x4c>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c0:	e00a      	b.n	80036d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <__NVIC_SetPriority+0x50>)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3b04      	subs	r3, #4
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	440b      	add	r3, r1
 80036d6:	761a      	strb	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f1c3 0307 	rsb	r3, r3, #7
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf28      	it	cs
 800370a:	2304      	movcs	r3, #4
 800370c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3304      	adds	r3, #4
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <NVIC_EncodePriority+0x30>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b03      	subs	r3, #3
 800371a:	e000      	b.n	800371e <NVIC_EncodePriority+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	f04f 32ff 	mov.w	r2, #4294967295
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003734:	f04f 31ff 	mov.w	r1, #4294967295
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43d9      	mvns	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	4313      	orrs	r3, r2
         );
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff8e 	bl	8003698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff29 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff3e 	bl	8003640 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff8e 	bl	80036ec <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5d 	bl	8003698 <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff31 	bl	800365c <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e159      	b.n	8003aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	f040 8148 	bne.w	8003ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d005      	beq.n	800386e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	2b02      	cmp	r3, #2
 800386c:	d130      	bne.n	80038d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a4:	2201      	movs	r2, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 0201 	and.w	r2, r3, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d017      	beq.n	800390c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d123      	bne.n	8003960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	220f      	movs	r2, #15
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	08da      	lsrs	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3208      	adds	r2, #8
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0203 	and.w	r2, r3, #3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a2 	beq.w	8003ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b0:	6453      	str	r3, [r2, #68]	; 0x44
 80039b2:	4b54      	ldr	r3, [pc, #336]	; (8003b04 <HAL_GPIO_Init+0x2e8>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039be:	4a52      	ldr	r2, [pc, #328]	; (8003b08 <HAL_GPIO_Init+0x2ec>)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a49      	ldr	r2, [pc, #292]	; (8003b0c <HAL_GPIO_Init+0x2f0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_Init+0x202>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <HAL_GPIO_Init+0x2f4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_Init+0x1fe>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a47      	ldr	r2, [pc, #284]	; (8003b14 <HAL_GPIO_Init+0x2f8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_Init+0x1fa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a46      	ldr	r2, [pc, #280]	; (8003b18 <HAL_GPIO_Init+0x2fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_Init+0x1f6>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a45      	ldr	r2, [pc, #276]	; (8003b1c <HAL_GPIO_Init+0x300>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_Init+0x1f2>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	e008      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a0e:	2307      	movs	r3, #7
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x204>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f002 0203 	and.w	r2, r2, #3
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a30:	4935      	ldr	r1, [pc, #212]	; (8003b08 <HAL_GPIO_Init+0x2ec>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a62:	4a2f      	ldr	r2, [pc, #188]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8c:	4a24      	ldr	r2, [pc, #144]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003abc:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <HAL_GPIO_Init+0x304>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	f67f aea2 	bls.w	8003838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e12b      	b.n	8003d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fafc 	bl	8003148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b88:	f001 fd12 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a81      	ldr	r2, [pc, #516]	; (8003d98 <HAL_I2C_Init+0x274>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d807      	bhi.n	8003ba8 <HAL_I2C_Init+0x84>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a80      	ldr	r2, [pc, #512]	; (8003d9c <HAL_I2C_Init+0x278>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bf94      	ite	ls
 8003ba0:	2301      	movls	r3, #1
 8003ba2:	2300      	movhi	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e006      	b.n	8003bb6 <HAL_I2C_Init+0x92>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a7d      	ldr	r2, [pc, #500]	; (8003da0 <HAL_I2C_Init+0x27c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	bf94      	ite	ls
 8003bb0:	2301      	movls	r3, #1
 8003bb2:	2300      	movhi	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0e7      	b.n	8003d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a78      	ldr	r2, [pc, #480]	; (8003da4 <HAL_I2C_Init+0x280>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0c9b      	lsrs	r3, r3, #18
 8003bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a6a      	ldr	r2, [pc, #424]	; (8003d98 <HAL_I2C_Init+0x274>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d802      	bhi.n	8003bf8 <HAL_I2C_Init+0xd4>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	e009      	b.n	8003c0c <HAL_I2C_Init+0xe8>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	4a69      	ldr	r2, [pc, #420]	; (8003da8 <HAL_I2C_Init+0x284>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	495c      	ldr	r1, [pc, #368]	; (8003d98 <HAL_I2C_Init+0x274>)
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	d819      	bhi.n	8003c60 <HAL_I2C_Init+0x13c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1e59      	subs	r1, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3a:	1c59      	adds	r1, r3, #1
 8003c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c40:	400b      	ands	r3, r1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_I2C_Init+0x138>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e59      	subs	r1, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5a:	e051      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	e04f      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d111      	bne.n	8003c8c <HAL_I2C_Init+0x168>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e012      	b.n	8003cb2 <HAL_I2C_Init+0x18e>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	0099      	lsls	r1, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Init+0x196>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e022      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_I2C_Init+0x1bc>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e58      	subs	r0, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	440b      	add	r3, r1
 8003cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	e00f      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6809      	ldr	r1, [r1, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6911      	ldr	r1, [r2, #16]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68d2      	ldr	r2, [r2, #12]
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	000186a0 	.word	0x000186a0
 8003d9c:	001e847f 	.word	0x001e847f
 8003da0:	003d08ff 	.word	0x003d08ff
 8003da4:	431bde83 	.word	0x431bde83
 8003da8:	10624dd3 	.word	0x10624dd3

08003dac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	460b      	mov	r3, r1
 8003dba:	817b      	strh	r3, [r7, #10]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff fbea 	bl	8003598 <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	f040 80e0 	bne.w	8003f94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2319      	movs	r3, #25
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4970      	ldr	r1, [pc, #448]	; (8003fa0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fde8 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0d3      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2C_Master_Transmit+0x50>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0cc      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d007      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a50      	ldr	r2, [pc, #320]	; (8003fa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e64:	8979      	ldrh	r1, [r7, #10]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fbbc 	bl	80045e8 <I2C_MasterRequestWrite>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08d      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e90:	e066      	b.n	8003f60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6a39      	ldr	r1, [r7, #32]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fe62 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06b      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d11b      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0x188>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fe52 	bl	8004be2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d107      	bne.n	8003f5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e01a      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d194      	bne.n	8003e92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	; 0x30
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	817b      	strh	r3, [r7, #10]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff faec 	bl	8003598 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	f040 820b 	bne.w	80043e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2319      	movs	r3, #25
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	497c      	ldr	r1, [pc, #496]	; (80041cc <HAL_I2C_Master_Receive+0x224>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fcea 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e1fe      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2C_Master_Receive+0x50>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e1f7      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d007      	beq.n	800401e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	; 0x22
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2210      	movs	r2, #16
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a5c      	ldr	r2, [pc, #368]	; (80041d0 <HAL_I2C_Master_Receive+0x228>)
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004060:	8979      	ldrh	r1, [r7, #10]
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fb40 	bl	80046ec <I2C_MasterRequestRead>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1b8      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e18c      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d11b      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e16c      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11b      	bne.n	8004126 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	e14c      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800414c:	e138      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	2b03      	cmp	r3, #3
 8004154:	f200 80f1 	bhi.w	800433a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	2b01      	cmp	r3, #1
 800415e:	d123      	bne.n	80041a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fd7d 	bl	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e139      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a6:	e10b      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d14e      	bne.n	800424e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	4906      	ldr	r1, [pc, #24]	; (80041d4 <HAL_I2C_Master_Receive+0x22c>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fbfa 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e10e      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
 80041ca:	bf00      	nop
 80041cc:	00100002 	.word	0x00100002
 80041d0:	ffff0000 	.word	0xffff0000
 80041d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800424c:	e0b8      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2200      	movs	r2, #0
 8004256:	4966      	ldr	r1, [pc, #408]	; (80043f0 <HAL_I2C_Master_Receive+0x448>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fbab 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0bf      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	2200      	movs	r2, #0
 80042b2:	494f      	ldr	r1, [pc, #316]	; (80043f0 <HAL_I2C_Master_Receive+0x448>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fb7d 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e091      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004338:	e042      	b.n	80043c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fc90 	bl	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e04c      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d118      	bne.n	80043c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f47f aec2 	bne.w	800414e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e000      	b.n	80043e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
  }
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00010004 	.word	0x00010004

080043f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
 8004402:	4603      	mov	r3, r0
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	460b      	mov	r3, r1
 8004408:	813b      	strh	r3, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800440e:	f7ff f8c3 	bl	8003598 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	f040 80d9 	bne.w	80045d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2319      	movs	r3, #25
 8004428:	2201      	movs	r2, #1
 800442a:	496d      	ldr	r1, [pc, #436]	; (80045e0 <HAL_I2C_Mem_Write+0x1ec>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fac1 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
 800443a:	e0cc      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_I2C_Mem_Write+0x56>
 8004446:	2302      	movs	r3, #2
 8004448:	e0c5      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d007      	beq.n	8004470 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2221      	movs	r2, #33	; 0x21
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2240      	movs	r2, #64	; 0x40
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a4d      	ldr	r2, [pc, #308]	; (80045e4 <HAL_I2C_Mem_Write+0x1f0>)
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b2:	88f8      	ldrh	r0, [r7, #6]
 80044b4:	893a      	ldrh	r2, [r7, #8]
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4603      	mov	r3, r0
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f9e0 	bl	8004888 <I2C_RequestMemoryWrite>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d052      	beq.n	8004574 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e081      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fb42 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d107      	bne.n	80044fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06b      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d11b      	bne.n	8004574 <HAL_I2C_Mem_Write+0x180>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	2b00      	cmp	r3, #0
 8004542:	d017      	beq.n	8004574 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1aa      	bne.n	80044d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fb2e 	bl	8004be2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	2b04      	cmp	r3, #4
 8004592:	d107      	bne.n	80045a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e016      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	00100002 	.word	0x00100002
 80045e4:	ffff0000 	.word	0xffff0000

080045e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	460b      	mov	r3, r1
 80045f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d006      	beq.n	8004612 <I2C_MasterRequestWrite+0x2a>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d003      	beq.n	8004612 <I2C_MasterRequestWrite+0x2a>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004610:	d108      	bne.n	8004624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e00b      	b.n	800463c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	2b12      	cmp	r3, #18
 800462a:	d107      	bne.n	800463c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f9b3 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004662:	d103      	bne.n	800466c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e035      	b.n	80046dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004678:	d108      	bne.n	800468c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800467a:	897b      	ldrh	r3, [r7, #10]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004688:	611a      	str	r2, [r3, #16]
 800468a:	e01b      	b.n	80046c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800468c:	897b      	ldrh	r3, [r7, #10]
 800468e:	11db      	asrs	r3, r3, #7
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f063 030f 	orn	r3, r3, #15
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <I2C_MasterRequestWrite+0xfc>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f9d9 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e010      	b.n	80046dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046ba:	897b      	ldrh	r3, [r7, #10]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4907      	ldr	r1, [pc, #28]	; (80046e8 <I2C_MasterRequestWrite+0x100>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f9c9 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	00010008 	.word	0x00010008
 80046e8:	00010002 	.word	0x00010002

080046ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	460b      	mov	r3, r1
 80046fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d006      	beq.n	8004726 <I2C_MasterRequestRead+0x3a>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d003      	beq.n	8004726 <I2C_MasterRequestRead+0x3a>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004724:	d108      	bne.n	8004738 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e00b      	b.n	8004750 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	2b11      	cmp	r3, #17
 800473e:	d107      	bne.n	8004750 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f929 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004776:	d103      	bne.n	8004780 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e079      	b.n	8004878 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478c:	d108      	bne.n	80047a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e05f      	b.n	8004860 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047a0:	897b      	ldrh	r3, [r7, #10]
 80047a2:	11db      	asrs	r3, r3, #7
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f003 0306 	and.w	r3, r3, #6
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f063 030f 	orn	r3, r3, #15
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4930      	ldr	r1, [pc, #192]	; (8004880 <I2C_MasterRequestRead+0x194>)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f94f 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e054      	b.n	8004878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ce:	897b      	ldrh	r3, [r7, #10]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4929      	ldr	r1, [pc, #164]	; (8004884 <I2C_MasterRequestRead+0x198>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f93f 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e044      	b.n	8004878 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004812:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f8c7 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	d103      	bne.n	8004844 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e017      	b.n	8004878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004848:	897b      	ldrh	r3, [r7, #10]
 800484a:	11db      	asrs	r3, r3, #7
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f063 030e 	orn	r3, r3, #14
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4907      	ldr	r1, [pc, #28]	; (8004884 <I2C_MasterRequestRead+0x198>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f8fb 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	00010008 	.word	0x00010008
 8004884:	00010002 	.word	0x00010002

08004888 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4603      	mov	r3, r0
 8004898:	817b      	strh	r3, [r7, #10]
 800489a:	460b      	mov	r3, r1
 800489c:	813b      	strh	r3, [r7, #8]
 800489e:	4613      	mov	r3, r2
 80048a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f878 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d8:	d103      	bne.n	80048e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e05f      	b.n	80049a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	6a3a      	ldr	r2, [r7, #32]
 80048fa:	492d      	ldr	r1, [pc, #180]	; (80049b0 <I2C_RequestMemoryWrite+0x128>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f8b0 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e04c      	b.n	80049a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f91a 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2b04      	cmp	r3, #4
 8004938:	d107      	bne.n	800494a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e02b      	b.n	80049a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004954:	893b      	ldrh	r3, [r7, #8]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	611a      	str	r2, [r3, #16]
 800495e:	e021      	b.n	80049a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004960:	893b      	ldrh	r3, [r7, #8]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	b29b      	uxth	r3, r3
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004970:	6a39      	ldr	r1, [r7, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8f4 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b04      	cmp	r3, #4
 8004984:	d107      	bne.n	8004996 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e005      	b.n	80049a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800499a:	893b      	ldrh	r3, [r7, #8]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	00010002 	.word	0x00010002

080049b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c4:	e025      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fe fde3 	bl	8003598 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e023      	b.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10d      	bne.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	43da      	mvns	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	e00c      	b.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0b6      	beq.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a70:	e051      	b.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d123      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e046      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d021      	beq.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fe fd61 	bl	8003598 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d116      	bne.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e020      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10c      	bne.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e00b      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d18d      	bne.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e02d      	b.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8ce 	bl	8004d10 <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e02d      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d021      	beq.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fe fd07 	bl	8003598 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d116      	bne.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d1ca      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bee:	e02d      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f88d 	bl	8004d10 <I2C_IsAcknowledgeFailed>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e02d      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d021      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fe fcc6 	bl	8003598 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d1ca      	bne.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c70:	e042      	b.n	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d119      	bne.n	8004cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e029      	b.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fe fc70 	bl	8003598 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d116      	bne.n	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e007      	b.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d1b5      	bne.n	8004c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d11b      	bne.n	8004d60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e264      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d075      	beq.n	8004e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d8e:	4ba3      	ldr	r3, [pc, #652]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d00c      	beq.n	8004db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9a:	4ba0      	ldr	r3, [pc, #640]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d112      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da6:	4b9d      	ldr	r3, [pc, #628]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db2:	d10b      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	4b99      	ldr	r3, [pc, #612]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d05b      	beq.n	8004e78 <HAL_RCC_OscConfig+0x108>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d157      	bne.n	8004e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e23f      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCC_OscConfig+0x74>
 8004dd6:	4b91      	ldr	r3, [pc, #580]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a90      	ldr	r2, [pc, #576]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e01d      	b.n	8004e20 <HAL_RCC_OscConfig+0xb0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x98>
 8004dee:	4b8b      	ldr	r3, [pc, #556]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a8a      	ldr	r2, [pc, #552]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a87      	ldr	r2, [pc, #540]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e00b      	b.n	8004e20 <HAL_RCC_OscConfig+0xb0>
 8004e08:	4b84      	ldr	r3, [pc, #528]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a83      	ldr	r2, [pc, #524]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b81      	ldr	r3, [pc, #516]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a80      	ldr	r2, [pc, #512]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fe fbb6 	bl	8003598 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fe fbb2 	bl	8003598 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e204      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b76      	ldr	r3, [pc, #472]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0xc0>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fe fba2 	bl	8003598 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fe fb9e 	bl	8003598 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1f0      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	4b6c      	ldr	r3, [pc, #432]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0xe8>
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d063      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e86:	4b65      	ldr	r3, [pc, #404]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e92:	4b62      	ldr	r3, [pc, #392]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9e:	4b5f      	ldr	r3, [pc, #380]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d116      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x152>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e1c4      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec2:	4b56      	ldr	r3, [pc, #344]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4952      	ldr	r1, [pc, #328]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	e03a      	b.n	8004f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee0:	4b4f      	ldr	r3, [pc, #316]	; (8005020 <HAL_RCC_OscConfig+0x2b0>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7fe fb57 	bl	8003598 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eee:	f7fe fb53 	bl	8003598 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e1a5      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f00:	4b46      	ldr	r3, [pc, #280]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b43      	ldr	r3, [pc, #268]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4940      	ldr	r1, [pc, #256]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f22:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <HAL_RCC_OscConfig+0x2b0>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fe fb36 	bl	8003598 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fe fb32 	bl	8003598 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e184      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	4b36      	ldr	r3, [pc, #216]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d030      	beq.n	8004fbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b30      	ldr	r3, [pc, #192]	; (8005024 <HAL_RCC_OscConfig+0x2b4>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fe fb16 	bl	8003598 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fe fb12 	bl	8003598 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e164      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x200>
 8004f8e:	e015      	b.n	8004fbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f90:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_RCC_OscConfig+0x2b4>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f96:	f7fe faff 	bl	8003598 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f9e:	f7fe fafb 	bl	8003598 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e14d      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f0      	bne.n	8004f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a0 	beq.w	800510a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	4a0e      	ldr	r2, [pc, #56]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x2b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d121      	bne.n	800504a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_RCC_OscConfig+0x2b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a07      	ldr	r2, [pc, #28]	; (8005028 <HAL_RCC_OscConfig+0x2b8>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005012:	f7fe fac1 	bl	8003598 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	e011      	b.n	800503e <HAL_RCC_OscConfig+0x2ce>
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	42470000 	.word	0x42470000
 8005024:	42470e80 	.word	0x42470e80
 8005028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fe fab4 	bl	8003598 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e106      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	4b85      	ldr	r3, [pc, #532]	; (8005254 <HAL_RCC_OscConfig+0x4e4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d106      	bne.n	8005060 <HAL_RCC_OscConfig+0x2f0>
 8005052:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	4a80      	ldr	r2, [pc, #512]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6713      	str	r3, [r2, #112]	; 0x70
 800505e:	e01c      	b.n	800509a <HAL_RCC_OscConfig+0x32a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b05      	cmp	r3, #5
 8005066:	d10c      	bne.n	8005082 <HAL_RCC_OscConfig+0x312>
 8005068:	4b7b      	ldr	r3, [pc, #492]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a7a      	ldr	r2, [pc, #488]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
 8005074:	4b78      	ldr	r3, [pc, #480]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a77      	ldr	r2, [pc, #476]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
 8005080:	e00b      	b.n	800509a <HAL_RCC_OscConfig+0x32a>
 8005082:	4b75      	ldr	r3, [pc, #468]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	4a74      	ldr	r2, [pc, #464]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	6713      	str	r3, [r2, #112]	; 0x70
 800508e:	4b72      	ldr	r3, [pc, #456]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	4a71      	ldr	r2, [pc, #452]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d015      	beq.n	80050ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fe fa79 	bl	8003598 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fe fa75 	bl	8003598 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0c5      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c0:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ee      	beq.n	80050aa <HAL_RCC_OscConfig+0x33a>
 80050cc:	e014      	b.n	80050f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fe fa63 	bl	8003598 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f7fe fa5f 	bl	8003598 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e0af      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ec:	4b5a      	ldr	r3, [pc, #360]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1ee      	bne.n	80050d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fe:	4b56      	ldr	r3, [pc, #344]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	4a55      	ldr	r2, [pc, #340]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 809b 	beq.w	800524a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b08      	cmp	r3, #8
 800511e:	d05c      	beq.n	80051da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d141      	bne.n	80051ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005128:	4b4c      	ldr	r3, [pc, #304]	; (800525c <HAL_RCC_OscConfig+0x4ec>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fe fa33 	bl	8003598 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005136:	f7fe fa2f 	bl	8003598 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e081      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	019b      	lsls	r3, r3, #6
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	4937      	ldr	r1, [pc, #220]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCC_OscConfig+0x4ec>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fe fa08 	bl	8003598 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518c:	f7fe fa04 	bl	8003598 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e056      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519e:	4b2e      	ldr	r3, [pc, #184]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x41c>
 80051aa:	e04e      	b.n	800524a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_OscConfig+0x4ec>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b2:	f7fe f9f1 	bl	8003598 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fe f9ed 	bl	8003598 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e03f      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051cc:	4b22      	ldr	r3, [pc, #136]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <HAL_RCC_OscConfig+0x44a>
 80051d8:	e037      	b.n	800524a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e032      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <HAL_RCC_OscConfig+0x4e8>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d028      	beq.n	8005246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d121      	bne.n	8005246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d11a      	bne.n	8005246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800521c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	3b01      	subs	r3, #1
 8005230:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d107      	bne.n	8005246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40007000 	.word	0x40007000
 8005258:	40023800 	.word	0x40023800
 800525c:	42470060 	.word	0x42470060

08005260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0cc      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005274:	4b68      	ldr	r3, [pc, #416]	; (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d90c      	bls.n	800529c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b63      	ldr	r3, [pc, #396]	; (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0b8      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a58      	ldr	r2, [pc, #352]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052cc:	4b53      	ldr	r3, [pc, #332]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d8:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	494d      	ldr	r1, [pc, #308]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d044      	beq.n	8005380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d119      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e07f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d003      	beq.n	800531e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531a:	2b03      	cmp	r3, #3
 800531c:	d107      	bne.n	800532e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531e:	4b3f      	ldr	r3, [pc, #252]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e06f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532e:	4b3b      	ldr	r3, [pc, #236]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e067      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 0203 	bic.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4934      	ldr	r1, [pc, #208]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005350:	f7fe f922 	bl	8003598 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005356:	e00a      	b.n	800536e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005358:	f7fe f91e 	bl	8003598 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536e:	4b2b      	ldr	r3, [pc, #172]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 020c 	and.w	r2, r3, #12
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	429a      	cmp	r2, r3
 800537e:	d1eb      	bne.n	8005358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005380:	4b25      	ldr	r3, [pc, #148]	; (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20c      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b20      	ldr	r3, [pc, #128]	; (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e032      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4916      	ldr	r1, [pc, #88]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	490e      	ldr	r1, [pc, #56]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053e6:	f000 f821 	bl	800542c <HAL_RCC_GetSysClockFreq>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	490a      	ldr	r1, [pc, #40]	; (8005420 <HAL_RCC_ClockConfig+0x1c0>)
 80053f8:	5ccb      	ldrb	r3, [r1, r3]
 80053fa:	fa22 f303 	lsr.w	r3, r2, r3
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCC_ClockConfig+0x1c8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe f882 	bl	8003510 <HAL_InitTick>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023c00 	.word	0x40023c00
 800541c:	40023800 	.word	0x40023800
 8005420:	080092b4 	.word	0x080092b4
 8005424:	20000010 	.word	0x20000010
 8005428:	20000014 	.word	0x20000014

0800542c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005432:	2100      	movs	r1, #0
 8005434:	6079      	str	r1, [r7, #4]
 8005436:	2100      	movs	r1, #0
 8005438:	60f9      	str	r1, [r7, #12]
 800543a:	2100      	movs	r1, #0
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800543e:	2100      	movs	r1, #0
 8005440:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005442:	4952      	ldr	r1, [pc, #328]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 8005444:	6889      	ldr	r1, [r1, #8]
 8005446:	f001 010c 	and.w	r1, r1, #12
 800544a:	2908      	cmp	r1, #8
 800544c:	d00d      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x3e>
 800544e:	2908      	cmp	r1, #8
 8005450:	f200 8094 	bhi.w	800557c <HAL_RCC_GetSysClockFreq+0x150>
 8005454:	2900      	cmp	r1, #0
 8005456:	d002      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x32>
 8005458:	2904      	cmp	r1, #4
 800545a:	d003      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x38>
 800545c:	e08e      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800545e:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <HAL_RCC_GetSysClockFreq+0x164>)
 8005460:	60bb      	str	r3, [r7, #8]
       break;
 8005462:	e08e      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005464:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <HAL_RCC_GetSysClockFreq+0x168>)
 8005466:	60bb      	str	r3, [r7, #8]
      break;
 8005468:	e08b      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800546a:	4948      	ldr	r1, [pc, #288]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 800546c:	6849      	ldr	r1, [r1, #4]
 800546e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005472:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005474:	4945      	ldr	r1, [pc, #276]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 8005476:	6849      	ldr	r1, [r1, #4]
 8005478:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800547c:	2900      	cmp	r1, #0
 800547e:	d024      	beq.n	80054ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005480:	4942      	ldr	r1, [pc, #264]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 8005482:	6849      	ldr	r1, [r1, #4]
 8005484:	0989      	lsrs	r1, r1, #6
 8005486:	4608      	mov	r0, r1
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005490:	f04f 0500 	mov.w	r5, #0
 8005494:	ea00 0204 	and.w	r2, r0, r4
 8005498:	ea01 0305 	and.w	r3, r1, r5
 800549c:	493d      	ldr	r1, [pc, #244]	; (8005594 <HAL_RCC_GetSysClockFreq+0x168>)
 800549e:	fb01 f003 	mul.w	r0, r1, r3
 80054a2:	2100      	movs	r1, #0
 80054a4:	fb01 f102 	mul.w	r1, r1, r2
 80054a8:	1844      	adds	r4, r0, r1
 80054aa:	493a      	ldr	r1, [pc, #232]	; (8005594 <HAL_RCC_GetSysClockFreq+0x168>)
 80054ac:	fba2 0101 	umull	r0, r1, r2, r1
 80054b0:	1863      	adds	r3, r4, r1
 80054b2:	4619      	mov	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	f7fb fc1c 	bl	8000cf8 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4613      	mov	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e04a      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ca:	4b30      	ldr	r3, [pc, #192]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	099b      	lsrs	r3, r3, #6
 80054d0:	461a      	mov	r2, r3
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054da:	f04f 0100 	mov.w	r1, #0
 80054de:	ea02 0400 	and.w	r4, r2, r0
 80054e2:	ea03 0501 	and.w	r5, r3, r1
 80054e6:	4620      	mov	r0, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	014b      	lsls	r3, r1, #5
 80054f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054f8:	0142      	lsls	r2, r0, #5
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	1b00      	subs	r0, r0, r4
 8005500:	eb61 0105 	sbc.w	r1, r1, r5
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	018b      	lsls	r3, r1, #6
 800550e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005512:	0182      	lsls	r2, r0, #6
 8005514:	1a12      	subs	r2, r2, r0
 8005516:	eb63 0301 	sbc.w	r3, r3, r1
 800551a:	f04f 0000 	mov.w	r0, #0
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	00d9      	lsls	r1, r3, #3
 8005524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005528:	00d0      	lsls	r0, r2, #3
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	1912      	adds	r2, r2, r4
 8005530:	eb45 0303 	adc.w	r3, r5, r3
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	0299      	lsls	r1, r3, #10
 800553e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005542:	0290      	lsls	r0, r2, #10
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	461a      	mov	r2, r3
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f7fb fbd0 	bl	8000cf8 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4613      	mov	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <HAL_RCC_GetSysClockFreq+0x160>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	0c1b      	lsrs	r3, r3, #16
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	3301      	adds	r3, #1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	60bb      	str	r3, [r7, #8]
      break;
 800557a:	e002      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <HAL_RCC_GetSysClockFreq+0x164>)
 800557e:	60bb      	str	r3, [r7, #8]
      break;
 8005580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005582:	68bb      	ldr	r3, [r7, #8]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bdb0      	pop	{r4, r5, r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	00f42400 	.word	0x00f42400
 8005594:	017d7840 	.word	0x017d7840

08005598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800559c:	4b03      	ldr	r3, [pc, #12]	; (80055ac <HAL_RCC_GetHCLKFreq+0x14>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000010 	.word	0x20000010

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055b4:	f7ff fff0 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	0a9b      	lsrs	r3, r3, #10
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4903      	ldr	r1, [pc, #12]	; (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40023800 	.word	0x40023800
 80055d4:	080092c4 	.word	0x080092c4

080055d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055dc:	f7ff ffdc 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0b5b      	lsrs	r3, r3, #13
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4903      	ldr	r1, [pc, #12]	; (80055fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40023800 	.word	0x40023800
 80055fc:	080092c4 	.word	0x080092c4

08005600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e03f      	b.n	8005692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fd fdd6 	bl	80031d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f929 	bl	800589c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b08a      	sub	sp, #40	; 0x28
 800569e:	af02      	add	r7, sp, #8
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d17c      	bne.n	80057b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_Transmit+0x2c>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e075      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Transmit+0x3e>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e06e      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2221      	movs	r2, #33	; 0x21
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ee:	f7fd ff53 	bl	8003598 <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d108      	bne.n	800571c <HAL_UART_Transmit+0x82>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e003      	b.n	8005724 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800572c:	e02a      	b.n	8005784 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f840 	bl	80057be <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e036      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	3302      	adds	r3, #2
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e007      	b.n	8005776 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	3301      	adds	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1cf      	bne.n	800572e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f810 	bl	80057be <UART_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b090      	sub	sp, #64	; 0x40
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ce:	e050      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d04c      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0x30>
 80057de:	f7fd fedb 	bl	8003598 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d241      	bcs.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800580e:	637a      	str	r2, [r7, #52]	; 0x34
 8005810:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	613b      	str	r3, [r7, #16]
   return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005842:	623a      	str	r2, [r7, #32]
 8005844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e00f      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	429a      	cmp	r2, r3
 800588e:	d09f      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3740      	adds	r7, #64	; 0x40
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	b09f      	sub	sp, #124	; 0x7c
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	68d9      	ldr	r1, [r3, #12]
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	ea40 0301 	orr.w	r3, r0, r1
 80058bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e0:	f021 010c 	bic.w	r1, r1, #12
 80058e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ea:	430b      	orrs	r3, r1
 80058ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	6999      	ldr	r1, [r3, #24]
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	ea40 0301 	orr.w	r3, r0, r1
 8005904:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4bc5      	ldr	r3, [pc, #788]	; (8005c20 <UART_SetConfig+0x384>)
 800590c:	429a      	cmp	r2, r3
 800590e:	d004      	beq.n	800591a <UART_SetConfig+0x7e>
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4bc3      	ldr	r3, [pc, #780]	; (8005c24 <UART_SetConfig+0x388>)
 8005916:	429a      	cmp	r2, r3
 8005918:	d103      	bne.n	8005922 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800591a:	f7ff fe5d 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 800591e:	6778      	str	r0, [r7, #116]	; 0x74
 8005920:	e002      	b.n	8005928 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005922:	f7ff fe45 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8005926:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	f040 80b6 	bne.w	8005aa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005936:	461c      	mov	r4, r3
 8005938:	f04f 0500 	mov.w	r5, #0
 800593c:	4622      	mov	r2, r4
 800593e:	462b      	mov	r3, r5
 8005940:	1891      	adds	r1, r2, r2
 8005942:	6439      	str	r1, [r7, #64]	; 0x40
 8005944:	415b      	adcs	r3, r3
 8005946:	647b      	str	r3, [r7, #68]	; 0x44
 8005948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800594c:	1912      	adds	r2, r2, r4
 800594e:	eb45 0303 	adc.w	r3, r5, r3
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f04f 0100 	mov.w	r1, #0
 800595a:	00d9      	lsls	r1, r3, #3
 800595c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005960:	00d0      	lsls	r0, r2, #3
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	1911      	adds	r1, r2, r4
 8005968:	6639      	str	r1, [r7, #96]	; 0x60
 800596a:	416b      	adcs	r3, r5
 800596c:	667b      	str	r3, [r7, #100]	; 0x64
 800596e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	1891      	adds	r1, r2, r2
 800597a:	63b9      	str	r1, [r7, #56]	; 0x38
 800597c:	415b      	adcs	r3, r3
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005984:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005988:	f7fb f9b6 	bl	8000cf8 <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4ba5      	ldr	r3, [pc, #660]	; (8005c28 <UART_SetConfig+0x38c>)
 8005992:	fba3 2302 	umull	r2, r3, r3, r2
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	011e      	lsls	r6, r3, #4
 800599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599c:	461c      	mov	r4, r3
 800599e:	f04f 0500 	mov.w	r5, #0
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	1891      	adds	r1, r2, r2
 80059a8:	6339      	str	r1, [r7, #48]	; 0x30
 80059aa:	415b      	adcs	r3, r3
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
 80059ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059b2:	1912      	adds	r2, r2, r4
 80059b4:	eb45 0303 	adc.w	r3, r5, r3
 80059b8:	f04f 0000 	mov.w	r0, #0
 80059bc:	f04f 0100 	mov.w	r1, #0
 80059c0:	00d9      	lsls	r1, r3, #3
 80059c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059c6:	00d0      	lsls	r0, r2, #3
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	1911      	adds	r1, r2, r4
 80059ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80059d0:	416b      	adcs	r3, r5
 80059d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	1891      	adds	r1, r2, r2
 80059e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80059e2:	415b      	adcs	r3, r3
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059ee:	f7fb f983 	bl	8000cf8 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4b8c      	ldr	r3, [pc, #560]	; (8005c28 <UART_SetConfig+0x38c>)
 80059f8:	fba3 1302 	umull	r1, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	3332      	adds	r3, #50	; 0x32
 8005a0a:	4a87      	ldr	r2, [pc, #540]	; (8005c28 <UART_SetConfig+0x38c>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a18:	441e      	add	r6, r3
 8005a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	1894      	adds	r4, r2, r2
 8005a28:	623c      	str	r4, [r7, #32]
 8005a2a:	415b      	adcs	r3, r3
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a32:	1812      	adds	r2, r2, r0
 8005a34:	eb41 0303 	adc.w	r3, r1, r3
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	f04f 0500 	mov.w	r5, #0
 8005a40:	00dd      	lsls	r5, r3, #3
 8005a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a46:	00d4      	lsls	r4, r2, #3
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	1814      	adds	r4, r2, r0
 8005a4e:	653c      	str	r4, [r7, #80]	; 0x50
 8005a50:	414b      	adcs	r3, r1
 8005a52:	657b      	str	r3, [r7, #84]	; 0x54
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	1891      	adds	r1, r2, r2
 8005a60:	61b9      	str	r1, [r7, #24]
 8005a62:	415b      	adcs	r3, r3
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a6e:	f7fb f943 	bl	8000cf8 <__aeabi_uldivmod>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4b6c      	ldr	r3, [pc, #432]	; (8005c28 <UART_SetConfig+0x38c>)
 8005a78:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	2164      	movs	r1, #100	; 0x64
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	3332      	adds	r3, #50	; 0x32
 8005a8a:	4a67      	ldr	r2, [pc, #412]	; (8005c28 <UART_SetConfig+0x38c>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	f003 0207 	and.w	r2, r3, #7
 8005a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4432      	add	r2, r6
 8005a9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a9e:	e0b9      	b.n	8005c14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	f04f 0500 	mov.w	r5, #0
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	6139      	str	r1, [r7, #16]
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ab8:	1912      	adds	r2, r2, r4
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005acc:	00d0      	lsls	r0, r2, #3
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	eb12 0804 	adds.w	r8, r2, r4
 8005ad6:	eb43 0905 	adc.w	r9, r3, r5
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f04f 0100 	mov.w	r1, #0
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	008b      	lsls	r3, r1, #2
 8005aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005af2:	0082      	lsls	r2, r0, #2
 8005af4:	4640      	mov	r0, r8
 8005af6:	4649      	mov	r1, r9
 8005af8:	f7fb f8fe 	bl	8000cf8 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <UART_SetConfig+0x38c>)
 8005b02:	fba3 2302 	umull	r2, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	011e      	lsls	r6, r3, #4
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	1894      	adds	r4, r2, r2
 8005b18:	60bc      	str	r4, [r7, #8]
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b22:	1812      	adds	r2, r2, r0
 8005b24:	eb41 0303 	adc.w	r3, r1, r3
 8005b28:	f04f 0400 	mov.w	r4, #0
 8005b2c:	f04f 0500 	mov.w	r5, #0
 8005b30:	00dd      	lsls	r5, r3, #3
 8005b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b36:	00d4      	lsls	r4, r2, #3
 8005b38:	4622      	mov	r2, r4
 8005b3a:	462b      	mov	r3, r5
 8005b3c:	1814      	adds	r4, r2, r0
 8005b3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b40:	414b      	adcs	r3, r1
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f04f 0100 	mov.w	r1, #0
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	008b      	lsls	r3, r1, #2
 8005b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b5c:	0082      	lsls	r2, r0, #2
 8005b5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b62:	f7fb f8c9 	bl	8000cf8 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <UART_SetConfig+0x38c>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	; 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	3332      	adds	r3, #50	; 0x32
 8005b7e:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <UART_SetConfig+0x38c>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b8a:	441e      	add	r6, r3
 8005b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	1894      	adds	r4, r2, r2
 8005b9a:	603c      	str	r4, [r7, #0]
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba4:	1812      	adds	r2, r2, r0
 8005ba6:	eb41 0303 	adc.w	r3, r1, r3
 8005baa:	f04f 0400 	mov.w	r4, #0
 8005bae:	f04f 0500 	mov.w	r5, #0
 8005bb2:	00dd      	lsls	r5, r3, #3
 8005bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb8:	00d4      	lsls	r4, r2, #3
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	eb12 0a00 	adds.w	sl, r2, r0
 8005bc2:	eb43 0b01 	adc.w	fp, r3, r1
 8005bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	008b      	lsls	r3, r1, #2
 8005bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bde:	0082      	lsls	r2, r0, #2
 8005be0:	4650      	mov	r0, sl
 8005be2:	4659      	mov	r1, fp
 8005be4:	f7fb f888 	bl	8000cf8 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <UART_SetConfig+0x38c>)
 8005bee:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	2164      	movs	r1, #100	; 0x64
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	3332      	adds	r3, #50	; 0x32
 8005c00:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <UART_SetConfig+0x38c>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4432      	add	r2, r6
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	377c      	adds	r7, #124	; 0x7c
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <__errno>:
 8005c2c:	4b01      	ldr	r3, [pc, #4]	; (8005c34 <__errno+0x8>)
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	2000001c 	.word	0x2000001c

08005c38 <__libc_init_array>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4d0d      	ldr	r5, [pc, #52]	; (8005c70 <__libc_init_array+0x38>)
 8005c3c:	4c0d      	ldr	r4, [pc, #52]	; (8005c74 <__libc_init_array+0x3c>)
 8005c3e:	1b64      	subs	r4, r4, r5
 8005c40:	10a4      	asrs	r4, r4, #2
 8005c42:	2600      	movs	r6, #0
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	d109      	bne.n	8005c5c <__libc_init_array+0x24>
 8005c48:	4d0b      	ldr	r5, [pc, #44]	; (8005c78 <__libc_init_array+0x40>)
 8005c4a:	4c0c      	ldr	r4, [pc, #48]	; (8005c7c <__libc_init_array+0x44>)
 8005c4c:	f002 fed0 	bl	80089f0 <_init>
 8005c50:	1b64      	subs	r4, r4, r5
 8005c52:	10a4      	asrs	r4, r4, #2
 8005c54:	2600      	movs	r6, #0
 8005c56:	42a6      	cmp	r6, r4
 8005c58:	d105      	bne.n	8005c66 <__libc_init_array+0x2e>
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c60:	4798      	blx	r3
 8005c62:	3601      	adds	r6, #1
 8005c64:	e7ee      	b.n	8005c44 <__libc_init_array+0xc>
 8005c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6a:	4798      	blx	r3
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	e7f2      	b.n	8005c56 <__libc_init_array+0x1e>
 8005c70:	080096b4 	.word	0x080096b4
 8005c74:	080096b4 	.word	0x080096b4
 8005c78:	080096b4 	.word	0x080096b4
 8005c7c:	080096bc 	.word	0x080096bc

08005c80 <malloc>:
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <malloc+0xc>)
 8005c82:	4601      	mov	r1, r0
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	f000 b87f 	b.w	8005d88 <_malloc_r>
 8005c8a:	bf00      	nop
 8005c8c:	2000001c 	.word	0x2000001c

08005c90 <free>:
 8005c90:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <free+0xc>)
 8005c92:	4601      	mov	r1, r0
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f000 b827 	b.w	8005ce8 <_free_r>
 8005c9a:	bf00      	nop
 8005c9c:	2000001c 	.word	0x2000001c

08005ca0 <memcmp>:
 8005ca0:	b530      	push	{r4, r5, lr}
 8005ca2:	3901      	subs	r1, #1
 8005ca4:	2400      	movs	r4, #0
 8005ca6:	42a2      	cmp	r2, r4
 8005ca8:	d101      	bne.n	8005cae <memcmp+0xe>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e005      	b.n	8005cba <memcmp+0x1a>
 8005cae:	5d03      	ldrb	r3, [r0, r4]
 8005cb0:	3401      	adds	r4, #1
 8005cb2:	5d0d      	ldrb	r5, [r1, r4]
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	d0f6      	beq.n	8005ca6 <memcmp+0x6>
 8005cb8:	1b58      	subs	r0, r3, r5
 8005cba:	bd30      	pop	{r4, r5, pc}

08005cbc <memcpy>:
 8005cbc:	440a      	add	r2, r1
 8005cbe:	4291      	cmp	r1, r2
 8005cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cc4:	d100      	bne.n	8005cc8 <memcpy+0xc>
 8005cc6:	4770      	bx	lr
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd2:	4291      	cmp	r1, r2
 8005cd4:	d1f9      	bne.n	8005cca <memcpy+0xe>
 8005cd6:	bd10      	pop	{r4, pc}

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <_free_r>:
 8005ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cea:	2900      	cmp	r1, #0
 8005cec:	d048      	beq.n	8005d80 <_free_r+0x98>
 8005cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf2:	9001      	str	r0, [sp, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8005cfa:	bfb8      	it	lt
 8005cfc:	18e4      	addlt	r4, r4, r3
 8005cfe:	f001 fbbb 	bl	8007478 <__malloc_lock>
 8005d02:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <_free_r+0x9c>)
 8005d04:	9801      	ldr	r0, [sp, #4]
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	4615      	mov	r5, r2
 8005d0a:	b933      	cbnz	r3, 8005d1a <_free_r+0x32>
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	6014      	str	r4, [r2, #0]
 8005d10:	b003      	add	sp, #12
 8005d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d16:	f001 bbb5 	b.w	8007484 <__malloc_unlock>
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d90b      	bls.n	8005d36 <_free_r+0x4e>
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	1862      	adds	r2, r4, r1
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bf04      	itt	eq
 8005d26:	681a      	ldreq	r2, [r3, #0]
 8005d28:	685b      	ldreq	r3, [r3, #4]
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	bf04      	itt	eq
 8005d2e:	1852      	addeq	r2, r2, r1
 8005d30:	6022      	streq	r2, [r4, #0]
 8005d32:	602c      	str	r4, [r5, #0]
 8005d34:	e7ec      	b.n	8005d10 <_free_r+0x28>
 8005d36:	461a      	mov	r2, r3
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b10b      	cbz	r3, 8005d40 <_free_r+0x58>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d9fa      	bls.n	8005d36 <_free_r+0x4e>
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	1855      	adds	r5, r2, r1
 8005d44:	42a5      	cmp	r5, r4
 8005d46:	d10b      	bne.n	8005d60 <_free_r+0x78>
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	4421      	add	r1, r4
 8005d4c:	1854      	adds	r4, r2, r1
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	d1dd      	bne.n	8005d10 <_free_r+0x28>
 8005d54:	681c      	ldr	r4, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	6053      	str	r3, [r2, #4]
 8005d5a:	4421      	add	r1, r4
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	e7d7      	b.n	8005d10 <_free_r+0x28>
 8005d60:	d902      	bls.n	8005d68 <_free_r+0x80>
 8005d62:	230c      	movs	r3, #12
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	e7d3      	b.n	8005d10 <_free_r+0x28>
 8005d68:	6825      	ldr	r5, [r4, #0]
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf04      	itt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	bf04      	itt	eq
 8005d78:	1949      	addeq	r1, r1, r5
 8005d7a:	6021      	streq	r1, [r4, #0]
 8005d7c:	6054      	str	r4, [r2, #4]
 8005d7e:	e7c7      	b.n	8005d10 <_free_r+0x28>
 8005d80:	b003      	add	sp, #12
 8005d82:	bd30      	pop	{r4, r5, pc}
 8005d84:	20000528 	.word	0x20000528

08005d88 <_malloc_r>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	1ccd      	adds	r5, r1, #3
 8005d8c:	f025 0503 	bic.w	r5, r5, #3
 8005d90:	3508      	adds	r5, #8
 8005d92:	2d0c      	cmp	r5, #12
 8005d94:	bf38      	it	cc
 8005d96:	250c      	movcc	r5, #12
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	db01      	blt.n	8005da2 <_malloc_r+0x1a>
 8005d9e:	42a9      	cmp	r1, r5
 8005da0:	d903      	bls.n	8005daa <_malloc_r+0x22>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	2000      	movs	r0, #0
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005daa:	f001 fb65 	bl	8007478 <__malloc_lock>
 8005dae:	4921      	ldr	r1, [pc, #132]	; (8005e34 <_malloc_r+0xac>)
 8005db0:	680a      	ldr	r2, [r1, #0]
 8005db2:	4614      	mov	r4, r2
 8005db4:	b99c      	cbnz	r4, 8005dde <_malloc_r+0x56>
 8005db6:	4f20      	ldr	r7, [pc, #128]	; (8005e38 <_malloc_r+0xb0>)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	b923      	cbnz	r3, 8005dc6 <_malloc_r+0x3e>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 fcae 	bl	8006720 <_sbrk_r>
 8005dc4:	6038      	str	r0, [r7, #0]
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 fca9 	bl	8006720 <_sbrk_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d123      	bne.n	8005e1a <_malloc_r+0x92>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f001 fb54 	bl	8007484 <__malloc_unlock>
 8005ddc:	e7e3      	b.n	8005da6 <_malloc_r+0x1e>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	1b5b      	subs	r3, r3, r5
 8005de2:	d417      	bmi.n	8005e14 <_malloc_r+0x8c>
 8005de4:	2b0b      	cmp	r3, #11
 8005de6:	d903      	bls.n	8005df0 <_malloc_r+0x68>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	441c      	add	r4, r3
 8005dec:	6025      	str	r5, [r4, #0]
 8005dee:	e004      	b.n	8005dfa <_malloc_r+0x72>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	42a2      	cmp	r2, r4
 8005df4:	bf0c      	ite	eq
 8005df6:	600b      	streq	r3, [r1, #0]
 8005df8:	6053      	strne	r3, [r2, #4]
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f001 fb42 	bl	8007484 <__malloc_unlock>
 8005e00:	f104 000b 	add.w	r0, r4, #11
 8005e04:	1d23      	adds	r3, r4, #4
 8005e06:	f020 0007 	bic.w	r0, r0, #7
 8005e0a:	1ac2      	subs	r2, r0, r3
 8005e0c:	d0cc      	beq.n	8005da8 <_malloc_r+0x20>
 8005e0e:	1a1b      	subs	r3, r3, r0
 8005e10:	50a3      	str	r3, [r4, r2]
 8005e12:	e7c9      	b.n	8005da8 <_malloc_r+0x20>
 8005e14:	4622      	mov	r2, r4
 8005e16:	6864      	ldr	r4, [r4, #4]
 8005e18:	e7cc      	b.n	8005db4 <_malloc_r+0x2c>
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d0e3      	beq.n	8005dec <_malloc_r+0x64>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 fc7a 	bl	8006720 <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1dd      	bne.n	8005dec <_malloc_r+0x64>
 8005e30:	e7cf      	b.n	8005dd2 <_malloc_r+0x4a>
 8005e32:	bf00      	nop
 8005e34:	20000528 	.word	0x20000528
 8005e38:	2000052c 	.word	0x2000052c

08005e3c <__cvt>:
 8005e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	ec55 4b10 	vmov	r4, r5, d0
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	460e      	mov	r6, r1
 8005e48:	4619      	mov	r1, r3
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	bfbb      	ittet	lt
 8005e4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e52:	461d      	movlt	r5, r3
 8005e54:	2300      	movge	r3, #0
 8005e56:	232d      	movlt	r3, #45	; 0x2d
 8005e58:	700b      	strb	r3, [r1, #0]
 8005e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e60:	4691      	mov	r9, r2
 8005e62:	f023 0820 	bic.w	r8, r3, #32
 8005e66:	bfbc      	itt	lt
 8005e68:	4622      	movlt	r2, r4
 8005e6a:	4614      	movlt	r4, r2
 8005e6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e70:	d005      	beq.n	8005e7e <__cvt+0x42>
 8005e72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e76:	d100      	bne.n	8005e7a <__cvt+0x3e>
 8005e78:	3601      	adds	r6, #1
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	e000      	b.n	8005e80 <__cvt+0x44>
 8005e7e:	2103      	movs	r1, #3
 8005e80:	ab03      	add	r3, sp, #12
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	ab02      	add	r3, sp, #8
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	ec45 4b10 	vmov	d0, r4, r5
 8005e8c:	4653      	mov	r3, sl
 8005e8e:	4632      	mov	r2, r6
 8005e90:	f000 fd02 	bl	8006898 <_dtoa_r>
 8005e94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e98:	4607      	mov	r7, r0
 8005e9a:	d102      	bne.n	8005ea2 <__cvt+0x66>
 8005e9c:	f019 0f01 	tst.w	r9, #1
 8005ea0:	d022      	beq.n	8005ee8 <__cvt+0xac>
 8005ea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ea6:	eb07 0906 	add.w	r9, r7, r6
 8005eaa:	d110      	bne.n	8005ece <__cvt+0x92>
 8005eac:	783b      	ldrb	r3, [r7, #0]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d10a      	bne.n	8005ec8 <__cvt+0x8c>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa fe0d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ebe:	b918      	cbnz	r0, 8005ec8 <__cvt+0x8c>
 8005ec0:	f1c6 0601 	rsb	r6, r6, #1
 8005ec4:	f8ca 6000 	str.w	r6, [sl]
 8005ec8:	f8da 3000 	ldr.w	r3, [sl]
 8005ecc:	4499      	add	r9, r3
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f7fa fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eda:	b108      	cbz	r0, 8005ee0 <__cvt+0xa4>
 8005edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ee0:	2230      	movs	r2, #48	; 0x30
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	454b      	cmp	r3, r9
 8005ee6:	d307      	bcc.n	8005ef8 <__cvt+0xbc>
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eec:	1bdb      	subs	r3, r3, r7
 8005eee:	4638      	mov	r0, r7
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	b004      	add	sp, #16
 8005ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	9103      	str	r1, [sp, #12]
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e7f0      	b.n	8005ee2 <__cvt+0xa6>

08005f00 <__exponent>:
 8005f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f02:	4603      	mov	r3, r0
 8005f04:	2900      	cmp	r1, #0
 8005f06:	bfb8      	it	lt
 8005f08:	4249      	neglt	r1, r1
 8005f0a:	f803 2b02 	strb.w	r2, [r3], #2
 8005f0e:	bfb4      	ite	lt
 8005f10:	222d      	movlt	r2, #45	; 0x2d
 8005f12:	222b      	movge	r2, #43	; 0x2b
 8005f14:	2909      	cmp	r1, #9
 8005f16:	7042      	strb	r2, [r0, #1]
 8005f18:	dd2a      	ble.n	8005f70 <__exponent+0x70>
 8005f1a:	f10d 0407 	add.w	r4, sp, #7
 8005f1e:	46a4      	mov	ip, r4
 8005f20:	270a      	movs	r7, #10
 8005f22:	46a6      	mov	lr, r4
 8005f24:	460a      	mov	r2, r1
 8005f26:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005f2e:	3530      	adds	r5, #48	; 0x30
 8005f30:	2a63      	cmp	r2, #99	; 0x63
 8005f32:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	dcf1      	bgt.n	8005f22 <__exponent+0x22>
 8005f3e:	3130      	adds	r1, #48	; 0x30
 8005f40:	f1ae 0502 	sub.w	r5, lr, #2
 8005f44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f48:	1c44      	adds	r4, r0, #1
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4561      	cmp	r1, ip
 8005f4e:	d30a      	bcc.n	8005f66 <__exponent+0x66>
 8005f50:	f10d 0209 	add.w	r2, sp, #9
 8005f54:	eba2 020e 	sub.w	r2, r2, lr
 8005f58:	4565      	cmp	r5, ip
 8005f5a:	bf88      	it	hi
 8005f5c:	2200      	movhi	r2, #0
 8005f5e:	4413      	add	r3, r2
 8005f60:	1a18      	subs	r0, r3, r0
 8005f62:	b003      	add	sp, #12
 8005f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f6e:	e7ed      	b.n	8005f4c <__exponent+0x4c>
 8005f70:	2330      	movs	r3, #48	; 0x30
 8005f72:	3130      	adds	r1, #48	; 0x30
 8005f74:	7083      	strb	r3, [r0, #2]
 8005f76:	70c1      	strb	r1, [r0, #3]
 8005f78:	1d03      	adds	r3, r0, #4
 8005f7a:	e7f1      	b.n	8005f60 <__exponent+0x60>

08005f7c <_printf_float>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	ed2d 8b02 	vpush	{d8}
 8005f84:	b08d      	sub	sp, #52	; 0x34
 8005f86:	460c      	mov	r4, r1
 8005f88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	461f      	mov	r7, r3
 8005f90:	4605      	mov	r5, r0
 8005f92:	f001 fa6d 	bl	8007470 <_localeconv_r>
 8005f96:	f8d0 a000 	ldr.w	sl, [r0]
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	f7fa f920 	bl	80001e0 <strlen>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	f8c8 2000 	str.w	r2, [r8]
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fd4:	ee08 0a10 	vmov	s16, r0
 8005fd8:	4b9f      	ldr	r3, [pc, #636]	; (8006258 <_printf_float+0x2dc>)
 8005fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fde:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe2:	f7fa fdab 	bl	8000b3c <__aeabi_dcmpun>
 8005fe6:	bb88      	cbnz	r0, 800604c <_printf_float+0xd0>
 8005fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fec:	4b9a      	ldr	r3, [pc, #616]	; (8006258 <_printf_float+0x2dc>)
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	f7fa fd85 	bl	8000b00 <__aeabi_dcmple>
 8005ff6:	bb48      	cbnz	r0, 800604c <_printf_float+0xd0>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fd74 	bl	8000aec <__aeabi_dcmplt>
 8006004:	b110      	cbz	r0, 800600c <_printf_float+0x90>
 8006006:	232d      	movs	r3, #45	; 0x2d
 8006008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600c:	4b93      	ldr	r3, [pc, #588]	; (800625c <_printf_float+0x2e0>)
 800600e:	4894      	ldr	r0, [pc, #592]	; (8006260 <_printf_float+0x2e4>)
 8006010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006014:	bf94      	ite	ls
 8006016:	4698      	movls	r8, r3
 8006018:	4680      	movhi	r8, r0
 800601a:	2303      	movs	r3, #3
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	9b05      	ldr	r3, [sp, #20]
 8006020:	f023 0204 	bic.w	r2, r3, #4
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	9700      	str	r7, [sp, #0]
 800602c:	4633      	mov	r3, r6
 800602e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f9d8 	bl	80063e8 <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	f040 8090 	bne.w	800615e <_printf_float+0x1e2>
 800603e:	f04f 30ff 	mov.w	r0, #4294967295
 8006042:	b00d      	add	sp, #52	; 0x34
 8006044:	ecbd 8b02 	vpop	{d8}
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa fd72 	bl	8000b3c <__aeabi_dcmpun>
 8006058:	b140      	cbz	r0, 800606c <_printf_float+0xf0>
 800605a:	464b      	mov	r3, r9
 800605c:	2b00      	cmp	r3, #0
 800605e:	bfbc      	itt	lt
 8006060:	232d      	movlt	r3, #45	; 0x2d
 8006062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006066:	487f      	ldr	r0, [pc, #508]	; (8006264 <_printf_float+0x2e8>)
 8006068:	4b7f      	ldr	r3, [pc, #508]	; (8006268 <_printf_float+0x2ec>)
 800606a:	e7d1      	b.n	8006010 <_printf_float+0x94>
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006072:	9206      	str	r2, [sp, #24]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	d13f      	bne.n	80060f8 <_printf_float+0x17c>
 8006078:	2306      	movs	r3, #6
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	9b05      	ldr	r3, [sp, #20]
 800607e:	6861      	ldr	r1, [r4, #4]
 8006080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006084:	2300      	movs	r3, #0
 8006086:	9303      	str	r3, [sp, #12]
 8006088:	ab0a      	add	r3, sp, #40	; 0x28
 800608a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800608e:	ab09      	add	r3, sp, #36	; 0x24
 8006090:	ec49 8b10 	vmov	d0, r8, r9
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6022      	str	r2, [r4, #0]
 8006098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff fecd 	bl	8005e3c <__cvt>
 80060a2:	9b06      	ldr	r3, [sp, #24]
 80060a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060a6:	2b47      	cmp	r3, #71	; 0x47
 80060a8:	4680      	mov	r8, r0
 80060aa:	d108      	bne.n	80060be <_printf_float+0x142>
 80060ac:	1cc8      	adds	r0, r1, #3
 80060ae:	db02      	blt.n	80060b6 <_printf_float+0x13a>
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	dd41      	ble.n	800613a <_printf_float+0x1be>
 80060b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80060ba:	fa5f fb8b 	uxtb.w	fp, fp
 80060be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060c2:	d820      	bhi.n	8006106 <_printf_float+0x18a>
 80060c4:	3901      	subs	r1, #1
 80060c6:	465a      	mov	r2, fp
 80060c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060cc:	9109      	str	r1, [sp, #36]	; 0x24
 80060ce:	f7ff ff17 	bl	8005f00 <__exponent>
 80060d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060d4:	1813      	adds	r3, r2, r0
 80060d6:	2a01      	cmp	r2, #1
 80060d8:	4681      	mov	r9, r0
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	dc02      	bgt.n	80060e4 <_printf_float+0x168>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	07d2      	lsls	r2, r2, #31
 80060e2:	d501      	bpl.n	80060e8 <_printf_float+0x16c>
 80060e4:	3301      	adds	r3, #1
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d09c      	beq.n	800602a <_printf_float+0xae>
 80060f0:	232d      	movs	r3, #45	; 0x2d
 80060f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f6:	e798      	b.n	800602a <_printf_float+0xae>
 80060f8:	9a06      	ldr	r2, [sp, #24]
 80060fa:	2a47      	cmp	r2, #71	; 0x47
 80060fc:	d1be      	bne.n	800607c <_printf_float+0x100>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1bc      	bne.n	800607c <_printf_float+0x100>
 8006102:	2301      	movs	r3, #1
 8006104:	e7b9      	b.n	800607a <_printf_float+0xfe>
 8006106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800610a:	d118      	bne.n	800613e <_printf_float+0x1c2>
 800610c:	2900      	cmp	r1, #0
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	dd0b      	ble.n	800612a <_printf_float+0x1ae>
 8006112:	6121      	str	r1, [r4, #16]
 8006114:	b913      	cbnz	r3, 800611c <_printf_float+0x1a0>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	07d0      	lsls	r0, r2, #31
 800611a:	d502      	bpl.n	8006122 <_printf_float+0x1a6>
 800611c:	3301      	adds	r3, #1
 800611e:	440b      	add	r3, r1
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	65a1      	str	r1, [r4, #88]	; 0x58
 8006124:	f04f 0900 	mov.w	r9, #0
 8006128:	e7de      	b.n	80060e8 <_printf_float+0x16c>
 800612a:	b913      	cbnz	r3, 8006132 <_printf_float+0x1b6>
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	07d2      	lsls	r2, r2, #31
 8006130:	d501      	bpl.n	8006136 <_printf_float+0x1ba>
 8006132:	3302      	adds	r3, #2
 8006134:	e7f4      	b.n	8006120 <_printf_float+0x1a4>
 8006136:	2301      	movs	r3, #1
 8006138:	e7f2      	b.n	8006120 <_printf_float+0x1a4>
 800613a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800613e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006140:	4299      	cmp	r1, r3
 8006142:	db05      	blt.n	8006150 <_printf_float+0x1d4>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	6121      	str	r1, [r4, #16]
 8006148:	07d8      	lsls	r0, r3, #31
 800614a:	d5ea      	bpl.n	8006122 <_printf_float+0x1a6>
 800614c:	1c4b      	adds	r3, r1, #1
 800614e:	e7e7      	b.n	8006120 <_printf_float+0x1a4>
 8006150:	2900      	cmp	r1, #0
 8006152:	bfd4      	ite	le
 8006154:	f1c1 0202 	rsble	r2, r1, #2
 8006158:	2201      	movgt	r2, #1
 800615a:	4413      	add	r3, r2
 800615c:	e7e0      	b.n	8006120 <_printf_float+0x1a4>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	055a      	lsls	r2, r3, #21
 8006162:	d407      	bmi.n	8006174 <_printf_float+0x1f8>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	4642      	mov	r2, r8
 8006168:	4631      	mov	r1, r6
 800616a:	4628      	mov	r0, r5
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	d12c      	bne.n	80061cc <_printf_float+0x250>
 8006172:	e764      	b.n	800603e <_printf_float+0xc2>
 8006174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006178:	f240 80e0 	bls.w	800633c <_printf_float+0x3c0>
 800617c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006180:	2200      	movs	r2, #0
 8006182:	2300      	movs	r3, #0
 8006184:	f7fa fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006188:	2800      	cmp	r0, #0
 800618a:	d034      	beq.n	80061f6 <_printf_float+0x27a>
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <_printf_float+0x2f0>)
 800618e:	2301      	movs	r3, #1
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af51 	beq.w	800603e <_printf_float+0xc2>
 800619c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a0:	429a      	cmp	r2, r3
 80061a2:	db02      	blt.n	80061aa <_printf_float+0x22e>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07d8      	lsls	r0, r3, #31
 80061a8:	d510      	bpl.n	80061cc <_printf_float+0x250>
 80061aa:	ee18 3a10 	vmov	r3, s16
 80061ae:	4652      	mov	r2, sl
 80061b0:	4631      	mov	r1, r6
 80061b2:	4628      	mov	r0, r5
 80061b4:	47b8      	blx	r7
 80061b6:	3001      	adds	r0, #1
 80061b8:	f43f af41 	beq.w	800603e <_printf_float+0xc2>
 80061bc:	f04f 0800 	mov.w	r8, #0
 80061c0:	f104 091a 	add.w	r9, r4, #26
 80061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	4543      	cmp	r3, r8
 80061ca:	dc09      	bgt.n	80061e0 <_printf_float+0x264>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	f100 8105 	bmi.w	80063de <_printf_float+0x462>
 80061d4:	68e0      	ldr	r0, [r4, #12]
 80061d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d8:	4298      	cmp	r0, r3
 80061da:	bfb8      	it	lt
 80061dc:	4618      	movlt	r0, r3
 80061de:	e730      	b.n	8006042 <_printf_float+0xc6>
 80061e0:	2301      	movs	r3, #1
 80061e2:	464a      	mov	r2, r9
 80061e4:	4631      	mov	r1, r6
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	f43f af27 	beq.w	800603e <_printf_float+0xc2>
 80061f0:	f108 0801 	add.w	r8, r8, #1
 80061f4:	e7e6      	b.n	80061c4 <_printf_float+0x248>
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	dc39      	bgt.n	8006270 <_printf_float+0x2f4>
 80061fc:	4a1b      	ldr	r2, [pc, #108]	; (800626c <_printf_float+0x2f0>)
 80061fe:	2301      	movs	r3, #1
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f af19 	beq.w	800603e <_printf_float+0xc2>
 800620c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006210:	4313      	orrs	r3, r2
 8006212:	d102      	bne.n	800621a <_printf_float+0x29e>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	07d9      	lsls	r1, r3, #31
 8006218:	d5d8      	bpl.n	80061cc <_printf_float+0x250>
 800621a:	ee18 3a10 	vmov	r3, s16
 800621e:	4652      	mov	r2, sl
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af09 	beq.w	800603e <_printf_float+0xc2>
 800622c:	f04f 0900 	mov.w	r9, #0
 8006230:	f104 0a1a 	add.w	sl, r4, #26
 8006234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006236:	425b      	negs	r3, r3
 8006238:	454b      	cmp	r3, r9
 800623a:	dc01      	bgt.n	8006240 <_printf_float+0x2c4>
 800623c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623e:	e792      	b.n	8006166 <_printf_float+0x1ea>
 8006240:	2301      	movs	r3, #1
 8006242:	4652      	mov	r2, sl
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f aef7 	beq.w	800603e <_printf_float+0xc2>
 8006250:	f109 0901 	add.w	r9, r9, #1
 8006254:	e7ee      	b.n	8006234 <_printf_float+0x2b8>
 8006256:	bf00      	nop
 8006258:	7fefffff 	.word	0x7fefffff
 800625c:	080092d0 	.word	0x080092d0
 8006260:	080092d4 	.word	0x080092d4
 8006264:	080092dc 	.word	0x080092dc
 8006268:	080092d8 	.word	0x080092d8
 800626c:	080092e0 	.word	0x080092e0
 8006270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006274:	429a      	cmp	r2, r3
 8006276:	bfa8      	it	ge
 8006278:	461a      	movge	r2, r3
 800627a:	2a00      	cmp	r2, #0
 800627c:	4691      	mov	r9, r2
 800627e:	dc37      	bgt.n	80062f0 <_printf_float+0x374>
 8006280:	f04f 0b00 	mov.w	fp, #0
 8006284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006288:	f104 021a 	add.w	r2, r4, #26
 800628c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	eba3 0309 	sub.w	r3, r3, r9
 8006294:	455b      	cmp	r3, fp
 8006296:	dc33      	bgt.n	8006300 <_printf_float+0x384>
 8006298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800629c:	429a      	cmp	r2, r3
 800629e:	db3b      	blt.n	8006318 <_printf_float+0x39c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07da      	lsls	r2, r3, #31
 80062a4:	d438      	bmi.n	8006318 <_printf_float+0x39c>
 80062a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a8:	9b05      	ldr	r3, [sp, #20]
 80062aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	eba2 0901 	sub.w	r9, r2, r1
 80062b2:	4599      	cmp	r9, r3
 80062b4:	bfa8      	it	ge
 80062b6:	4699      	movge	r9, r3
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	dc35      	bgt.n	800632a <_printf_float+0x3ae>
 80062be:	f04f 0800 	mov.w	r8, #0
 80062c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062c6:	f104 0a1a 	add.w	sl, r4, #26
 80062ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	eba3 0309 	sub.w	r3, r3, r9
 80062d4:	4543      	cmp	r3, r8
 80062d6:	f77f af79 	ble.w	80061cc <_printf_float+0x250>
 80062da:	2301      	movs	r3, #1
 80062dc:	4652      	mov	r2, sl
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f aeaa 	beq.w	800603e <_printf_float+0xc2>
 80062ea:	f108 0801 	add.w	r8, r8, #1
 80062ee:	e7ec      	b.n	80062ca <_printf_float+0x34e>
 80062f0:	4613      	mov	r3, r2
 80062f2:	4631      	mov	r1, r6
 80062f4:	4642      	mov	r2, r8
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1c0      	bne.n	8006280 <_printf_float+0x304>
 80062fe:	e69e      	b.n	800603e <_printf_float+0xc2>
 8006300:	2301      	movs	r3, #1
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	9205      	str	r2, [sp, #20]
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	f43f ae97 	beq.w	800603e <_printf_float+0xc2>
 8006310:	9a05      	ldr	r2, [sp, #20]
 8006312:	f10b 0b01 	add.w	fp, fp, #1
 8006316:	e7b9      	b.n	800628c <_printf_float+0x310>
 8006318:	ee18 3a10 	vmov	r3, s16
 800631c:	4652      	mov	r2, sl
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d1be      	bne.n	80062a6 <_printf_float+0x32a>
 8006328:	e689      	b.n	800603e <_printf_float+0xc2>
 800632a:	9a05      	ldr	r2, [sp, #20]
 800632c:	464b      	mov	r3, r9
 800632e:	4442      	add	r2, r8
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	d1c1      	bne.n	80062be <_printf_float+0x342>
 800633a:	e680      	b.n	800603e <_printf_float+0xc2>
 800633c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800633e:	2a01      	cmp	r2, #1
 8006340:	dc01      	bgt.n	8006346 <_printf_float+0x3ca>
 8006342:	07db      	lsls	r3, r3, #31
 8006344:	d538      	bpl.n	80063b8 <_printf_float+0x43c>
 8006346:	2301      	movs	r3, #1
 8006348:	4642      	mov	r2, r8
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae74 	beq.w	800603e <_printf_float+0xc2>
 8006356:	ee18 3a10 	vmov	r3, s16
 800635a:	4652      	mov	r2, sl
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f ae6b 	beq.w	800603e <_printf_float+0xc2>
 8006368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	f7fa fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006374:	b9d8      	cbnz	r0, 80063ae <_printf_float+0x432>
 8006376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006378:	f108 0201 	add.w	r2, r8, #1
 800637c:	3b01      	subs	r3, #1
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	d10e      	bne.n	80063a6 <_printf_float+0x42a>
 8006388:	e659      	b.n	800603e <_printf_float+0xc2>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f ae52 	beq.w	800603e <_printf_float+0xc2>
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	4543      	cmp	r3, r8
 80063a4:	dcf1      	bgt.n	800638a <_printf_float+0x40e>
 80063a6:	464b      	mov	r3, r9
 80063a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063ac:	e6dc      	b.n	8006168 <_printf_float+0x1ec>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	f104 0a1a 	add.w	sl, r4, #26
 80063b6:	e7f2      	b.n	800639e <_printf_float+0x422>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4642      	mov	r2, r8
 80063bc:	e7df      	b.n	800637e <_printf_float+0x402>
 80063be:	2301      	movs	r3, #1
 80063c0:	464a      	mov	r2, r9
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	f43f ae38 	beq.w	800603e <_printf_float+0xc2>
 80063ce:	f108 0801 	add.w	r8, r8, #1
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063d6:	1a5b      	subs	r3, r3, r1
 80063d8:	4543      	cmp	r3, r8
 80063da:	dcf0      	bgt.n	80063be <_printf_float+0x442>
 80063dc:	e6fa      	b.n	80061d4 <_printf_float+0x258>
 80063de:	f04f 0800 	mov.w	r8, #0
 80063e2:	f104 0919 	add.w	r9, r4, #25
 80063e6:	e7f4      	b.n	80063d2 <_printf_float+0x456>

080063e8 <_printf_common>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	4616      	mov	r6, r2
 80063ee:	4699      	mov	r9, r3
 80063f0:	688a      	ldr	r2, [r1, #8]
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bfb8      	it	lt
 80063fc:	4613      	movlt	r3, r2
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b10a      	cbz	r2, 800640e <_printf_common+0x26>
 800640a:	3301      	adds	r3, #1
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	0699      	lsls	r1, r3, #26
 8006412:	bf42      	ittt	mi
 8006414:	6833      	ldrmi	r3, [r6, #0]
 8006416:	3302      	addmi	r3, #2
 8006418:	6033      	strmi	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d106      	bne.n	8006430 <_printf_common+0x48>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	6832      	ldr	r2, [r6, #0]
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc26      	bgt.n	800647e <_printf_common+0x96>
 8006430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006434:	1e13      	subs	r3, r2, #0
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	bf18      	it	ne
 800643a:	2301      	movne	r3, #1
 800643c:	0692      	lsls	r2, r2, #26
 800643e:	d42b      	bmi.n	8006498 <_printf_common+0xb0>
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d01e      	beq.n	800648c <_printf_common+0xa4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	68e5      	ldr	r5, [r4, #12]
 8006452:	6832      	ldr	r2, [r6, #0]
 8006454:	f003 0306 	and.w	r3, r3, #6
 8006458:	2b04      	cmp	r3, #4
 800645a:	bf08      	it	eq
 800645c:	1aad      	subeq	r5, r5, r2
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	bf0c      	ite	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	2500      	movne	r5, #0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfc4      	itt	gt
 800646e:	1a9b      	subgt	r3, r3, r2
 8006470:	18ed      	addgt	r5, r5, r3
 8006472:	2600      	movs	r6, #0
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xc8>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xa8>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4649      	mov	r1, r9
 8006484:	4638      	mov	r0, r7
 8006486:	47c0      	blx	r8
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xac>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c6      	b.n	8006426 <_printf_common+0x3e>
 8006498:	18e1      	adds	r1, r4, r3
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	2030      	movs	r0, #48	; 0x30
 800649e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a2:	4422      	add	r2, r4
 80064a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7c7      	b.n	8006440 <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa4>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x8e>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	460c      	mov	r4, r1
 80064ca:	4691      	mov	r9, r2
 80064cc:	7e27      	ldrb	r7, [r4, #24]
 80064ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064d0:	2f78      	cmp	r7, #120	; 0x78
 80064d2:	4680      	mov	r8, r0
 80064d4:	469a      	mov	sl, r3
 80064d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	; 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d8 	beq.w	8006696 <_printf_i+0x1d2>
 80064e6:	2f58      	cmp	r7, #88	; 0x58
 80064e8:	f000 80a3 	beq.w	8006632 <_printf_i+0x16e>
 80064ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a001      	add	r0, pc, #4	; (adr r0, 8006504 <_printf_i+0x40>)
 8006500:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	0800667d 	.word	0x0800667d
 8006534:	080065a1 	.word	0x080065a1
 8006538:	0800665f 	.word	0x0800665f
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	0800669f 	.word	0x0800669f
 8006548:	080064ed 	.word	0x080064ed
 800654c:	080065a1 	.word	0x080065a1
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006667 	.word	0x08006667
 800655c:	680b      	ldr	r3, [r1, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	600a      	str	r2, [r1, #0]
 8006564:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e0a3      	b.n	80066b8 <_printf_i+0x1f4>
 8006570:	6825      	ldr	r5, [r4, #0]
 8006572:	6808      	ldr	r0, [r1, #0]
 8006574:	062e      	lsls	r6, r5, #24
 8006576:	f100 0304 	add.w	r3, r0, #4
 800657a:	d50a      	bpl.n	8006592 <_printf_i+0xce>
 800657c:	6805      	ldr	r5, [r0, #0]
 800657e:	600b      	str	r3, [r1, #0]
 8006580:	2d00      	cmp	r5, #0
 8006582:	da03      	bge.n	800658c <_printf_i+0xc8>
 8006584:	232d      	movs	r3, #45	; 0x2d
 8006586:	426d      	negs	r5, r5
 8006588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658c:	485e      	ldr	r0, [pc, #376]	; (8006708 <_printf_i+0x244>)
 800658e:	230a      	movs	r3, #10
 8006590:	e019      	b.n	80065c6 <_printf_i+0x102>
 8006592:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006596:	6805      	ldr	r5, [r0, #0]
 8006598:	600b      	str	r3, [r1, #0]
 800659a:	bf18      	it	ne
 800659c:	b22d      	sxthne	r5, r5
 800659e:	e7ef      	b.n	8006580 <_printf_i+0xbc>
 80065a0:	680b      	ldr	r3, [r1, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	1d18      	adds	r0, r3, #4
 80065a6:	6008      	str	r0, [r1, #0]
 80065a8:	0628      	lsls	r0, r5, #24
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0xec>
 80065ac:	681d      	ldr	r5, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0xf2>
 80065b0:	0669      	lsls	r1, r5, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0xe8>
 80065b4:	881d      	ldrh	r5, [r3, #0]
 80065b6:	4854      	ldr	r0, [pc, #336]	; (8006708 <_printf_i+0x244>)
 80065b8:	2f6f      	cmp	r7, #111	; 0x6f
 80065ba:	bf0c      	ite	eq
 80065bc:	2308      	moveq	r3, #8
 80065be:	230a      	movne	r3, #10
 80065c0:	2100      	movs	r1, #0
 80065c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c6:	6866      	ldr	r6, [r4, #4]
 80065c8:	60a6      	str	r6, [r4, #8]
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	bfa2      	ittt	ge
 80065ce:	6821      	ldrge	r1, [r4, #0]
 80065d0:	f021 0104 	bicge.w	r1, r1, #4
 80065d4:	6021      	strge	r1, [r4, #0]
 80065d6:	b90d      	cbnz	r5, 80065dc <_printf_i+0x118>
 80065d8:	2e00      	cmp	r6, #0
 80065da:	d04d      	beq.n	8006678 <_printf_i+0x1b4>
 80065dc:	4616      	mov	r6, r2
 80065de:	fbb5 f1f3 	udiv	r1, r5, r3
 80065e2:	fb03 5711 	mls	r7, r3, r1, r5
 80065e6:	5dc7      	ldrb	r7, [r0, r7]
 80065e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065ec:	462f      	mov	r7, r5
 80065ee:	42bb      	cmp	r3, r7
 80065f0:	460d      	mov	r5, r1
 80065f2:	d9f4      	bls.n	80065de <_printf_i+0x11a>
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d10b      	bne.n	8006610 <_printf_i+0x14c>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	07df      	lsls	r7, r3, #31
 80065fc:	d508      	bpl.n	8006610 <_printf_i+0x14c>
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	6861      	ldr	r1, [r4, #4]
 8006602:	4299      	cmp	r1, r3
 8006604:	bfde      	ittt	le
 8006606:	2330      	movle	r3, #48	; 0x30
 8006608:	f806 3c01 	strble.w	r3, [r6, #-1]
 800660c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006610:	1b92      	subs	r2, r2, r6
 8006612:	6122      	str	r2, [r4, #16]
 8006614:	f8cd a000 	str.w	sl, [sp]
 8006618:	464b      	mov	r3, r9
 800661a:	aa03      	add	r2, sp, #12
 800661c:	4621      	mov	r1, r4
 800661e:	4640      	mov	r0, r8
 8006620:	f7ff fee2 	bl	80063e8 <_printf_common>
 8006624:	3001      	adds	r0, #1
 8006626:	d14c      	bne.n	80066c2 <_printf_i+0x1fe>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	b004      	add	sp, #16
 800662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006632:	4835      	ldr	r0, [pc, #212]	; (8006708 <_printf_i+0x244>)
 8006634:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	680e      	ldr	r6, [r1, #0]
 800663c:	061f      	lsls	r7, r3, #24
 800663e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006642:	600e      	str	r6, [r1, #0]
 8006644:	d514      	bpl.n	8006670 <_printf_i+0x1ac>
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	bf44      	itt	mi
 800664a:	f043 0320 	orrmi.w	r3, r3, #32
 800664e:	6023      	strmi	r3, [r4, #0]
 8006650:	b91d      	cbnz	r5, 800665a <_printf_i+0x196>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f023 0320 	bic.w	r3, r3, #32
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	2310      	movs	r3, #16
 800665c:	e7b0      	b.n	80065c0 <_printf_i+0xfc>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	f043 0320 	orr.w	r3, r3, #32
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	2378      	movs	r3, #120	; 0x78
 8006668:	4828      	ldr	r0, [pc, #160]	; (800670c <_printf_i+0x248>)
 800666a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800666e:	e7e3      	b.n	8006638 <_printf_i+0x174>
 8006670:	065e      	lsls	r6, r3, #25
 8006672:	bf48      	it	mi
 8006674:	b2ad      	uxthmi	r5, r5
 8006676:	e7e6      	b.n	8006646 <_printf_i+0x182>
 8006678:	4616      	mov	r6, r2
 800667a:	e7bb      	b.n	80065f4 <_printf_i+0x130>
 800667c:	680b      	ldr	r3, [r1, #0]
 800667e:	6826      	ldr	r6, [r4, #0]
 8006680:	6960      	ldr	r0, [r4, #20]
 8006682:	1d1d      	adds	r5, r3, #4
 8006684:	600d      	str	r5, [r1, #0]
 8006686:	0635      	lsls	r5, r6, #24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	d501      	bpl.n	8006690 <_printf_i+0x1cc>
 800668c:	6018      	str	r0, [r3, #0]
 800668e:	e002      	b.n	8006696 <_printf_i+0x1d2>
 8006690:	0671      	lsls	r1, r6, #25
 8006692:	d5fb      	bpl.n	800668c <_printf_i+0x1c8>
 8006694:	8018      	strh	r0, [r3, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	4616      	mov	r6, r2
 800669c:	e7ba      	b.n	8006614 <_printf_i+0x150>
 800669e:	680b      	ldr	r3, [r1, #0]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	600a      	str	r2, [r1, #0]
 80066a4:	681e      	ldr	r6, [r3, #0]
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	2100      	movs	r1, #0
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7f9 fda0 	bl	80001f0 <memchr>
 80066b0:	b108      	cbz	r0, 80066b6 <_printf_i+0x1f2>
 80066b2:	1b80      	subs	r0, r0, r6
 80066b4:	6060      	str	r0, [r4, #4]
 80066b6:	6863      	ldr	r3, [r4, #4]
 80066b8:	6123      	str	r3, [r4, #16]
 80066ba:	2300      	movs	r3, #0
 80066bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c0:	e7a8      	b.n	8006614 <_printf_i+0x150>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	4632      	mov	r2, r6
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	47d0      	blx	sl
 80066cc:	3001      	adds	r0, #1
 80066ce:	d0ab      	beq.n	8006628 <_printf_i+0x164>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	079b      	lsls	r3, r3, #30
 80066d4:	d413      	bmi.n	80066fe <_printf_i+0x23a>
 80066d6:	68e0      	ldr	r0, [r4, #12]
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	4298      	cmp	r0, r3
 80066dc:	bfb8      	it	lt
 80066de:	4618      	movlt	r0, r3
 80066e0:	e7a4      	b.n	800662c <_printf_i+0x168>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4632      	mov	r2, r6
 80066e6:	4649      	mov	r1, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	47d0      	blx	sl
 80066ec:	3001      	adds	r0, #1
 80066ee:	d09b      	beq.n	8006628 <_printf_i+0x164>
 80066f0:	3501      	adds	r5, #1
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	9903      	ldr	r1, [sp, #12]
 80066f6:	1a5b      	subs	r3, r3, r1
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dcf2      	bgt.n	80066e2 <_printf_i+0x21e>
 80066fc:	e7eb      	b.n	80066d6 <_printf_i+0x212>
 80066fe:	2500      	movs	r5, #0
 8006700:	f104 0619 	add.w	r6, r4, #25
 8006704:	e7f5      	b.n	80066f2 <_printf_i+0x22e>
 8006706:	bf00      	nop
 8006708:	080092e2 	.word	0x080092e2
 800670c:	080092f3 	.word	0x080092f3

08006710 <realloc>:
 8006710:	4b02      	ldr	r3, [pc, #8]	; (800671c <realloc+0xc>)
 8006712:	460a      	mov	r2, r1
 8006714:	4601      	mov	r1, r0
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	f001 ba47 	b.w	8007baa <_realloc_r>
 800671c:	2000001c 	.word	0x2000001c

08006720 <_sbrk_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d06      	ldr	r5, [pc, #24]	; (800673c <_sbrk_r+0x1c>)
 8006724:	2300      	movs	r3, #0
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7fc fe5c 	bl	80033e8 <_sbrk>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_sbrk_r+0x1a>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_sbrk_r+0x1a>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20000534 	.word	0x20000534

08006740 <siprintf>:
 8006740:	b40e      	push	{r1, r2, r3}
 8006742:	b500      	push	{lr}
 8006744:	b09c      	sub	sp, #112	; 0x70
 8006746:	ab1d      	add	r3, sp, #116	; 0x74
 8006748:	9002      	str	r0, [sp, #8]
 800674a:	9006      	str	r0, [sp, #24]
 800674c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006750:	4809      	ldr	r0, [pc, #36]	; (8006778 <siprintf+0x38>)
 8006752:	9107      	str	r1, [sp, #28]
 8006754:	9104      	str	r1, [sp, #16]
 8006756:	4909      	ldr	r1, [pc, #36]	; (800677c <siprintf+0x3c>)
 8006758:	f853 2b04 	ldr.w	r2, [r3], #4
 800675c:	9105      	str	r1, [sp, #20]
 800675e:	6800      	ldr	r0, [r0, #0]
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	a902      	add	r1, sp, #8
 8006764:	f001 faa2 	bl	8007cac <_svfiprintf_r>
 8006768:	9b02      	ldr	r3, [sp, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	b01c      	add	sp, #112	; 0x70
 8006770:	f85d eb04 	ldr.w	lr, [sp], #4
 8006774:	b003      	add	sp, #12
 8006776:	4770      	bx	lr
 8006778:	2000001c 	.word	0x2000001c
 800677c:	ffff0208 	.word	0xffff0208

08006780 <quorem>:
 8006780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	6903      	ldr	r3, [r0, #16]
 8006786:	690c      	ldr	r4, [r1, #16]
 8006788:	42a3      	cmp	r3, r4
 800678a:	4607      	mov	r7, r0
 800678c:	f2c0 8081 	blt.w	8006892 <quorem+0x112>
 8006790:	3c01      	subs	r4, #1
 8006792:	f101 0814 	add.w	r8, r1, #20
 8006796:	f100 0514 	add.w	r5, r0, #20
 800679a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067a8:	3301      	adds	r3, #1
 80067aa:	429a      	cmp	r2, r3
 80067ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80067b8:	d331      	bcc.n	800681e <quorem+0x9e>
 80067ba:	f04f 0e00 	mov.w	lr, #0
 80067be:	4640      	mov	r0, r8
 80067c0:	46ac      	mov	ip, r5
 80067c2:	46f2      	mov	sl, lr
 80067c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80067c8:	b293      	uxth	r3, r2
 80067ca:	fb06 e303 	mla	r3, r6, r3, lr
 80067ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ebaa 0303 	sub.w	r3, sl, r3
 80067d8:	0c12      	lsrs	r2, r2, #16
 80067da:	f8dc a000 	ldr.w	sl, [ip]
 80067de:	fb06 e202 	mla	r2, r6, r2, lr
 80067e2:	fa13 f38a 	uxtah	r3, r3, sl
 80067e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067ea:	fa1f fa82 	uxth.w	sl, r2
 80067ee:	f8dc 2000 	ldr.w	r2, [ip]
 80067f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80067f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006800:	4581      	cmp	r9, r0
 8006802:	f84c 3b04 	str.w	r3, [ip], #4
 8006806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800680a:	d2db      	bcs.n	80067c4 <quorem+0x44>
 800680c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006810:	b92b      	cbnz	r3, 800681e <quorem+0x9e>
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	3b04      	subs	r3, #4
 8006816:	429d      	cmp	r5, r3
 8006818:	461a      	mov	r2, r3
 800681a:	d32e      	bcc.n	800687a <quorem+0xfa>
 800681c:	613c      	str	r4, [r7, #16]
 800681e:	4638      	mov	r0, r7
 8006820:	f001 f8b4 	bl	800798c <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	db24      	blt.n	8006872 <quorem+0xf2>
 8006828:	3601      	adds	r6, #1
 800682a:	4628      	mov	r0, r5
 800682c:	f04f 0c00 	mov.w	ip, #0
 8006830:	f858 2b04 	ldr.w	r2, [r8], #4
 8006834:	f8d0 e000 	ldr.w	lr, [r0]
 8006838:	b293      	uxth	r3, r2
 800683a:	ebac 0303 	sub.w	r3, ip, r3
 800683e:	0c12      	lsrs	r2, r2, #16
 8006840:	fa13 f38e 	uxtah	r3, r3, lr
 8006844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800684c:	b29b      	uxth	r3, r3
 800684e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006852:	45c1      	cmp	r9, r8
 8006854:	f840 3b04 	str.w	r3, [r0], #4
 8006858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800685c:	d2e8      	bcs.n	8006830 <quorem+0xb0>
 800685e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006866:	b922      	cbnz	r2, 8006872 <quorem+0xf2>
 8006868:	3b04      	subs	r3, #4
 800686a:	429d      	cmp	r5, r3
 800686c:	461a      	mov	r2, r3
 800686e:	d30a      	bcc.n	8006886 <quorem+0x106>
 8006870:	613c      	str	r4, [r7, #16]
 8006872:	4630      	mov	r0, r6
 8006874:	b003      	add	sp, #12
 8006876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	3b04      	subs	r3, #4
 800687e:	2a00      	cmp	r2, #0
 8006880:	d1cc      	bne.n	800681c <quorem+0x9c>
 8006882:	3c01      	subs	r4, #1
 8006884:	e7c7      	b.n	8006816 <quorem+0x96>
 8006886:	6812      	ldr	r2, [r2, #0]
 8006888:	3b04      	subs	r3, #4
 800688a:	2a00      	cmp	r2, #0
 800688c:	d1f0      	bne.n	8006870 <quorem+0xf0>
 800688e:	3c01      	subs	r4, #1
 8006890:	e7eb      	b.n	800686a <quorem+0xea>
 8006892:	2000      	movs	r0, #0
 8006894:	e7ee      	b.n	8006874 <quorem+0xf4>
	...

08006898 <_dtoa_r>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	ed2d 8b02 	vpush	{d8}
 80068a0:	ec57 6b10 	vmov	r6, r7, d0
 80068a4:	b095      	sub	sp, #84	; 0x54
 80068a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068ac:	9105      	str	r1, [sp, #20]
 80068ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80068b2:	4604      	mov	r4, r0
 80068b4:	9209      	str	r2, [sp, #36]	; 0x24
 80068b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068b8:	b975      	cbnz	r5, 80068d8 <_dtoa_r+0x40>
 80068ba:	2010      	movs	r0, #16
 80068bc:	f7ff f9e0 	bl	8005c80 <malloc>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6260      	str	r0, [r4, #36]	; 0x24
 80068c4:	b920      	cbnz	r0, 80068d0 <_dtoa_r+0x38>
 80068c6:	4bb2      	ldr	r3, [pc, #712]	; (8006b90 <_dtoa_r+0x2f8>)
 80068c8:	21ea      	movs	r1, #234	; 0xea
 80068ca:	48b2      	ldr	r0, [pc, #712]	; (8006b94 <_dtoa_r+0x2fc>)
 80068cc:	f001 faee 	bl	8007eac <__assert_func>
 80068d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068d4:	6005      	str	r5, [r0, #0]
 80068d6:	60c5      	str	r5, [r0, #12]
 80068d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068da:	6819      	ldr	r1, [r3, #0]
 80068dc:	b151      	cbz	r1, 80068f4 <_dtoa_r+0x5c>
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	604a      	str	r2, [r1, #4]
 80068e2:	2301      	movs	r3, #1
 80068e4:	4093      	lsls	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fe11 	bl	8007510 <_Bfree>
 80068ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	1e3b      	subs	r3, r7, #0
 80068f6:	bfb9      	ittee	lt
 80068f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	9303      	strlt	r3, [sp, #12]
 80068fe:	2300      	movge	r3, #0
 8006900:	f8c8 3000 	strge.w	r3, [r8]
 8006904:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006908:	4ba3      	ldr	r3, [pc, #652]	; (8006b98 <_dtoa_r+0x300>)
 800690a:	bfbc      	itt	lt
 800690c:	2201      	movlt	r2, #1
 800690e:	f8c8 2000 	strlt.w	r2, [r8]
 8006912:	ea33 0309 	bics.w	r3, r3, r9
 8006916:	d11b      	bne.n	8006950 <_dtoa_r+0xb8>
 8006918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800691a:	f242 730f 	movw	r3, #9999	; 0x270f
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006924:	4333      	orrs	r3, r6
 8006926:	f000 857a 	beq.w	800741e <_dtoa_r+0xb86>
 800692a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800692c:	b963      	cbnz	r3, 8006948 <_dtoa_r+0xb0>
 800692e:	4b9b      	ldr	r3, [pc, #620]	; (8006b9c <_dtoa_r+0x304>)
 8006930:	e024      	b.n	800697c <_dtoa_r+0xe4>
 8006932:	4b9b      	ldr	r3, [pc, #620]	; (8006ba0 <_dtoa_r+0x308>)
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	9800      	ldr	r0, [sp, #0]
 800693e:	b015      	add	sp, #84	; 0x54
 8006940:	ecbd 8b02 	vpop	{d8}
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	4b94      	ldr	r3, [pc, #592]	; (8006b9c <_dtoa_r+0x304>)
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	3303      	adds	r3, #3
 800694e:	e7f3      	b.n	8006938 <_dtoa_r+0xa0>
 8006950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	ec51 0b17 	vmov	r0, r1, d7
 800695a:	2300      	movs	r3, #0
 800695c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006960:	f7fa f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006964:	4680      	mov	r8, r0
 8006966:	b158      	cbz	r0, 8006980 <_dtoa_r+0xe8>
 8006968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800696a:	2301      	movs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8551 	beq.w	8007418 <_dtoa_r+0xb80>
 8006976:	488b      	ldr	r0, [pc, #556]	; (8006ba4 <_dtoa_r+0x30c>)
 8006978:	6018      	str	r0, [r3, #0]
 800697a:	1e43      	subs	r3, r0, #1
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	e7dd      	b.n	800693c <_dtoa_r+0xa4>
 8006980:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006984:	aa12      	add	r2, sp, #72	; 0x48
 8006986:	a913      	add	r1, sp, #76	; 0x4c
 8006988:	4620      	mov	r0, r4
 800698a:	f001 f8a3 	bl	8007ad4 <__d2b>
 800698e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006992:	4683      	mov	fp, r0
 8006994:	2d00      	cmp	r5, #0
 8006996:	d07c      	beq.n	8006a92 <_dtoa_r+0x1fa>
 8006998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800699e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80069a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069b2:	4b7d      	ldr	r3, [pc, #500]	; (8006ba8 <_dtoa_r+0x310>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fc6d 	bl	8000298 <__aeabi_dsub>
 80069be:	a36e      	add	r3, pc, #440	; (adr r3, 8006b78 <_dtoa_r+0x2e0>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fe20 	bl	8000608 <__aeabi_dmul>
 80069c8:	a36d      	add	r3, pc, #436	; (adr r3, 8006b80 <_dtoa_r+0x2e8>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fc65 	bl	800029c <__adddf3>
 80069d2:	4606      	mov	r6, r0
 80069d4:	4628      	mov	r0, r5
 80069d6:	460f      	mov	r7, r1
 80069d8:	f7f9 fdac 	bl	8000534 <__aeabi_i2d>
 80069dc:	a36a      	add	r3, pc, #424	; (adr r3, 8006b88 <_dtoa_r+0x2f0>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fe11 	bl	8000608 <__aeabi_dmul>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4630      	mov	r0, r6
 80069ec:	4639      	mov	r1, r7
 80069ee:	f7f9 fc55 	bl	800029c <__adddf3>
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	f7fa f8b7 	bl	8000b68 <__aeabi_d2iz>
 80069fa:	2200      	movs	r2, #0
 80069fc:	4682      	mov	sl, r0
 80069fe:	2300      	movs	r3, #0
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7fa f872 	bl	8000aec <__aeabi_dcmplt>
 8006a08:	b148      	cbz	r0, 8006a1e <_dtoa_r+0x186>
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	f7f9 fd92 	bl	8000534 <__aeabi_i2d>
 8006a10:	4632      	mov	r2, r6
 8006a12:	463b      	mov	r3, r7
 8006a14:	f7fa f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a18:	b908      	cbnz	r0, 8006a1e <_dtoa_r+0x186>
 8006a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a1e:	f1ba 0f16 	cmp.w	sl, #22
 8006a22:	d854      	bhi.n	8006ace <_dtoa_r+0x236>
 8006a24:	4b61      	ldr	r3, [pc, #388]	; (8006bac <_dtoa_r+0x314>)
 8006a26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a32:	f7fa f85b 	bl	8000aec <__aeabi_dcmplt>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d04b      	beq.n	8006ad2 <_dtoa_r+0x23a>
 8006a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a3e:	2300      	movs	r3, #0
 8006a40:	930e      	str	r3, [sp, #56]	; 0x38
 8006a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a44:	1b5d      	subs	r5, r3, r5
 8006a46:	1e6b      	subs	r3, r5, #1
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	bf43      	ittte	mi
 8006a4c:	2300      	movmi	r3, #0
 8006a4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006a52:	9304      	strmi	r3, [sp, #16]
 8006a54:	f04f 0800 	movpl.w	r8, #0
 8006a58:	f1ba 0f00 	cmp.w	sl, #0
 8006a5c:	db3b      	blt.n	8006ad6 <_dtoa_r+0x23e>
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006a64:	4453      	add	r3, sl
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9306      	str	r3, [sp, #24]
 8006a6c:	9b05      	ldr	r3, [sp, #20]
 8006a6e:	2b09      	cmp	r3, #9
 8006a70:	d869      	bhi.n	8006b46 <_dtoa_r+0x2ae>
 8006a72:	2b05      	cmp	r3, #5
 8006a74:	bfc4      	itt	gt
 8006a76:	3b04      	subgt	r3, #4
 8006a78:	9305      	strgt	r3, [sp, #20]
 8006a7a:	9b05      	ldr	r3, [sp, #20]
 8006a7c:	f1a3 0302 	sub.w	r3, r3, #2
 8006a80:	bfcc      	ite	gt
 8006a82:	2500      	movgt	r5, #0
 8006a84:	2501      	movle	r5, #1
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d869      	bhi.n	8006b5e <_dtoa_r+0x2c6>
 8006a8a:	e8df f003 	tbb	[pc, r3]
 8006a8e:	4e2c      	.short	0x4e2c
 8006a90:	5a4c      	.short	0x5a4c
 8006a92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a96:	441d      	add	r5, r3
 8006a98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	bfc1      	itttt	gt
 8006aa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006aa4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006aa8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006aac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ab0:	bfda      	itte	le
 8006ab2:	f1c3 0320 	rsble	r3, r3, #32
 8006ab6:	fa06 f003 	lslle.w	r0, r6, r3
 8006aba:	4318      	orrgt	r0, r3
 8006abc:	f7f9 fd2a 	bl	8000514 <__aeabi_ui2d>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ac8:	3d01      	subs	r5, #1
 8006aca:	9310      	str	r3, [sp, #64]	; 0x40
 8006acc:	e771      	b.n	80069b2 <_dtoa_r+0x11a>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e7b6      	b.n	8006a40 <_dtoa_r+0x1a8>
 8006ad2:	900e      	str	r0, [sp, #56]	; 0x38
 8006ad4:	e7b5      	b.n	8006a42 <_dtoa_r+0x1aa>
 8006ad6:	f1ca 0300 	rsb	r3, sl, #0
 8006ada:	9306      	str	r3, [sp, #24]
 8006adc:	2300      	movs	r3, #0
 8006ade:	eba8 080a 	sub.w	r8, r8, sl
 8006ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ae4:	e7c2      	b.n	8006a6c <_dtoa_r+0x1d4>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9308      	str	r3, [sp, #32]
 8006aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dc39      	bgt.n	8006b64 <_dtoa_r+0x2cc>
 8006af0:	f04f 0901 	mov.w	r9, #1
 8006af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006af8:	464b      	mov	r3, r9
 8006afa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b00:	2200      	movs	r2, #0
 8006b02:	6042      	str	r2, [r0, #4]
 8006b04:	2204      	movs	r2, #4
 8006b06:	f102 0614 	add.w	r6, r2, #20
 8006b0a:	429e      	cmp	r6, r3
 8006b0c:	6841      	ldr	r1, [r0, #4]
 8006b0e:	d92f      	bls.n	8006b70 <_dtoa_r+0x2d8>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fcbd 	bl	8007490 <_Balloc>
 8006b16:	9000      	str	r0, [sp, #0]
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d14b      	bne.n	8006bb4 <_dtoa_r+0x31c>
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <_dtoa_r+0x318>)
 8006b1e:	4602      	mov	r2, r0
 8006b20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b24:	e6d1      	b.n	80068ca <_dtoa_r+0x32>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e7de      	b.n	8006ae8 <_dtoa_r+0x250>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9308      	str	r3, [sp, #32]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	eb0a 0903 	add.w	r9, sl, r3
 8006b34:	f109 0301 	add.w	r3, r9, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	bfb8      	it	lt
 8006b3e:	2301      	movlt	r3, #1
 8006b40:	e7dd      	b.n	8006afe <_dtoa_r+0x266>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e7f2      	b.n	8006b2c <_dtoa_r+0x294>
 8006b46:	2501      	movs	r5, #1
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	9508      	str	r5, [sp, #32]
 8006b4e:	f04f 39ff 	mov.w	r9, #4294967295
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b58:	2312      	movs	r3, #18
 8006b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b5c:	e7cf      	b.n	8006afe <_dtoa_r+0x266>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	e7f4      	b.n	8006b4e <_dtoa_r+0x2b6>
 8006b64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	e7c6      	b.n	8006afe <_dtoa_r+0x266>
 8006b70:	3101      	adds	r1, #1
 8006b72:	6041      	str	r1, [r0, #4]
 8006b74:	0052      	lsls	r2, r2, #1
 8006b76:	e7c6      	b.n	8006b06 <_dtoa_r+0x26e>
 8006b78:	636f4361 	.word	0x636f4361
 8006b7c:	3fd287a7 	.word	0x3fd287a7
 8006b80:	8b60c8b3 	.word	0x8b60c8b3
 8006b84:	3fc68a28 	.word	0x3fc68a28
 8006b88:	509f79fb 	.word	0x509f79fb
 8006b8c:	3fd34413 	.word	0x3fd34413
 8006b90:	08009311 	.word	0x08009311
 8006b94:	08009328 	.word	0x08009328
 8006b98:	7ff00000 	.word	0x7ff00000
 8006b9c:	0800930d 	.word	0x0800930d
 8006ba0:	08009304 	.word	0x08009304
 8006ba4:	080092e1 	.word	0x080092e1
 8006ba8:	3ff80000 	.word	0x3ff80000
 8006bac:	08009420 	.word	0x08009420
 8006bb0:	08009387 	.word	0x08009387
 8006bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb6:	9a00      	ldr	r2, [sp, #0]
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	9b01      	ldr	r3, [sp, #4]
 8006bbc:	2b0e      	cmp	r3, #14
 8006bbe:	f200 80ad 	bhi.w	8006d1c <_dtoa_r+0x484>
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	f000 80aa 	beq.w	8006d1c <_dtoa_r+0x484>
 8006bc8:	f1ba 0f00 	cmp.w	sl, #0
 8006bcc:	dd36      	ble.n	8006c3c <_dtoa_r+0x3a4>
 8006bce:	4ac3      	ldr	r2, [pc, #780]	; (8006edc <_dtoa_r+0x644>)
 8006bd0:	f00a 030f 	and.w	r3, sl, #15
 8006bd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bd8:	ed93 7b00 	vldr	d7, [r3]
 8006bdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006be0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006be4:	eeb0 8a47 	vmov.f32	s16, s14
 8006be8:	eef0 8a67 	vmov.f32	s17, s15
 8006bec:	d016      	beq.n	8006c1c <_dtoa_r+0x384>
 8006bee:	4bbc      	ldr	r3, [pc, #752]	; (8006ee0 <_dtoa_r+0x648>)
 8006bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bf8:	f7f9 fe30 	bl	800085c <__aeabi_ddiv>
 8006bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c00:	f007 070f 	and.w	r7, r7, #15
 8006c04:	2503      	movs	r5, #3
 8006c06:	4eb6      	ldr	r6, [pc, #728]	; (8006ee0 <_dtoa_r+0x648>)
 8006c08:	b957      	cbnz	r7, 8006c20 <_dtoa_r+0x388>
 8006c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c0e:	ec53 2b18 	vmov	r2, r3, d8
 8006c12:	f7f9 fe23 	bl	800085c <__aeabi_ddiv>
 8006c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1a:	e029      	b.n	8006c70 <_dtoa_r+0x3d8>
 8006c1c:	2502      	movs	r5, #2
 8006c1e:	e7f2      	b.n	8006c06 <_dtoa_r+0x36e>
 8006c20:	07f9      	lsls	r1, r7, #31
 8006c22:	d508      	bpl.n	8006c36 <_dtoa_r+0x39e>
 8006c24:	ec51 0b18 	vmov	r0, r1, d8
 8006c28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c2c:	f7f9 fcec 	bl	8000608 <__aeabi_dmul>
 8006c30:	ec41 0b18 	vmov	d8, r0, r1
 8006c34:	3501      	adds	r5, #1
 8006c36:	107f      	asrs	r7, r7, #1
 8006c38:	3608      	adds	r6, #8
 8006c3a:	e7e5      	b.n	8006c08 <_dtoa_r+0x370>
 8006c3c:	f000 80a6 	beq.w	8006d8c <_dtoa_r+0x4f4>
 8006c40:	f1ca 0600 	rsb	r6, sl, #0
 8006c44:	4ba5      	ldr	r3, [pc, #660]	; (8006edc <_dtoa_r+0x644>)
 8006c46:	4fa6      	ldr	r7, [pc, #664]	; (8006ee0 <_dtoa_r+0x648>)
 8006c48:	f006 020f 	and.w	r2, r6, #15
 8006c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c58:	f7f9 fcd6 	bl	8000608 <__aeabi_dmul>
 8006c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c60:	1136      	asrs	r6, r6, #4
 8006c62:	2300      	movs	r3, #0
 8006c64:	2502      	movs	r5, #2
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	f040 8085 	bne.w	8006d76 <_dtoa_r+0x4de>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1d2      	bne.n	8006c16 <_dtoa_r+0x37e>
 8006c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 808c 	beq.w	8006d90 <_dtoa_r+0x4f8>
 8006c78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c7c:	4b99      	ldr	r3, [pc, #612]	; (8006ee4 <_dtoa_r+0x64c>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4630      	mov	r0, r6
 8006c82:	4639      	mov	r1, r7
 8006c84:	f7f9 ff32 	bl	8000aec <__aeabi_dcmplt>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f000 8081 	beq.w	8006d90 <_dtoa_r+0x4f8>
 8006c8e:	9b01      	ldr	r3, [sp, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d07d      	beq.n	8006d90 <_dtoa_r+0x4f8>
 8006c94:	f1b9 0f00 	cmp.w	r9, #0
 8006c98:	dd3c      	ble.n	8006d14 <_dtoa_r+0x47c>
 8006c9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4b91      	ldr	r3, [pc, #580]	; (8006ee8 <_dtoa_r+0x650>)
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	f7f9 fcae 	bl	8000608 <__aeabi_dmul>
 8006cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006cb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7f9 fc3a 	bl	8000534 <__aeabi_i2d>
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	f7f9 fca0 	bl	8000608 <__aeabi_dmul>
 8006cc8:	4b88      	ldr	r3, [pc, #544]	; (8006eec <_dtoa_r+0x654>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f7f9 fae6 	bl	800029c <__adddf3>
 8006cd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d15c      	bne.n	8006d9a <_dtoa_r+0x502>
 8006ce0:	4b83      	ldr	r3, [pc, #524]	; (8006ef0 <_dtoa_r+0x658>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fad6 	bl	8000298 <__aeabi_dsub>
 8006cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	460f      	mov	r7, r1
 8006cf4:	f7f9 ff18 	bl	8000b28 <__aeabi_dcmpgt>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f040 8296 	bne.w	800722a <_dtoa_r+0x992>
 8006cfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d02:	4630      	mov	r0, r6
 8006d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d08:	4639      	mov	r1, r7
 8006d0a:	f7f9 feef 	bl	8000aec <__aeabi_dcmplt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f040 8288 	bne.w	8007224 <_dtoa_r+0x98c>
 8006d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f2c0 8158 	blt.w	8006fd4 <_dtoa_r+0x73c>
 8006d24:	f1ba 0f0e 	cmp.w	sl, #14
 8006d28:	f300 8154 	bgt.w	8006fd4 <_dtoa_r+0x73c>
 8006d2c:	4b6b      	ldr	r3, [pc, #428]	; (8006edc <_dtoa_r+0x644>)
 8006d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f280 80e3 	bge.w	8006f04 <_dtoa_r+0x66c>
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f300 80df 	bgt.w	8006f04 <_dtoa_r+0x66c>
 8006d46:	f040 826d 	bne.w	8007224 <_dtoa_r+0x98c>
 8006d4a:	4b69      	ldr	r3, [pc, #420]	; (8006ef0 <_dtoa_r+0x658>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fc59 	bl	8000608 <__aeabi_dmul>
 8006d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d5a:	f7f9 fedb 	bl	8000b14 <__aeabi_dcmpge>
 8006d5e:	9e01      	ldr	r6, [sp, #4]
 8006d60:	4637      	mov	r7, r6
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f040 8243 	bne.w	80071ee <_dtoa_r+0x956>
 8006d68:	9d00      	ldr	r5, [sp, #0]
 8006d6a:	2331      	movs	r3, #49	; 0x31
 8006d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8006d70:	f10a 0a01 	add.w	sl, sl, #1
 8006d74:	e23f      	b.n	80071f6 <_dtoa_r+0x95e>
 8006d76:	07f2      	lsls	r2, r6, #31
 8006d78:	d505      	bpl.n	8006d86 <_dtoa_r+0x4ee>
 8006d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7e:	f7f9 fc43 	bl	8000608 <__aeabi_dmul>
 8006d82:	3501      	adds	r5, #1
 8006d84:	2301      	movs	r3, #1
 8006d86:	1076      	asrs	r6, r6, #1
 8006d88:	3708      	adds	r7, #8
 8006d8a:	e76c      	b.n	8006c66 <_dtoa_r+0x3ce>
 8006d8c:	2502      	movs	r5, #2
 8006d8e:	e76f      	b.n	8006c70 <_dtoa_r+0x3d8>
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d96:	930c      	str	r3, [sp, #48]	; 0x30
 8006d98:	e78d      	b.n	8006cb6 <_dtoa_r+0x41e>
 8006d9a:	9900      	ldr	r1, [sp, #0]
 8006d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006da0:	4b4e      	ldr	r3, [pc, #312]	; (8006edc <_dtoa_r+0x644>)
 8006da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006da6:	4401      	add	r1, r0
 8006da8:	9102      	str	r1, [sp, #8]
 8006daa:	9908      	ldr	r1, [sp, #32]
 8006dac:	eeb0 8a47 	vmov.f32	s16, s14
 8006db0:	eef0 8a67 	vmov.f32	s17, s15
 8006db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	d045      	beq.n	8006e4c <_dtoa_r+0x5b4>
 8006dc0:	494c      	ldr	r1, [pc, #304]	; (8006ef4 <_dtoa_r+0x65c>)
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f7f9 fd4a 	bl	800085c <__aeabi_ddiv>
 8006dc8:	ec53 2b18 	vmov	r2, r3, d8
 8006dcc:	f7f9 fa64 	bl	8000298 <__aeabi_dsub>
 8006dd0:	9d00      	ldr	r5, [sp, #0]
 8006dd2:	ec41 0b18 	vmov	d8, r0, r1
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7f9 fec5 	bl	8000b68 <__aeabi_d2iz>
 8006dde:	900c      	str	r0, [sp, #48]	; 0x30
 8006de0:	f7f9 fba8 	bl	8000534 <__aeabi_i2d>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4630      	mov	r0, r6
 8006dea:	4639      	mov	r1, r7
 8006dec:	f7f9 fa54 	bl	8000298 <__aeabi_dsub>
 8006df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df2:	3330      	adds	r3, #48	; 0x30
 8006df4:	f805 3b01 	strb.w	r3, [r5], #1
 8006df8:	ec53 2b18 	vmov	r2, r3, d8
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	460f      	mov	r7, r1
 8006e00:	f7f9 fe74 	bl	8000aec <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d165      	bne.n	8006ed4 <_dtoa_r+0x63c>
 8006e08:	4632      	mov	r2, r6
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	4935      	ldr	r1, [pc, #212]	; (8006ee4 <_dtoa_r+0x64c>)
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f7f9 fa42 	bl	8000298 <__aeabi_dsub>
 8006e14:	ec53 2b18 	vmov	r2, r3, d8
 8006e18:	f7f9 fe68 	bl	8000aec <__aeabi_dcmplt>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f040 80b9 	bne.w	8006f94 <_dtoa_r+0x6fc>
 8006e22:	9b02      	ldr	r3, [sp, #8]
 8006e24:	429d      	cmp	r5, r3
 8006e26:	f43f af75 	beq.w	8006d14 <_dtoa_r+0x47c>
 8006e2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ee8 <_dtoa_r+0x650>)
 8006e2c:	ec51 0b18 	vmov	r0, r1, d8
 8006e30:	2200      	movs	r2, #0
 8006e32:	f7f9 fbe9 	bl	8000608 <__aeabi_dmul>
 8006e36:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <_dtoa_r+0x650>)
 8006e38:	ec41 0b18 	vmov	d8, r0, r1
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fbe1 	bl	8000608 <__aeabi_dmul>
 8006e46:	4606      	mov	r6, r0
 8006e48:	460f      	mov	r7, r1
 8006e4a:	e7c4      	b.n	8006dd6 <_dtoa_r+0x53e>
 8006e4c:	ec51 0b17 	vmov	r0, r1, d7
 8006e50:	f7f9 fbda 	bl	8000608 <__aeabi_dmul>
 8006e54:	9b02      	ldr	r3, [sp, #8]
 8006e56:	9d00      	ldr	r5, [sp, #0]
 8006e58:	930c      	str	r3, [sp, #48]	; 0x30
 8006e5a:	ec41 0b18 	vmov	d8, r0, r1
 8006e5e:	4639      	mov	r1, r7
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7f9 fe81 	bl	8000b68 <__aeabi_d2iz>
 8006e66:	9011      	str	r0, [sp, #68]	; 0x44
 8006e68:	f7f9 fb64 	bl	8000534 <__aeabi_i2d>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 fa10 	bl	8000298 <__aeabi_dsub>
 8006e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e7a:	3330      	adds	r3, #48	; 0x30
 8006e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e80:	9b02      	ldr	r3, [sp, #8]
 8006e82:	429d      	cmp	r5, r3
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	d134      	bne.n	8006ef8 <_dtoa_r+0x660>
 8006e8e:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <_dtoa_r+0x65c>)
 8006e90:	ec51 0b18 	vmov	r0, r1, d8
 8006e94:	f7f9 fa02 	bl	800029c <__adddf3>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fe42 	bl	8000b28 <__aeabi_dcmpgt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d175      	bne.n	8006f94 <_dtoa_r+0x6fc>
 8006ea8:	ec53 2b18 	vmov	r2, r3, d8
 8006eac:	4911      	ldr	r1, [pc, #68]	; (8006ef4 <_dtoa_r+0x65c>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7f9 f9f2 	bl	8000298 <__aeabi_dsub>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	f7f9 fe16 	bl	8000aec <__aeabi_dcmplt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f43f af27 	beq.w	8006d14 <_dtoa_r+0x47c>
 8006ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ec8:	1e6b      	subs	r3, r5, #1
 8006eca:	930c      	str	r3, [sp, #48]	; 0x30
 8006ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ed0:	2b30      	cmp	r3, #48	; 0x30
 8006ed2:	d0f8      	beq.n	8006ec6 <_dtoa_r+0x62e>
 8006ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ed8:	e04a      	b.n	8006f70 <_dtoa_r+0x6d8>
 8006eda:	bf00      	nop
 8006edc:	08009420 	.word	0x08009420
 8006ee0:	080093f8 	.word	0x080093f8
 8006ee4:	3ff00000 	.word	0x3ff00000
 8006ee8:	40240000 	.word	0x40240000
 8006eec:	401c0000 	.word	0x401c0000
 8006ef0:	40140000 	.word	0x40140000
 8006ef4:	3fe00000 	.word	0x3fe00000
 8006ef8:	4baf      	ldr	r3, [pc, #700]	; (80071b8 <_dtoa_r+0x920>)
 8006efa:	f7f9 fb85 	bl	8000608 <__aeabi_dmul>
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	e7ac      	b.n	8006e5e <_dtoa_r+0x5c6>
 8006f04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f08:	9d00      	ldr	r5, [sp, #0]
 8006f0a:	4642      	mov	r2, r8
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4639      	mov	r1, r7
 8006f12:	f7f9 fca3 	bl	800085c <__aeabi_ddiv>
 8006f16:	f7f9 fe27 	bl	8000b68 <__aeabi_d2iz>
 8006f1a:	9002      	str	r0, [sp, #8]
 8006f1c:	f7f9 fb0a 	bl	8000534 <__aeabi_i2d>
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 f9b2 	bl	8000298 <__aeabi_dsub>
 8006f34:	9e02      	ldr	r6, [sp, #8]
 8006f36:	9f01      	ldr	r7, [sp, #4]
 8006f38:	3630      	adds	r6, #48	; 0x30
 8006f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8006f3e:	9e00      	ldr	r6, [sp, #0]
 8006f40:	1bae      	subs	r6, r5, r6
 8006f42:	42b7      	cmp	r7, r6
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	d137      	bne.n	8006fba <_dtoa_r+0x722>
 8006f4a:	f7f9 f9a7 	bl	800029c <__adddf3>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	464b      	mov	r3, r9
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	f7f9 fde7 	bl	8000b28 <__aeabi_dcmpgt>
 8006f5a:	b9c8      	cbnz	r0, 8006f90 <_dtoa_r+0x6f8>
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fdb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f68:	b110      	cbz	r0, 8006f70 <_dtoa_r+0x6d8>
 8006f6a:	9b02      	ldr	r3, [sp, #8]
 8006f6c:	07d9      	lsls	r1, r3, #31
 8006f6e:	d40f      	bmi.n	8006f90 <_dtoa_r+0x6f8>
 8006f70:	4620      	mov	r0, r4
 8006f72:	4659      	mov	r1, fp
 8006f74:	f000 facc 	bl	8007510 <_Bfree>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	702b      	strb	r3, [r5, #0]
 8006f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f7e:	f10a 0001 	add.w	r0, sl, #1
 8006f82:	6018      	str	r0, [r3, #0]
 8006f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f43f acd8 	beq.w	800693c <_dtoa_r+0xa4>
 8006f8c:	601d      	str	r5, [r3, #0]
 8006f8e:	e4d5      	b.n	800693c <_dtoa_r+0xa4>
 8006f90:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f94:	462b      	mov	r3, r5
 8006f96:	461d      	mov	r5, r3
 8006f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f9c:	2a39      	cmp	r2, #57	; 0x39
 8006f9e:	d108      	bne.n	8006fb2 <_dtoa_r+0x71a>
 8006fa0:	9a00      	ldr	r2, [sp, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d1f7      	bne.n	8006f96 <_dtoa_r+0x6fe>
 8006fa6:	9a07      	ldr	r2, [sp, #28]
 8006fa8:	9900      	ldr	r1, [sp, #0]
 8006faa:	3201      	adds	r2, #1
 8006fac:	9207      	str	r2, [sp, #28]
 8006fae:	2230      	movs	r2, #48	; 0x30
 8006fb0:	700a      	strb	r2, [r1, #0]
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	3201      	adds	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	e78c      	b.n	8006ed4 <_dtoa_r+0x63c>
 8006fba:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <_dtoa_r+0x920>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f7f9 fb23 	bl	8000608 <__aeabi_dmul>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460f      	mov	r7, r1
 8006fca:	f7f9 fd85 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d09b      	beq.n	8006f0a <_dtoa_r+0x672>
 8006fd2:	e7cd      	b.n	8006f70 <_dtoa_r+0x6d8>
 8006fd4:	9a08      	ldr	r2, [sp, #32]
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	f000 80c4 	beq.w	8007164 <_dtoa_r+0x8cc>
 8006fdc:	9a05      	ldr	r2, [sp, #20]
 8006fde:	2a01      	cmp	r2, #1
 8006fe0:	f300 80a8 	bgt.w	8007134 <_dtoa_r+0x89c>
 8006fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	f000 80a0 	beq.w	800712c <_dtoa_r+0x894>
 8006fec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ff0:	9e06      	ldr	r6, [sp, #24]
 8006ff2:	4645      	mov	r5, r8
 8006ff4:	9a04      	ldr	r2, [sp, #16]
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	441a      	add	r2, r3
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4498      	add	r8, r3
 8006ffe:	9204      	str	r2, [sp, #16]
 8007000:	f000 fb42 	bl	8007688 <__i2b>
 8007004:	4607      	mov	r7, r0
 8007006:	2d00      	cmp	r5, #0
 8007008:	dd0b      	ble.n	8007022 <_dtoa_r+0x78a>
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	dd08      	ble.n	8007022 <_dtoa_r+0x78a>
 8007010:	42ab      	cmp	r3, r5
 8007012:	9a04      	ldr	r2, [sp, #16]
 8007014:	bfa8      	it	ge
 8007016:	462b      	movge	r3, r5
 8007018:	eba8 0803 	sub.w	r8, r8, r3
 800701c:	1aed      	subs	r5, r5, r3
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	9b06      	ldr	r3, [sp, #24]
 8007024:	b1fb      	cbz	r3, 8007066 <_dtoa_r+0x7ce>
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 809f 	beq.w	800716c <_dtoa_r+0x8d4>
 800702e:	2e00      	cmp	r6, #0
 8007030:	dd11      	ble.n	8007056 <_dtoa_r+0x7be>
 8007032:	4639      	mov	r1, r7
 8007034:	4632      	mov	r2, r6
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fbe2 	bl	8007800 <__pow5mult>
 800703c:	465a      	mov	r2, fp
 800703e:	4601      	mov	r1, r0
 8007040:	4607      	mov	r7, r0
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb36 	bl	80076b4 <__multiply>
 8007048:	4659      	mov	r1, fp
 800704a:	9007      	str	r0, [sp, #28]
 800704c:	4620      	mov	r0, r4
 800704e:	f000 fa5f 	bl	8007510 <_Bfree>
 8007052:	9b07      	ldr	r3, [sp, #28]
 8007054:	469b      	mov	fp, r3
 8007056:	9b06      	ldr	r3, [sp, #24]
 8007058:	1b9a      	subs	r2, r3, r6
 800705a:	d004      	beq.n	8007066 <_dtoa_r+0x7ce>
 800705c:	4659      	mov	r1, fp
 800705e:	4620      	mov	r0, r4
 8007060:	f000 fbce 	bl	8007800 <__pow5mult>
 8007064:	4683      	mov	fp, r0
 8007066:	2101      	movs	r1, #1
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fb0d 	bl	8007688 <__i2b>
 800706e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007070:	2b00      	cmp	r3, #0
 8007072:	4606      	mov	r6, r0
 8007074:	dd7c      	ble.n	8007170 <_dtoa_r+0x8d8>
 8007076:	461a      	mov	r2, r3
 8007078:	4601      	mov	r1, r0
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fbc0 	bl	8007800 <__pow5mult>
 8007080:	9b05      	ldr	r3, [sp, #20]
 8007082:	2b01      	cmp	r3, #1
 8007084:	4606      	mov	r6, r0
 8007086:	dd76      	ble.n	8007176 <_dtoa_r+0x8de>
 8007088:	2300      	movs	r3, #0
 800708a:	9306      	str	r3, [sp, #24]
 800708c:	6933      	ldr	r3, [r6, #16]
 800708e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007092:	6918      	ldr	r0, [r3, #16]
 8007094:	f000 faa8 	bl	80075e8 <__hi0bits>
 8007098:	f1c0 0020 	rsb	r0, r0, #32
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	4418      	add	r0, r3
 80070a0:	f010 001f 	ands.w	r0, r0, #31
 80070a4:	f000 8086 	beq.w	80071b4 <_dtoa_r+0x91c>
 80070a8:	f1c0 0320 	rsb	r3, r0, #32
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	dd7f      	ble.n	80071b0 <_dtoa_r+0x918>
 80070b0:	f1c0 001c 	rsb	r0, r0, #28
 80070b4:	9b04      	ldr	r3, [sp, #16]
 80070b6:	4403      	add	r3, r0
 80070b8:	4480      	add	r8, r0
 80070ba:	4405      	add	r5, r0
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	f1b8 0f00 	cmp.w	r8, #0
 80070c2:	dd05      	ble.n	80070d0 <_dtoa_r+0x838>
 80070c4:	4659      	mov	r1, fp
 80070c6:	4642      	mov	r2, r8
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fbf3 	bl	80078b4 <__lshift>
 80070ce:	4683      	mov	fp, r0
 80070d0:	9b04      	ldr	r3, [sp, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dd05      	ble.n	80070e2 <_dtoa_r+0x84a>
 80070d6:	4631      	mov	r1, r6
 80070d8:	461a      	mov	r2, r3
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 fbea 	bl	80078b4 <__lshift>
 80070e0:	4606      	mov	r6, r0
 80070e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d069      	beq.n	80071bc <_dtoa_r+0x924>
 80070e8:	4631      	mov	r1, r6
 80070ea:	4658      	mov	r0, fp
 80070ec:	f000 fc4e 	bl	800798c <__mcmp>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	da63      	bge.n	80071bc <_dtoa_r+0x924>
 80070f4:	2300      	movs	r3, #0
 80070f6:	4659      	mov	r1, fp
 80070f8:	220a      	movs	r2, #10
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fa2a 	bl	8007554 <__multadd>
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007106:	4683      	mov	fp, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 818f 	beq.w	800742c <_dtoa_r+0xb94>
 800710e:	4639      	mov	r1, r7
 8007110:	2300      	movs	r3, #0
 8007112:	220a      	movs	r2, #10
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fa1d 	bl	8007554 <__multadd>
 800711a:	f1b9 0f00 	cmp.w	r9, #0
 800711e:	4607      	mov	r7, r0
 8007120:	f300 808e 	bgt.w	8007240 <_dtoa_r+0x9a8>
 8007124:	9b05      	ldr	r3, [sp, #20]
 8007126:	2b02      	cmp	r3, #2
 8007128:	dc50      	bgt.n	80071cc <_dtoa_r+0x934>
 800712a:	e089      	b.n	8007240 <_dtoa_r+0x9a8>
 800712c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800712e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007132:	e75d      	b.n	8006ff0 <_dtoa_r+0x758>
 8007134:	9b01      	ldr	r3, [sp, #4]
 8007136:	1e5e      	subs	r6, r3, #1
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	42b3      	cmp	r3, r6
 800713c:	bfbf      	itttt	lt
 800713e:	9b06      	ldrlt	r3, [sp, #24]
 8007140:	9606      	strlt	r6, [sp, #24]
 8007142:	1af2      	sublt	r2, r6, r3
 8007144:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007146:	bfb6      	itet	lt
 8007148:	189b      	addlt	r3, r3, r2
 800714a:	1b9e      	subge	r6, r3, r6
 800714c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	bfb8      	it	lt
 8007152:	2600      	movlt	r6, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfb5      	itete	lt
 8007158:	eba8 0503 	sublt.w	r5, r8, r3
 800715c:	9b01      	ldrge	r3, [sp, #4]
 800715e:	2300      	movlt	r3, #0
 8007160:	4645      	movge	r5, r8
 8007162:	e747      	b.n	8006ff4 <_dtoa_r+0x75c>
 8007164:	9e06      	ldr	r6, [sp, #24]
 8007166:	9f08      	ldr	r7, [sp, #32]
 8007168:	4645      	mov	r5, r8
 800716a:	e74c      	b.n	8007006 <_dtoa_r+0x76e>
 800716c:	9a06      	ldr	r2, [sp, #24]
 800716e:	e775      	b.n	800705c <_dtoa_r+0x7c4>
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	2b01      	cmp	r3, #1
 8007174:	dc18      	bgt.n	80071a8 <_dtoa_r+0x910>
 8007176:	9b02      	ldr	r3, [sp, #8]
 8007178:	b9b3      	cbnz	r3, 80071a8 <_dtoa_r+0x910>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007180:	b9a3      	cbnz	r3, 80071ac <_dtoa_r+0x914>
 8007182:	9b03      	ldr	r3, [sp, #12]
 8007184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007188:	0d1b      	lsrs	r3, r3, #20
 800718a:	051b      	lsls	r3, r3, #20
 800718c:	b12b      	cbz	r3, 800719a <_dtoa_r+0x902>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	3301      	adds	r3, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	f108 0801 	add.w	r8, r8, #1
 8007198:	2301      	movs	r3, #1
 800719a:	9306      	str	r3, [sp, #24]
 800719c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f47f af74 	bne.w	800708c <_dtoa_r+0x7f4>
 80071a4:	2001      	movs	r0, #1
 80071a6:	e779      	b.n	800709c <_dtoa_r+0x804>
 80071a8:	2300      	movs	r3, #0
 80071aa:	e7f6      	b.n	800719a <_dtoa_r+0x902>
 80071ac:	9b02      	ldr	r3, [sp, #8]
 80071ae:	e7f4      	b.n	800719a <_dtoa_r+0x902>
 80071b0:	d085      	beq.n	80070be <_dtoa_r+0x826>
 80071b2:	4618      	mov	r0, r3
 80071b4:	301c      	adds	r0, #28
 80071b6:	e77d      	b.n	80070b4 <_dtoa_r+0x81c>
 80071b8:	40240000 	.word	0x40240000
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dc38      	bgt.n	8007234 <_dtoa_r+0x99c>
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	dd35      	ble.n	8007234 <_dtoa_r+0x99c>
 80071c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071cc:	f1b9 0f00 	cmp.w	r9, #0
 80071d0:	d10d      	bne.n	80071ee <_dtoa_r+0x956>
 80071d2:	4631      	mov	r1, r6
 80071d4:	464b      	mov	r3, r9
 80071d6:	2205      	movs	r2, #5
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 f9bb 	bl	8007554 <__multadd>
 80071de:	4601      	mov	r1, r0
 80071e0:	4606      	mov	r6, r0
 80071e2:	4658      	mov	r0, fp
 80071e4:	f000 fbd2 	bl	800798c <__mcmp>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f73f adbd 	bgt.w	8006d68 <_dtoa_r+0x4d0>
 80071ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f0:	9d00      	ldr	r5, [sp, #0]
 80071f2:	ea6f 0a03 	mvn.w	sl, r3
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	4631      	mov	r1, r6
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 f987 	bl	8007510 <_Bfree>
 8007202:	2f00      	cmp	r7, #0
 8007204:	f43f aeb4 	beq.w	8006f70 <_dtoa_r+0x6d8>
 8007208:	f1b8 0f00 	cmp.w	r8, #0
 800720c:	d005      	beq.n	800721a <_dtoa_r+0x982>
 800720e:	45b8      	cmp	r8, r7
 8007210:	d003      	beq.n	800721a <_dtoa_r+0x982>
 8007212:	4641      	mov	r1, r8
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f97b 	bl	8007510 <_Bfree>
 800721a:	4639      	mov	r1, r7
 800721c:	4620      	mov	r0, r4
 800721e:	f000 f977 	bl	8007510 <_Bfree>
 8007222:	e6a5      	b.n	8006f70 <_dtoa_r+0x6d8>
 8007224:	2600      	movs	r6, #0
 8007226:	4637      	mov	r7, r6
 8007228:	e7e1      	b.n	80071ee <_dtoa_r+0x956>
 800722a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800722c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007230:	4637      	mov	r7, r6
 8007232:	e599      	b.n	8006d68 <_dtoa_r+0x4d0>
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80fd 	beq.w	800743a <_dtoa_r+0xba2>
 8007240:	2d00      	cmp	r5, #0
 8007242:	dd05      	ble.n	8007250 <_dtoa_r+0x9b8>
 8007244:	4639      	mov	r1, r7
 8007246:	462a      	mov	r2, r5
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fb33 	bl	80078b4 <__lshift>
 800724e:	4607      	mov	r7, r0
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d05c      	beq.n	8007310 <_dtoa_r+0xa78>
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4620      	mov	r0, r4
 800725a:	f000 f919 	bl	8007490 <_Balloc>
 800725e:	4605      	mov	r5, r0
 8007260:	b928      	cbnz	r0, 800726e <_dtoa_r+0x9d6>
 8007262:	4b80      	ldr	r3, [pc, #512]	; (8007464 <_dtoa_r+0xbcc>)
 8007264:	4602      	mov	r2, r0
 8007266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800726a:	f7ff bb2e 	b.w	80068ca <_dtoa_r+0x32>
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	3202      	adds	r2, #2
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	f107 010c 	add.w	r1, r7, #12
 8007278:	300c      	adds	r0, #12
 800727a:	f7fe fd1f 	bl	8005cbc <memcpy>
 800727e:	2201      	movs	r2, #1
 8007280:	4629      	mov	r1, r5
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fb16 	bl	80078b4 <__lshift>
 8007288:	9b00      	ldr	r3, [sp, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	9b00      	ldr	r3, [sp, #0]
 8007290:	444b      	add	r3, r9
 8007292:	9307      	str	r3, [sp, #28]
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	46b8      	mov	r8, r7
 800729c:	9306      	str	r3, [sp, #24]
 800729e:	4607      	mov	r7, r0
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	4631      	mov	r1, r6
 80072a4:	3b01      	subs	r3, #1
 80072a6:	4658      	mov	r0, fp
 80072a8:	9302      	str	r3, [sp, #8]
 80072aa:	f7ff fa69 	bl	8006780 <quorem>
 80072ae:	4603      	mov	r3, r0
 80072b0:	3330      	adds	r3, #48	; 0x30
 80072b2:	9004      	str	r0, [sp, #16]
 80072b4:	4641      	mov	r1, r8
 80072b6:	4658      	mov	r0, fp
 80072b8:	9308      	str	r3, [sp, #32]
 80072ba:	f000 fb67 	bl	800798c <__mcmp>
 80072be:	463a      	mov	r2, r7
 80072c0:	4681      	mov	r9, r0
 80072c2:	4631      	mov	r1, r6
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 fb7d 	bl	80079c4 <__mdiff>
 80072ca:	68c2      	ldr	r2, [r0, #12]
 80072cc:	9b08      	ldr	r3, [sp, #32]
 80072ce:	4605      	mov	r5, r0
 80072d0:	bb02      	cbnz	r2, 8007314 <_dtoa_r+0xa7c>
 80072d2:	4601      	mov	r1, r0
 80072d4:	4658      	mov	r0, fp
 80072d6:	f000 fb59 	bl	800798c <__mcmp>
 80072da:	9b08      	ldr	r3, [sp, #32]
 80072dc:	4602      	mov	r2, r0
 80072de:	4629      	mov	r1, r5
 80072e0:	4620      	mov	r0, r4
 80072e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80072e6:	f000 f913 	bl	8007510 <_Bfree>
 80072ea:	9b05      	ldr	r3, [sp, #20]
 80072ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ee:	9d01      	ldr	r5, [sp, #4]
 80072f0:	ea43 0102 	orr.w	r1, r3, r2
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	430b      	orrs	r3, r1
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	d10d      	bne.n	8007318 <_dtoa_r+0xa80>
 80072fc:	2b39      	cmp	r3, #57	; 0x39
 80072fe:	d029      	beq.n	8007354 <_dtoa_r+0xabc>
 8007300:	f1b9 0f00 	cmp.w	r9, #0
 8007304:	dd01      	ble.n	800730a <_dtoa_r+0xa72>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	3331      	adds	r3, #49	; 0x31
 800730a:	9a02      	ldr	r2, [sp, #8]
 800730c:	7013      	strb	r3, [r2, #0]
 800730e:	e774      	b.n	80071fa <_dtoa_r+0x962>
 8007310:	4638      	mov	r0, r7
 8007312:	e7b9      	b.n	8007288 <_dtoa_r+0x9f0>
 8007314:	2201      	movs	r2, #1
 8007316:	e7e2      	b.n	80072de <_dtoa_r+0xa46>
 8007318:	f1b9 0f00 	cmp.w	r9, #0
 800731c:	db06      	blt.n	800732c <_dtoa_r+0xa94>
 800731e:	9905      	ldr	r1, [sp, #20]
 8007320:	ea41 0909 	orr.w	r9, r1, r9
 8007324:	9906      	ldr	r1, [sp, #24]
 8007326:	ea59 0101 	orrs.w	r1, r9, r1
 800732a:	d120      	bne.n	800736e <_dtoa_r+0xad6>
 800732c:	2a00      	cmp	r2, #0
 800732e:	ddec      	ble.n	800730a <_dtoa_r+0xa72>
 8007330:	4659      	mov	r1, fp
 8007332:	2201      	movs	r2, #1
 8007334:	4620      	mov	r0, r4
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	f000 fabc 	bl	80078b4 <__lshift>
 800733c:	4631      	mov	r1, r6
 800733e:	4683      	mov	fp, r0
 8007340:	f000 fb24 	bl	800798c <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	dc02      	bgt.n	8007350 <_dtoa_r+0xab8>
 800734a:	d1de      	bne.n	800730a <_dtoa_r+0xa72>
 800734c:	07da      	lsls	r2, r3, #31
 800734e:	d5dc      	bpl.n	800730a <_dtoa_r+0xa72>
 8007350:	2b39      	cmp	r3, #57	; 0x39
 8007352:	d1d8      	bne.n	8007306 <_dtoa_r+0xa6e>
 8007354:	9a02      	ldr	r2, [sp, #8]
 8007356:	2339      	movs	r3, #57	; 0x39
 8007358:	7013      	strb	r3, [r2, #0]
 800735a:	462b      	mov	r3, r5
 800735c:	461d      	mov	r5, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007364:	2a39      	cmp	r2, #57	; 0x39
 8007366:	d050      	beq.n	800740a <_dtoa_r+0xb72>
 8007368:	3201      	adds	r2, #1
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e745      	b.n	80071fa <_dtoa_r+0x962>
 800736e:	2a00      	cmp	r2, #0
 8007370:	dd03      	ble.n	800737a <_dtoa_r+0xae2>
 8007372:	2b39      	cmp	r3, #57	; 0x39
 8007374:	d0ee      	beq.n	8007354 <_dtoa_r+0xabc>
 8007376:	3301      	adds	r3, #1
 8007378:	e7c7      	b.n	800730a <_dtoa_r+0xa72>
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	9907      	ldr	r1, [sp, #28]
 800737e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007382:	428a      	cmp	r2, r1
 8007384:	d02a      	beq.n	80073dc <_dtoa_r+0xb44>
 8007386:	4659      	mov	r1, fp
 8007388:	2300      	movs	r3, #0
 800738a:	220a      	movs	r2, #10
 800738c:	4620      	mov	r0, r4
 800738e:	f000 f8e1 	bl	8007554 <__multadd>
 8007392:	45b8      	cmp	r8, r7
 8007394:	4683      	mov	fp, r0
 8007396:	f04f 0300 	mov.w	r3, #0
 800739a:	f04f 020a 	mov.w	r2, #10
 800739e:	4641      	mov	r1, r8
 80073a0:	4620      	mov	r0, r4
 80073a2:	d107      	bne.n	80073b4 <_dtoa_r+0xb1c>
 80073a4:	f000 f8d6 	bl	8007554 <__multadd>
 80073a8:	4680      	mov	r8, r0
 80073aa:	4607      	mov	r7, r0
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	3301      	adds	r3, #1
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	e775      	b.n	80072a0 <_dtoa_r+0xa08>
 80073b4:	f000 f8ce 	bl	8007554 <__multadd>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4680      	mov	r8, r0
 80073bc:	2300      	movs	r3, #0
 80073be:	220a      	movs	r2, #10
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 f8c7 	bl	8007554 <__multadd>
 80073c6:	4607      	mov	r7, r0
 80073c8:	e7f0      	b.n	80073ac <_dtoa_r+0xb14>
 80073ca:	f1b9 0f00 	cmp.w	r9, #0
 80073ce:	9a00      	ldr	r2, [sp, #0]
 80073d0:	bfcc      	ite	gt
 80073d2:	464d      	movgt	r5, r9
 80073d4:	2501      	movle	r5, #1
 80073d6:	4415      	add	r5, r2
 80073d8:	f04f 0800 	mov.w	r8, #0
 80073dc:	4659      	mov	r1, fp
 80073de:	2201      	movs	r2, #1
 80073e0:	4620      	mov	r0, r4
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	f000 fa66 	bl	80078b4 <__lshift>
 80073e8:	4631      	mov	r1, r6
 80073ea:	4683      	mov	fp, r0
 80073ec:	f000 face 	bl	800798c <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dcb2      	bgt.n	800735a <_dtoa_r+0xac2>
 80073f4:	d102      	bne.n	80073fc <_dtoa_r+0xb64>
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	07db      	lsls	r3, r3, #31
 80073fa:	d4ae      	bmi.n	800735a <_dtoa_r+0xac2>
 80073fc:	462b      	mov	r3, r5
 80073fe:	461d      	mov	r5, r3
 8007400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007404:	2a30      	cmp	r2, #48	; 0x30
 8007406:	d0fa      	beq.n	80073fe <_dtoa_r+0xb66>
 8007408:	e6f7      	b.n	80071fa <_dtoa_r+0x962>
 800740a:	9a00      	ldr	r2, [sp, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d1a5      	bne.n	800735c <_dtoa_r+0xac4>
 8007410:	f10a 0a01 	add.w	sl, sl, #1
 8007414:	2331      	movs	r3, #49	; 0x31
 8007416:	e779      	b.n	800730c <_dtoa_r+0xa74>
 8007418:	4b13      	ldr	r3, [pc, #76]	; (8007468 <_dtoa_r+0xbd0>)
 800741a:	f7ff baaf 	b.w	800697c <_dtoa_r+0xe4>
 800741e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007420:	2b00      	cmp	r3, #0
 8007422:	f47f aa86 	bne.w	8006932 <_dtoa_r+0x9a>
 8007426:	4b11      	ldr	r3, [pc, #68]	; (800746c <_dtoa_r+0xbd4>)
 8007428:	f7ff baa8 	b.w	800697c <_dtoa_r+0xe4>
 800742c:	f1b9 0f00 	cmp.w	r9, #0
 8007430:	dc03      	bgt.n	800743a <_dtoa_r+0xba2>
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f73f aec9 	bgt.w	80071cc <_dtoa_r+0x934>
 800743a:	9d00      	ldr	r5, [sp, #0]
 800743c:	4631      	mov	r1, r6
 800743e:	4658      	mov	r0, fp
 8007440:	f7ff f99e 	bl	8006780 <quorem>
 8007444:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007448:	f805 3b01 	strb.w	r3, [r5], #1
 800744c:	9a00      	ldr	r2, [sp, #0]
 800744e:	1aaa      	subs	r2, r5, r2
 8007450:	4591      	cmp	r9, r2
 8007452:	ddba      	ble.n	80073ca <_dtoa_r+0xb32>
 8007454:	4659      	mov	r1, fp
 8007456:	2300      	movs	r3, #0
 8007458:	220a      	movs	r2, #10
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f87a 	bl	8007554 <__multadd>
 8007460:	4683      	mov	fp, r0
 8007462:	e7eb      	b.n	800743c <_dtoa_r+0xba4>
 8007464:	08009387 	.word	0x08009387
 8007468:	080092e0 	.word	0x080092e0
 800746c:	08009304 	.word	0x08009304

08007470 <_localeconv_r>:
 8007470:	4800      	ldr	r0, [pc, #0]	; (8007474 <_localeconv_r+0x4>)
 8007472:	4770      	bx	lr
 8007474:	20000170 	.word	0x20000170

08007478 <__malloc_lock>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__malloc_lock+0x8>)
 800747a:	f000 bd48 	b.w	8007f0e <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	2000053c 	.word	0x2000053c

08007484 <__malloc_unlock>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__malloc_unlock+0x8>)
 8007486:	f000 bd43 	b.w	8007f10 <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	2000053c 	.word	0x2000053c

08007490 <_Balloc>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	b976      	cbnz	r6, 80074b8 <_Balloc+0x28>
 800749a:	2010      	movs	r0, #16
 800749c:	f7fe fbf0 	bl	8005c80 <malloc>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6260      	str	r0, [r4, #36]	; 0x24
 80074a4:	b920      	cbnz	r0, 80074b0 <_Balloc+0x20>
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <_Balloc+0x78>)
 80074a8:	4818      	ldr	r0, [pc, #96]	; (800750c <_Balloc+0x7c>)
 80074aa:	2166      	movs	r1, #102	; 0x66
 80074ac:	f000 fcfe 	bl	8007eac <__assert_func>
 80074b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b4:	6006      	str	r6, [r0, #0]
 80074b6:	60c6      	str	r6, [r0, #12]
 80074b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074ba:	68f3      	ldr	r3, [r6, #12]
 80074bc:	b183      	cbz	r3, 80074e0 <_Balloc+0x50>
 80074be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074c6:	b9b8      	cbnz	r0, 80074f8 <_Balloc+0x68>
 80074c8:	2101      	movs	r1, #1
 80074ca:	fa01 f605 	lsl.w	r6, r1, r5
 80074ce:	1d72      	adds	r2, r6, #5
 80074d0:	0092      	lsls	r2, r2, #2
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fb5a 	bl	8007b8c <_calloc_r>
 80074d8:	b160      	cbz	r0, 80074f4 <_Balloc+0x64>
 80074da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074de:	e00e      	b.n	80074fe <_Balloc+0x6e>
 80074e0:	2221      	movs	r2, #33	; 0x21
 80074e2:	2104      	movs	r1, #4
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fb51 	bl	8007b8c <_calloc_r>
 80074ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ec:	60f0      	str	r0, [r6, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e4      	bne.n	80074be <_Balloc+0x2e>
 80074f4:	2000      	movs	r0, #0
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	6802      	ldr	r2, [r0, #0]
 80074fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074fe:	2300      	movs	r3, #0
 8007500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007504:	e7f7      	b.n	80074f6 <_Balloc+0x66>
 8007506:	bf00      	nop
 8007508:	08009311 	.word	0x08009311
 800750c:	08009398 	.word	0x08009398

08007510 <_Bfree>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b976      	cbnz	r6, 8007538 <_Bfree+0x28>
 800751a:	2010      	movs	r0, #16
 800751c:	f7fe fbb0 	bl	8005c80 <malloc>
 8007520:	4602      	mov	r2, r0
 8007522:	6268      	str	r0, [r5, #36]	; 0x24
 8007524:	b920      	cbnz	r0, 8007530 <_Bfree+0x20>
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <_Bfree+0x3c>)
 8007528:	4809      	ldr	r0, [pc, #36]	; (8007550 <_Bfree+0x40>)
 800752a:	218a      	movs	r1, #138	; 0x8a
 800752c:	f000 fcbe 	bl	8007eac <__assert_func>
 8007530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007534:	6006      	str	r6, [r0, #0]
 8007536:	60c6      	str	r6, [r0, #12]
 8007538:	b13c      	cbz	r4, 800754a <_Bfree+0x3a>
 800753a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800753c:	6862      	ldr	r2, [r4, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007544:	6021      	str	r1, [r4, #0]
 8007546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	08009311 	.word	0x08009311
 8007550:	08009398 	.word	0x08009398

08007554 <__multadd>:
 8007554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007558:	690e      	ldr	r6, [r1, #16]
 800755a:	4607      	mov	r7, r0
 800755c:	4698      	mov	r8, r3
 800755e:	460c      	mov	r4, r1
 8007560:	f101 0014 	add.w	r0, r1, #20
 8007564:	2300      	movs	r3, #0
 8007566:	6805      	ldr	r5, [r0, #0]
 8007568:	b2a9      	uxth	r1, r5
 800756a:	fb02 8101 	mla	r1, r2, r1, r8
 800756e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007572:	0c2d      	lsrs	r5, r5, #16
 8007574:	fb02 c505 	mla	r5, r2, r5, ip
 8007578:	b289      	uxth	r1, r1
 800757a:	3301      	adds	r3, #1
 800757c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007580:	429e      	cmp	r6, r3
 8007582:	f840 1b04 	str.w	r1, [r0], #4
 8007586:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800758a:	dcec      	bgt.n	8007566 <__multadd+0x12>
 800758c:	f1b8 0f00 	cmp.w	r8, #0
 8007590:	d022      	beq.n	80075d8 <__multadd+0x84>
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	42b3      	cmp	r3, r6
 8007596:	dc19      	bgt.n	80075cc <__multadd+0x78>
 8007598:	6861      	ldr	r1, [r4, #4]
 800759a:	4638      	mov	r0, r7
 800759c:	3101      	adds	r1, #1
 800759e:	f7ff ff77 	bl	8007490 <_Balloc>
 80075a2:	4605      	mov	r5, r0
 80075a4:	b928      	cbnz	r0, 80075b2 <__multadd+0x5e>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <__multadd+0x8c>)
 80075aa:	480e      	ldr	r0, [pc, #56]	; (80075e4 <__multadd+0x90>)
 80075ac:	21b5      	movs	r1, #181	; 0xb5
 80075ae:	f000 fc7d 	bl	8007eac <__assert_func>
 80075b2:	6922      	ldr	r2, [r4, #16]
 80075b4:	3202      	adds	r2, #2
 80075b6:	f104 010c 	add.w	r1, r4, #12
 80075ba:	0092      	lsls	r2, r2, #2
 80075bc:	300c      	adds	r0, #12
 80075be:	f7fe fb7d 	bl	8005cbc <memcpy>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff ffa3 	bl	8007510 <_Bfree>
 80075ca:	462c      	mov	r4, r5
 80075cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80075d0:	3601      	adds	r6, #1
 80075d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80075d6:	6126      	str	r6, [r4, #16]
 80075d8:	4620      	mov	r0, r4
 80075da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075de:	bf00      	nop
 80075e0:	08009387 	.word	0x08009387
 80075e4:	08009398 	.word	0x08009398

080075e8 <__hi0bits>:
 80075e8:	0c03      	lsrs	r3, r0, #16
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	b9d3      	cbnz	r3, 8007624 <__hi0bits+0x3c>
 80075ee:	0400      	lsls	r0, r0, #16
 80075f0:	2310      	movs	r3, #16
 80075f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075f6:	bf04      	itt	eq
 80075f8:	0200      	lsleq	r0, r0, #8
 80075fa:	3308      	addeq	r3, #8
 80075fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007600:	bf04      	itt	eq
 8007602:	0100      	lsleq	r0, r0, #4
 8007604:	3304      	addeq	r3, #4
 8007606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800760a:	bf04      	itt	eq
 800760c:	0080      	lsleq	r0, r0, #2
 800760e:	3302      	addeq	r3, #2
 8007610:	2800      	cmp	r0, #0
 8007612:	db05      	blt.n	8007620 <__hi0bits+0x38>
 8007614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007618:	f103 0301 	add.w	r3, r3, #1
 800761c:	bf08      	it	eq
 800761e:	2320      	moveq	r3, #32
 8007620:	4618      	mov	r0, r3
 8007622:	4770      	bx	lr
 8007624:	2300      	movs	r3, #0
 8007626:	e7e4      	b.n	80075f2 <__hi0bits+0xa>

08007628 <__lo0bits>:
 8007628:	6803      	ldr	r3, [r0, #0]
 800762a:	f013 0207 	ands.w	r2, r3, #7
 800762e:	4601      	mov	r1, r0
 8007630:	d00b      	beq.n	800764a <__lo0bits+0x22>
 8007632:	07da      	lsls	r2, r3, #31
 8007634:	d424      	bmi.n	8007680 <__lo0bits+0x58>
 8007636:	0798      	lsls	r0, r3, #30
 8007638:	bf49      	itett	mi
 800763a:	085b      	lsrmi	r3, r3, #1
 800763c:	089b      	lsrpl	r3, r3, #2
 800763e:	2001      	movmi	r0, #1
 8007640:	600b      	strmi	r3, [r1, #0]
 8007642:	bf5c      	itt	pl
 8007644:	600b      	strpl	r3, [r1, #0]
 8007646:	2002      	movpl	r0, #2
 8007648:	4770      	bx	lr
 800764a:	b298      	uxth	r0, r3
 800764c:	b9b0      	cbnz	r0, 800767c <__lo0bits+0x54>
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	2010      	movs	r0, #16
 8007652:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007656:	bf04      	itt	eq
 8007658:	0a1b      	lsreq	r3, r3, #8
 800765a:	3008      	addeq	r0, #8
 800765c:	071a      	lsls	r2, r3, #28
 800765e:	bf04      	itt	eq
 8007660:	091b      	lsreq	r3, r3, #4
 8007662:	3004      	addeq	r0, #4
 8007664:	079a      	lsls	r2, r3, #30
 8007666:	bf04      	itt	eq
 8007668:	089b      	lsreq	r3, r3, #2
 800766a:	3002      	addeq	r0, #2
 800766c:	07da      	lsls	r2, r3, #31
 800766e:	d403      	bmi.n	8007678 <__lo0bits+0x50>
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	f100 0001 	add.w	r0, r0, #1
 8007676:	d005      	beq.n	8007684 <__lo0bits+0x5c>
 8007678:	600b      	str	r3, [r1, #0]
 800767a:	4770      	bx	lr
 800767c:	4610      	mov	r0, r2
 800767e:	e7e8      	b.n	8007652 <__lo0bits+0x2a>
 8007680:	2000      	movs	r0, #0
 8007682:	4770      	bx	lr
 8007684:	2020      	movs	r0, #32
 8007686:	4770      	bx	lr

08007688 <__i2b>:
 8007688:	b510      	push	{r4, lr}
 800768a:	460c      	mov	r4, r1
 800768c:	2101      	movs	r1, #1
 800768e:	f7ff feff 	bl	8007490 <_Balloc>
 8007692:	4602      	mov	r2, r0
 8007694:	b928      	cbnz	r0, 80076a2 <__i2b+0x1a>
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <__i2b+0x24>)
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <__i2b+0x28>)
 800769a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800769e:	f000 fc05 	bl	8007eac <__assert_func>
 80076a2:	2301      	movs	r3, #1
 80076a4:	6144      	str	r4, [r0, #20]
 80076a6:	6103      	str	r3, [r0, #16]
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	bf00      	nop
 80076ac:	08009387 	.word	0x08009387
 80076b0:	08009398 	.word	0x08009398

080076b4 <__multiply>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	4614      	mov	r4, r2
 80076ba:	690a      	ldr	r2, [r1, #16]
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	429a      	cmp	r2, r3
 80076c0:	bfb8      	it	lt
 80076c2:	460b      	movlt	r3, r1
 80076c4:	460d      	mov	r5, r1
 80076c6:	bfbc      	itt	lt
 80076c8:	4625      	movlt	r5, r4
 80076ca:	461c      	movlt	r4, r3
 80076cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80076d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076d4:	68ab      	ldr	r3, [r5, #8]
 80076d6:	6869      	ldr	r1, [r5, #4]
 80076d8:	eb0a 0709 	add.w	r7, sl, r9
 80076dc:	42bb      	cmp	r3, r7
 80076de:	b085      	sub	sp, #20
 80076e0:	bfb8      	it	lt
 80076e2:	3101      	addlt	r1, #1
 80076e4:	f7ff fed4 	bl	8007490 <_Balloc>
 80076e8:	b930      	cbnz	r0, 80076f8 <__multiply+0x44>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4b42      	ldr	r3, [pc, #264]	; (80077f8 <__multiply+0x144>)
 80076ee:	4843      	ldr	r0, [pc, #268]	; (80077fc <__multiply+0x148>)
 80076f0:	f240 115d 	movw	r1, #349	; 0x15d
 80076f4:	f000 fbda 	bl	8007eac <__assert_func>
 80076f8:	f100 0614 	add.w	r6, r0, #20
 80076fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007700:	4633      	mov	r3, r6
 8007702:	2200      	movs	r2, #0
 8007704:	4543      	cmp	r3, r8
 8007706:	d31e      	bcc.n	8007746 <__multiply+0x92>
 8007708:	f105 0c14 	add.w	ip, r5, #20
 800770c:	f104 0314 	add.w	r3, r4, #20
 8007710:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007714:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007718:	9202      	str	r2, [sp, #8]
 800771a:	ebac 0205 	sub.w	r2, ip, r5
 800771e:	3a15      	subs	r2, #21
 8007720:	f022 0203 	bic.w	r2, r2, #3
 8007724:	3204      	adds	r2, #4
 8007726:	f105 0115 	add.w	r1, r5, #21
 800772a:	458c      	cmp	ip, r1
 800772c:	bf38      	it	cc
 800772e:	2204      	movcc	r2, #4
 8007730:	9201      	str	r2, [sp, #4]
 8007732:	9a02      	ldr	r2, [sp, #8]
 8007734:	9303      	str	r3, [sp, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	d808      	bhi.n	800774c <__multiply+0x98>
 800773a:	2f00      	cmp	r7, #0
 800773c:	dc55      	bgt.n	80077ea <__multiply+0x136>
 800773e:	6107      	str	r7, [r0, #16]
 8007740:	b005      	add	sp, #20
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	f843 2b04 	str.w	r2, [r3], #4
 800774a:	e7db      	b.n	8007704 <__multiply+0x50>
 800774c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007750:	f1ba 0f00 	cmp.w	sl, #0
 8007754:	d020      	beq.n	8007798 <__multiply+0xe4>
 8007756:	f105 0e14 	add.w	lr, r5, #20
 800775a:	46b1      	mov	r9, r6
 800775c:	2200      	movs	r2, #0
 800775e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007762:	f8d9 b000 	ldr.w	fp, [r9]
 8007766:	b2a1      	uxth	r1, r4
 8007768:	fa1f fb8b 	uxth.w	fp, fp
 800776c:	fb0a b101 	mla	r1, sl, r1, fp
 8007770:	4411      	add	r1, r2
 8007772:	f8d9 2000 	ldr.w	r2, [r9]
 8007776:	0c24      	lsrs	r4, r4, #16
 8007778:	0c12      	lsrs	r2, r2, #16
 800777a:	fb0a 2404 	mla	r4, sl, r4, r2
 800777e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007782:	b289      	uxth	r1, r1
 8007784:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007788:	45f4      	cmp	ip, lr
 800778a:	f849 1b04 	str.w	r1, [r9], #4
 800778e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007792:	d8e4      	bhi.n	800775e <__multiply+0xaa>
 8007794:	9901      	ldr	r1, [sp, #4]
 8007796:	5072      	str	r2, [r6, r1]
 8007798:	9a03      	ldr	r2, [sp, #12]
 800779a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800779e:	3304      	adds	r3, #4
 80077a0:	f1b9 0f00 	cmp.w	r9, #0
 80077a4:	d01f      	beq.n	80077e6 <__multiply+0x132>
 80077a6:	6834      	ldr	r4, [r6, #0]
 80077a8:	f105 0114 	add.w	r1, r5, #20
 80077ac:	46b6      	mov	lr, r6
 80077ae:	f04f 0a00 	mov.w	sl, #0
 80077b2:	880a      	ldrh	r2, [r1, #0]
 80077b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80077b8:	fb09 b202 	mla	r2, r9, r2, fp
 80077bc:	4492      	add	sl, r2
 80077be:	b2a4      	uxth	r4, r4
 80077c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80077c4:	f84e 4b04 	str.w	r4, [lr], #4
 80077c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80077cc:	f8be 2000 	ldrh.w	r2, [lr]
 80077d0:	0c24      	lsrs	r4, r4, #16
 80077d2:	fb09 2404 	mla	r4, r9, r4, r2
 80077d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80077da:	458c      	cmp	ip, r1
 80077dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077e0:	d8e7      	bhi.n	80077b2 <__multiply+0xfe>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	50b4      	str	r4, [r6, r2]
 80077e6:	3604      	adds	r6, #4
 80077e8:	e7a3      	b.n	8007732 <__multiply+0x7e>
 80077ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1a5      	bne.n	800773e <__multiply+0x8a>
 80077f2:	3f01      	subs	r7, #1
 80077f4:	e7a1      	b.n	800773a <__multiply+0x86>
 80077f6:	bf00      	nop
 80077f8:	08009387 	.word	0x08009387
 80077fc:	08009398 	.word	0x08009398

08007800 <__pow5mult>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	f012 0203 	ands.w	r2, r2, #3
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	d007      	beq.n	8007820 <__pow5mult+0x20>
 8007810:	4c25      	ldr	r4, [pc, #148]	; (80078a8 <__pow5mult+0xa8>)
 8007812:	3a01      	subs	r2, #1
 8007814:	2300      	movs	r3, #0
 8007816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781a:	f7ff fe9b 	bl	8007554 <__multadd>
 800781e:	4607      	mov	r7, r0
 8007820:	10ad      	asrs	r5, r5, #2
 8007822:	d03d      	beq.n	80078a0 <__pow5mult+0xa0>
 8007824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007826:	b97c      	cbnz	r4, 8007848 <__pow5mult+0x48>
 8007828:	2010      	movs	r0, #16
 800782a:	f7fe fa29 	bl	8005c80 <malloc>
 800782e:	4602      	mov	r2, r0
 8007830:	6270      	str	r0, [r6, #36]	; 0x24
 8007832:	b928      	cbnz	r0, 8007840 <__pow5mult+0x40>
 8007834:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <__pow5mult+0xac>)
 8007836:	481e      	ldr	r0, [pc, #120]	; (80078b0 <__pow5mult+0xb0>)
 8007838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800783c:	f000 fb36 	bl	8007eac <__assert_func>
 8007840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007844:	6004      	str	r4, [r0, #0]
 8007846:	60c4      	str	r4, [r0, #12]
 8007848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800784c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007850:	b94c      	cbnz	r4, 8007866 <__pow5mult+0x66>
 8007852:	f240 2171 	movw	r1, #625	; 0x271
 8007856:	4630      	mov	r0, r6
 8007858:	f7ff ff16 	bl	8007688 <__i2b>
 800785c:	2300      	movs	r3, #0
 800785e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007862:	4604      	mov	r4, r0
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	f04f 0900 	mov.w	r9, #0
 800786a:	07eb      	lsls	r3, r5, #31
 800786c:	d50a      	bpl.n	8007884 <__pow5mult+0x84>
 800786e:	4639      	mov	r1, r7
 8007870:	4622      	mov	r2, r4
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff ff1e 	bl	80076b4 <__multiply>
 8007878:	4639      	mov	r1, r7
 800787a:	4680      	mov	r8, r0
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff fe47 	bl	8007510 <_Bfree>
 8007882:	4647      	mov	r7, r8
 8007884:	106d      	asrs	r5, r5, #1
 8007886:	d00b      	beq.n	80078a0 <__pow5mult+0xa0>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	b938      	cbnz	r0, 800789c <__pow5mult+0x9c>
 800788c:	4622      	mov	r2, r4
 800788e:	4621      	mov	r1, r4
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff ff0f 	bl	80076b4 <__multiply>
 8007896:	6020      	str	r0, [r4, #0]
 8007898:	f8c0 9000 	str.w	r9, [r0]
 800789c:	4604      	mov	r4, r0
 800789e:	e7e4      	b.n	800786a <__pow5mult+0x6a>
 80078a0:	4638      	mov	r0, r7
 80078a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a6:	bf00      	nop
 80078a8:	080094e8 	.word	0x080094e8
 80078ac:	08009311 	.word	0x08009311
 80078b0:	08009398 	.word	0x08009398

080078b4 <__lshift>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	6849      	ldr	r1, [r1, #4]
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078c2:	68a3      	ldr	r3, [r4, #8]
 80078c4:	4607      	mov	r7, r0
 80078c6:	4691      	mov	r9, r2
 80078c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078cc:	f108 0601 	add.w	r6, r8, #1
 80078d0:	42b3      	cmp	r3, r6
 80078d2:	db0b      	blt.n	80078ec <__lshift+0x38>
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff fddb 	bl	8007490 <_Balloc>
 80078da:	4605      	mov	r5, r0
 80078dc:	b948      	cbnz	r0, 80078f2 <__lshift+0x3e>
 80078de:	4602      	mov	r2, r0
 80078e0:	4b28      	ldr	r3, [pc, #160]	; (8007984 <__lshift+0xd0>)
 80078e2:	4829      	ldr	r0, [pc, #164]	; (8007988 <__lshift+0xd4>)
 80078e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078e8:	f000 fae0 	bl	8007eac <__assert_func>
 80078ec:	3101      	adds	r1, #1
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	e7ee      	b.n	80078d0 <__lshift+0x1c>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f100 0114 	add.w	r1, r0, #20
 80078f8:	f100 0210 	add.w	r2, r0, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	4553      	cmp	r3, sl
 8007900:	db33      	blt.n	800796a <__lshift+0xb6>
 8007902:	6920      	ldr	r0, [r4, #16]
 8007904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007908:	f104 0314 	add.w	r3, r4, #20
 800790c:	f019 091f 	ands.w	r9, r9, #31
 8007910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007918:	d02b      	beq.n	8007972 <__lshift+0xbe>
 800791a:	f1c9 0e20 	rsb	lr, r9, #32
 800791e:	468a      	mov	sl, r1
 8007920:	2200      	movs	r2, #0
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	fa00 f009 	lsl.w	r0, r0, r9
 8007928:	4302      	orrs	r2, r0
 800792a:	f84a 2b04 	str.w	r2, [sl], #4
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	459c      	cmp	ip, r3
 8007934:	fa22 f20e 	lsr.w	r2, r2, lr
 8007938:	d8f3      	bhi.n	8007922 <__lshift+0x6e>
 800793a:	ebac 0304 	sub.w	r3, ip, r4
 800793e:	3b15      	subs	r3, #21
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	3304      	adds	r3, #4
 8007946:	f104 0015 	add.w	r0, r4, #21
 800794a:	4584      	cmp	ip, r0
 800794c:	bf38      	it	cc
 800794e:	2304      	movcc	r3, #4
 8007950:	50ca      	str	r2, [r1, r3]
 8007952:	b10a      	cbz	r2, 8007958 <__lshift+0xa4>
 8007954:	f108 0602 	add.w	r6, r8, #2
 8007958:	3e01      	subs	r6, #1
 800795a:	4638      	mov	r0, r7
 800795c:	612e      	str	r6, [r5, #16]
 800795e:	4621      	mov	r1, r4
 8007960:	f7ff fdd6 	bl	8007510 <_Bfree>
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f842 0f04 	str.w	r0, [r2, #4]!
 800796e:	3301      	adds	r3, #1
 8007970:	e7c5      	b.n	80078fe <__lshift+0x4a>
 8007972:	3904      	subs	r1, #4
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	f841 2f04 	str.w	r2, [r1, #4]!
 800797c:	459c      	cmp	ip, r3
 800797e:	d8f9      	bhi.n	8007974 <__lshift+0xc0>
 8007980:	e7ea      	b.n	8007958 <__lshift+0xa4>
 8007982:	bf00      	nop
 8007984:	08009387 	.word	0x08009387
 8007988:	08009398 	.word	0x08009398

0800798c <__mcmp>:
 800798c:	b530      	push	{r4, r5, lr}
 800798e:	6902      	ldr	r2, [r0, #16]
 8007990:	690c      	ldr	r4, [r1, #16]
 8007992:	1b12      	subs	r2, r2, r4
 8007994:	d10e      	bne.n	80079b4 <__mcmp+0x28>
 8007996:	f100 0314 	add.w	r3, r0, #20
 800799a:	3114      	adds	r1, #20
 800799c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079ac:	42a5      	cmp	r5, r4
 80079ae:	d003      	beq.n	80079b8 <__mcmp+0x2c>
 80079b0:	d305      	bcc.n	80079be <__mcmp+0x32>
 80079b2:	2201      	movs	r2, #1
 80079b4:	4610      	mov	r0, r2
 80079b6:	bd30      	pop	{r4, r5, pc}
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d3f3      	bcc.n	80079a4 <__mcmp+0x18>
 80079bc:	e7fa      	b.n	80079b4 <__mcmp+0x28>
 80079be:	f04f 32ff 	mov.w	r2, #4294967295
 80079c2:	e7f7      	b.n	80079b4 <__mcmp+0x28>

080079c4 <__mdiff>:
 80079c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	4606      	mov	r6, r0
 80079cc:	4611      	mov	r1, r2
 80079ce:	4620      	mov	r0, r4
 80079d0:	4617      	mov	r7, r2
 80079d2:	f7ff ffdb 	bl	800798c <__mcmp>
 80079d6:	1e05      	subs	r5, r0, #0
 80079d8:	d110      	bne.n	80079fc <__mdiff+0x38>
 80079da:	4629      	mov	r1, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff fd57 	bl	8007490 <_Balloc>
 80079e2:	b930      	cbnz	r0, 80079f2 <__mdiff+0x2e>
 80079e4:	4b39      	ldr	r3, [pc, #228]	; (8007acc <__mdiff+0x108>)
 80079e6:	4602      	mov	r2, r0
 80079e8:	f240 2132 	movw	r1, #562	; 0x232
 80079ec:	4838      	ldr	r0, [pc, #224]	; (8007ad0 <__mdiff+0x10c>)
 80079ee:	f000 fa5d 	bl	8007eac <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	bfa4      	itt	ge
 80079fe:	463b      	movge	r3, r7
 8007a00:	4627      	movge	r7, r4
 8007a02:	4630      	mov	r0, r6
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	bfa6      	itte	ge
 8007a08:	461c      	movge	r4, r3
 8007a0a:	2500      	movge	r5, #0
 8007a0c:	2501      	movlt	r5, #1
 8007a0e:	f7ff fd3f 	bl	8007490 <_Balloc>
 8007a12:	b920      	cbnz	r0, 8007a1e <__mdiff+0x5a>
 8007a14:	4b2d      	ldr	r3, [pc, #180]	; (8007acc <__mdiff+0x108>)
 8007a16:	4602      	mov	r2, r0
 8007a18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a1c:	e7e6      	b.n	80079ec <__mdiff+0x28>
 8007a1e:	693e      	ldr	r6, [r7, #16]
 8007a20:	60c5      	str	r5, [r0, #12]
 8007a22:	6925      	ldr	r5, [r4, #16]
 8007a24:	f107 0114 	add.w	r1, r7, #20
 8007a28:	f104 0914 	add.w	r9, r4, #20
 8007a2c:	f100 0e14 	add.w	lr, r0, #20
 8007a30:	f107 0210 	add.w	r2, r7, #16
 8007a34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007a38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007a3c:	46f2      	mov	sl, lr
 8007a3e:	2700      	movs	r7, #0
 8007a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a48:	fa1f f883 	uxth.w	r8, r3
 8007a4c:	fa17 f78b 	uxtah	r7, r7, fp
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	eba7 0808 	sub.w	r8, r7, r8
 8007a56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a5e:	fa1f f888 	uxth.w	r8, r8
 8007a62:	141f      	asrs	r7, r3, #16
 8007a64:	454d      	cmp	r5, r9
 8007a66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8007a6e:	d8e7      	bhi.n	8007a40 <__mdiff+0x7c>
 8007a70:	1b2b      	subs	r3, r5, r4
 8007a72:	3b15      	subs	r3, #21
 8007a74:	f023 0303 	bic.w	r3, r3, #3
 8007a78:	3304      	adds	r3, #4
 8007a7a:	3415      	adds	r4, #21
 8007a7c:	42a5      	cmp	r5, r4
 8007a7e:	bf38      	it	cc
 8007a80:	2304      	movcc	r3, #4
 8007a82:	4419      	add	r1, r3
 8007a84:	4473      	add	r3, lr
 8007a86:	469e      	mov	lr, r3
 8007a88:	460d      	mov	r5, r1
 8007a8a:	4565      	cmp	r5, ip
 8007a8c:	d30e      	bcc.n	8007aac <__mdiff+0xe8>
 8007a8e:	f10c 0203 	add.w	r2, ip, #3
 8007a92:	1a52      	subs	r2, r2, r1
 8007a94:	f022 0203 	bic.w	r2, r2, #3
 8007a98:	3903      	subs	r1, #3
 8007a9a:	458c      	cmp	ip, r1
 8007a9c:	bf38      	it	cc
 8007a9e:	2200      	movcc	r2, #0
 8007aa0:	441a      	add	r2, r3
 8007aa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007aa6:	b17b      	cbz	r3, 8007ac8 <__mdiff+0x104>
 8007aa8:	6106      	str	r6, [r0, #16]
 8007aaa:	e7a5      	b.n	80079f8 <__mdiff+0x34>
 8007aac:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ab0:	fa17 f488 	uxtah	r4, r7, r8
 8007ab4:	1422      	asrs	r2, r4, #16
 8007ab6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007aba:	b2a4      	uxth	r4, r4
 8007abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ac0:	f84e 4b04 	str.w	r4, [lr], #4
 8007ac4:	1417      	asrs	r7, r2, #16
 8007ac6:	e7e0      	b.n	8007a8a <__mdiff+0xc6>
 8007ac8:	3e01      	subs	r6, #1
 8007aca:	e7ea      	b.n	8007aa2 <__mdiff+0xde>
 8007acc:	08009387 	.word	0x08009387
 8007ad0:	08009398 	.word	0x08009398

08007ad4 <__d2b>:
 8007ad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	4689      	mov	r9, r1
 8007ada:	2101      	movs	r1, #1
 8007adc:	ec57 6b10 	vmov	r6, r7, d0
 8007ae0:	4690      	mov	r8, r2
 8007ae2:	f7ff fcd5 	bl	8007490 <_Balloc>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	b930      	cbnz	r0, 8007af8 <__d2b+0x24>
 8007aea:	4602      	mov	r2, r0
 8007aec:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <__d2b+0xb0>)
 8007aee:	4826      	ldr	r0, [pc, #152]	; (8007b88 <__d2b+0xb4>)
 8007af0:	f240 310a 	movw	r1, #778	; 0x30a
 8007af4:	f000 f9da 	bl	8007eac <__assert_func>
 8007af8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007afc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b00:	bb35      	cbnz	r5, 8007b50 <__d2b+0x7c>
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	d028      	beq.n	8007b5a <__d2b+0x86>
 8007b08:	4668      	mov	r0, sp
 8007b0a:	9600      	str	r6, [sp, #0]
 8007b0c:	f7ff fd8c 	bl	8007628 <__lo0bits>
 8007b10:	9900      	ldr	r1, [sp, #0]
 8007b12:	b300      	cbz	r0, 8007b56 <__d2b+0x82>
 8007b14:	9a01      	ldr	r2, [sp, #4]
 8007b16:	f1c0 0320 	rsb	r3, r0, #32
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	40c2      	lsrs	r2, r0
 8007b22:	6163      	str	r3, [r4, #20]
 8007b24:	9201      	str	r2, [sp, #4]
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	61a3      	str	r3, [r4, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	2202      	movne	r2, #2
 8007b30:	2201      	moveq	r2, #1
 8007b32:	6122      	str	r2, [r4, #16]
 8007b34:	b1d5      	cbz	r5, 8007b6c <__d2b+0x98>
 8007b36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b3a:	4405      	add	r5, r0
 8007b3c:	f8c9 5000 	str.w	r5, [r9]
 8007b40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b44:	f8c8 0000 	str.w	r0, [r8]
 8007b48:	4620      	mov	r0, r4
 8007b4a:	b003      	add	sp, #12
 8007b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b54:	e7d5      	b.n	8007b02 <__d2b+0x2e>
 8007b56:	6161      	str	r1, [r4, #20]
 8007b58:	e7e5      	b.n	8007b26 <__d2b+0x52>
 8007b5a:	a801      	add	r0, sp, #4
 8007b5c:	f7ff fd64 	bl	8007628 <__lo0bits>
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	6163      	str	r3, [r4, #20]
 8007b64:	2201      	movs	r2, #1
 8007b66:	6122      	str	r2, [r4, #16]
 8007b68:	3020      	adds	r0, #32
 8007b6a:	e7e3      	b.n	8007b34 <__d2b+0x60>
 8007b6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b74:	f8c9 0000 	str.w	r0, [r9]
 8007b78:	6918      	ldr	r0, [r3, #16]
 8007b7a:	f7ff fd35 	bl	80075e8 <__hi0bits>
 8007b7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b82:	e7df      	b.n	8007b44 <__d2b+0x70>
 8007b84:	08009387 	.word	0x08009387
 8007b88:	08009398 	.word	0x08009398

08007b8c <_calloc_r>:
 8007b8c:	b513      	push	{r0, r1, r4, lr}
 8007b8e:	434a      	muls	r2, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	9201      	str	r2, [sp, #4]
 8007b94:	f7fe f8f8 	bl	8005d88 <_malloc_r>
 8007b98:	4604      	mov	r4, r0
 8007b9a:	b118      	cbz	r0, 8007ba4 <_calloc_r+0x18>
 8007b9c:	9a01      	ldr	r2, [sp, #4]
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	f7fe f89a 	bl	8005cd8 <memset>
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	b002      	add	sp, #8
 8007ba8:	bd10      	pop	{r4, pc}

08007baa <_realloc_r>:
 8007baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bac:	4607      	mov	r7, r0
 8007bae:	4614      	mov	r4, r2
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	b921      	cbnz	r1, 8007bbe <_realloc_r+0x14>
 8007bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bb8:	4611      	mov	r1, r2
 8007bba:	f7fe b8e5 	b.w	8005d88 <_malloc_r>
 8007bbe:	b922      	cbnz	r2, 8007bca <_realloc_r+0x20>
 8007bc0:	f7fe f892 	bl	8005ce8 <_free_r>
 8007bc4:	4625      	mov	r5, r4
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bca:	f000 f9ce 	bl	8007f6a <_malloc_usable_size_r>
 8007bce:	42a0      	cmp	r0, r4
 8007bd0:	d20f      	bcs.n	8007bf2 <_realloc_r+0x48>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7fe f8d7 	bl	8005d88 <_malloc_r>
 8007bda:	4605      	mov	r5, r0
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0f2      	beq.n	8007bc6 <_realloc_r+0x1c>
 8007be0:	4631      	mov	r1, r6
 8007be2:	4622      	mov	r2, r4
 8007be4:	f7fe f86a 	bl	8005cbc <memcpy>
 8007be8:	4631      	mov	r1, r6
 8007bea:	4638      	mov	r0, r7
 8007bec:	f7fe f87c 	bl	8005ce8 <_free_r>
 8007bf0:	e7e9      	b.n	8007bc6 <_realloc_r+0x1c>
 8007bf2:	4635      	mov	r5, r6
 8007bf4:	e7e7      	b.n	8007bc6 <_realloc_r+0x1c>

08007bf6 <__ssputs_r>:
 8007bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfa:	688e      	ldr	r6, [r1, #8]
 8007bfc:	429e      	cmp	r6, r3
 8007bfe:	4682      	mov	sl, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	4690      	mov	r8, r2
 8007c04:	461f      	mov	r7, r3
 8007c06:	d838      	bhi.n	8007c7a <__ssputs_r+0x84>
 8007c08:	898a      	ldrh	r2, [r1, #12]
 8007c0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c0e:	d032      	beq.n	8007c76 <__ssputs_r+0x80>
 8007c10:	6825      	ldr	r5, [r4, #0]
 8007c12:	6909      	ldr	r1, [r1, #16]
 8007c14:	eba5 0901 	sub.w	r9, r5, r1
 8007c18:	6965      	ldr	r5, [r4, #20]
 8007c1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c22:	3301      	adds	r3, #1
 8007c24:	444b      	add	r3, r9
 8007c26:	106d      	asrs	r5, r5, #1
 8007c28:	429d      	cmp	r5, r3
 8007c2a:	bf38      	it	cc
 8007c2c:	461d      	movcc	r5, r3
 8007c2e:	0553      	lsls	r3, r2, #21
 8007c30:	d531      	bpl.n	8007c96 <__ssputs_r+0xa0>
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7fe f8a8 	bl	8005d88 <_malloc_r>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	b950      	cbnz	r0, 8007c52 <__ssputs_r+0x5c>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	f8ca 3000 	str.w	r3, [sl]
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	6921      	ldr	r1, [r4, #16]
 8007c54:	464a      	mov	r2, r9
 8007c56:	f7fe f831 	bl	8005cbc <memcpy>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	6126      	str	r6, [r4, #16]
 8007c68:	6165      	str	r5, [r4, #20]
 8007c6a:	444e      	add	r6, r9
 8007c6c:	eba5 0509 	sub.w	r5, r5, r9
 8007c70:	6026      	str	r6, [r4, #0]
 8007c72:	60a5      	str	r5, [r4, #8]
 8007c74:	463e      	mov	r6, r7
 8007c76:	42be      	cmp	r6, r7
 8007c78:	d900      	bls.n	8007c7c <__ssputs_r+0x86>
 8007c7a:	463e      	mov	r6, r7
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	4641      	mov	r1, r8
 8007c82:	f000 f958 	bl	8007f36 <memmove>
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	1b9b      	subs	r3, r3, r6
 8007c8c:	4432      	add	r2, r6
 8007c8e:	60a3      	str	r3, [r4, #8]
 8007c90:	6022      	str	r2, [r4, #0]
 8007c92:	2000      	movs	r0, #0
 8007c94:	e7db      	b.n	8007c4e <__ssputs_r+0x58>
 8007c96:	462a      	mov	r2, r5
 8007c98:	f7ff ff87 	bl	8007baa <_realloc_r>
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d1e1      	bne.n	8007c66 <__ssputs_r+0x70>
 8007ca2:	6921      	ldr	r1, [r4, #16]
 8007ca4:	4650      	mov	r0, sl
 8007ca6:	f7fe f81f 	bl	8005ce8 <_free_r>
 8007caa:	e7c7      	b.n	8007c3c <__ssputs_r+0x46>

08007cac <_svfiprintf_r>:
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	4698      	mov	r8, r3
 8007cb2:	898b      	ldrh	r3, [r1, #12]
 8007cb4:	061b      	lsls	r3, r3, #24
 8007cb6:	b09d      	sub	sp, #116	; 0x74
 8007cb8:	4607      	mov	r7, r0
 8007cba:	460d      	mov	r5, r1
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	d50e      	bpl.n	8007cde <_svfiprintf_r+0x32>
 8007cc0:	690b      	ldr	r3, [r1, #16]
 8007cc2:	b963      	cbnz	r3, 8007cde <_svfiprintf_r+0x32>
 8007cc4:	2140      	movs	r1, #64	; 0x40
 8007cc6:	f7fe f85f 	bl	8005d88 <_malloc_r>
 8007cca:	6028      	str	r0, [r5, #0]
 8007ccc:	6128      	str	r0, [r5, #16]
 8007cce:	b920      	cbnz	r0, 8007cda <_svfiprintf_r+0x2e>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e0d1      	b.n	8007e7e <_svfiprintf_r+0x1d2>
 8007cda:	2340      	movs	r3, #64	; 0x40
 8007cdc:	616b      	str	r3, [r5, #20]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce2:	2320      	movs	r3, #32
 8007ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cec:	2330      	movs	r3, #48	; 0x30
 8007cee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e98 <_svfiprintf_r+0x1ec>
 8007cf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf6:	f04f 0901 	mov.w	r9, #1
 8007cfa:	4623      	mov	r3, r4
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d02:	b10a      	cbz	r2, 8007d08 <_svfiprintf_r+0x5c>
 8007d04:	2a25      	cmp	r2, #37	; 0x25
 8007d06:	d1f9      	bne.n	8007cfc <_svfiprintf_r+0x50>
 8007d08:	ebba 0b04 	subs.w	fp, sl, r4
 8007d0c:	d00b      	beq.n	8007d26 <_svfiprintf_r+0x7a>
 8007d0e:	465b      	mov	r3, fp
 8007d10:	4622      	mov	r2, r4
 8007d12:	4629      	mov	r1, r5
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff ff6e 	bl	8007bf6 <__ssputs_r>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f000 80aa 	beq.w	8007e74 <_svfiprintf_r+0x1c8>
 8007d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d22:	445a      	add	r2, fp
 8007d24:	9209      	str	r2, [sp, #36]	; 0x24
 8007d26:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80a2 	beq.w	8007e74 <_svfiprintf_r+0x1c8>
 8007d30:	2300      	movs	r3, #0
 8007d32:	f04f 32ff 	mov.w	r2, #4294967295
 8007d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d3a:	f10a 0a01 	add.w	sl, sl, #1
 8007d3e:	9304      	str	r3, [sp, #16]
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d46:	931a      	str	r3, [sp, #104]	; 0x68
 8007d48:	4654      	mov	r4, sl
 8007d4a:	2205      	movs	r2, #5
 8007d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d50:	4851      	ldr	r0, [pc, #324]	; (8007e98 <_svfiprintf_r+0x1ec>)
 8007d52:	f7f8 fa4d 	bl	80001f0 <memchr>
 8007d56:	9a04      	ldr	r2, [sp, #16]
 8007d58:	b9d8      	cbnz	r0, 8007d92 <_svfiprintf_r+0xe6>
 8007d5a:	06d0      	lsls	r0, r2, #27
 8007d5c:	bf44      	itt	mi
 8007d5e:	2320      	movmi	r3, #32
 8007d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d64:	0711      	lsls	r1, r2, #28
 8007d66:	bf44      	itt	mi
 8007d68:	232b      	movmi	r3, #43	; 0x2b
 8007d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d72:	2b2a      	cmp	r3, #42	; 0x2a
 8007d74:	d015      	beq.n	8007da2 <_svfiprintf_r+0xf6>
 8007d76:	9a07      	ldr	r2, [sp, #28]
 8007d78:	4654      	mov	r4, sl
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f04f 0c0a 	mov.w	ip, #10
 8007d80:	4621      	mov	r1, r4
 8007d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d86:	3b30      	subs	r3, #48	; 0x30
 8007d88:	2b09      	cmp	r3, #9
 8007d8a:	d94e      	bls.n	8007e2a <_svfiprintf_r+0x17e>
 8007d8c:	b1b0      	cbz	r0, 8007dbc <_svfiprintf_r+0x110>
 8007d8e:	9207      	str	r2, [sp, #28]
 8007d90:	e014      	b.n	8007dbc <_svfiprintf_r+0x110>
 8007d92:	eba0 0308 	sub.w	r3, r0, r8
 8007d96:	fa09 f303 	lsl.w	r3, r9, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	9304      	str	r3, [sp, #16]
 8007d9e:	46a2      	mov	sl, r4
 8007da0:	e7d2      	b.n	8007d48 <_svfiprintf_r+0x9c>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	1d19      	adds	r1, r3, #4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	9103      	str	r1, [sp, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	bfbb      	ittet	lt
 8007dae:	425b      	neglt	r3, r3
 8007db0:	f042 0202 	orrlt.w	r2, r2, #2
 8007db4:	9307      	strge	r3, [sp, #28]
 8007db6:	9307      	strlt	r3, [sp, #28]
 8007db8:	bfb8      	it	lt
 8007dba:	9204      	strlt	r2, [sp, #16]
 8007dbc:	7823      	ldrb	r3, [r4, #0]
 8007dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007dc0:	d10c      	bne.n	8007ddc <_svfiprintf_r+0x130>
 8007dc2:	7863      	ldrb	r3, [r4, #1]
 8007dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc6:	d135      	bne.n	8007e34 <_svfiprintf_r+0x188>
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	1d1a      	adds	r2, r3, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	9203      	str	r2, [sp, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bfb8      	it	lt
 8007dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dd8:	3402      	adds	r4, #2
 8007dda:	9305      	str	r3, [sp, #20]
 8007ddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ea8 <_svfiprintf_r+0x1fc>
 8007de0:	7821      	ldrb	r1, [r4, #0]
 8007de2:	2203      	movs	r2, #3
 8007de4:	4650      	mov	r0, sl
 8007de6:	f7f8 fa03 	bl	80001f0 <memchr>
 8007dea:	b140      	cbz	r0, 8007dfe <_svfiprintf_r+0x152>
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	eba0 000a 	sub.w	r0, r0, sl
 8007df2:	fa03 f000 	lsl.w	r0, r3, r0
 8007df6:	9b04      	ldr	r3, [sp, #16]
 8007df8:	4303      	orrs	r3, r0
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	9304      	str	r3, [sp, #16]
 8007dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e02:	4826      	ldr	r0, [pc, #152]	; (8007e9c <_svfiprintf_r+0x1f0>)
 8007e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e08:	2206      	movs	r2, #6
 8007e0a:	f7f8 f9f1 	bl	80001f0 <memchr>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d038      	beq.n	8007e84 <_svfiprintf_r+0x1d8>
 8007e12:	4b23      	ldr	r3, [pc, #140]	; (8007ea0 <_svfiprintf_r+0x1f4>)
 8007e14:	bb1b      	cbnz	r3, 8007e5e <_svfiprintf_r+0x1b2>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	3307      	adds	r3, #7
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	3308      	adds	r3, #8
 8007e20:	9303      	str	r3, [sp, #12]
 8007e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e24:	4433      	add	r3, r6
 8007e26:	9309      	str	r3, [sp, #36]	; 0x24
 8007e28:	e767      	b.n	8007cfa <_svfiprintf_r+0x4e>
 8007e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2e:	460c      	mov	r4, r1
 8007e30:	2001      	movs	r0, #1
 8007e32:	e7a5      	b.n	8007d80 <_svfiprintf_r+0xd4>
 8007e34:	2300      	movs	r3, #0
 8007e36:	3401      	adds	r4, #1
 8007e38:	9305      	str	r3, [sp, #20]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f04f 0c0a 	mov.w	ip, #10
 8007e40:	4620      	mov	r0, r4
 8007e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e46:	3a30      	subs	r2, #48	; 0x30
 8007e48:	2a09      	cmp	r2, #9
 8007e4a:	d903      	bls.n	8007e54 <_svfiprintf_r+0x1a8>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0c5      	beq.n	8007ddc <_svfiprintf_r+0x130>
 8007e50:	9105      	str	r1, [sp, #20]
 8007e52:	e7c3      	b.n	8007ddc <_svfiprintf_r+0x130>
 8007e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e58:	4604      	mov	r4, r0
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e7f0      	b.n	8007e40 <_svfiprintf_r+0x194>
 8007e5e:	ab03      	add	r3, sp, #12
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	462a      	mov	r2, r5
 8007e64:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <_svfiprintf_r+0x1f8>)
 8007e66:	a904      	add	r1, sp, #16
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7fe f887 	bl	8005f7c <_printf_float>
 8007e6e:	1c42      	adds	r2, r0, #1
 8007e70:	4606      	mov	r6, r0
 8007e72:	d1d6      	bne.n	8007e22 <_svfiprintf_r+0x176>
 8007e74:	89ab      	ldrh	r3, [r5, #12]
 8007e76:	065b      	lsls	r3, r3, #25
 8007e78:	f53f af2c 	bmi.w	8007cd4 <_svfiprintf_r+0x28>
 8007e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e7e:	b01d      	add	sp, #116	; 0x74
 8007e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <_svfiprintf_r+0x1f8>)
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	4638      	mov	r0, r7
 8007e90:	f7fe fb18 	bl	80064c4 <_printf_i>
 8007e94:	e7eb      	b.n	8007e6e <_svfiprintf_r+0x1c2>
 8007e96:	bf00      	nop
 8007e98:	080094f4 	.word	0x080094f4
 8007e9c:	080094fe 	.word	0x080094fe
 8007ea0:	08005f7d 	.word	0x08005f7d
 8007ea4:	08007bf7 	.word	0x08007bf7
 8007ea8:	080094fa 	.word	0x080094fa

08007eac <__assert_func>:
 8007eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eae:	4614      	mov	r4, r2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <__assert_func+0x2c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	68d8      	ldr	r0, [r3, #12]
 8007eba:	b14c      	cbz	r4, 8007ed0 <__assert_func+0x24>
 8007ebc:	4b07      	ldr	r3, [pc, #28]	; (8007edc <__assert_func+0x30>)
 8007ebe:	9100      	str	r1, [sp, #0]
 8007ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ec4:	4906      	ldr	r1, [pc, #24]	; (8007ee0 <__assert_func+0x34>)
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	f000 f80e 	bl	8007ee8 <fiprintf>
 8007ecc:	f000 fa7c 	bl	80083c8 <abort>
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <__assert_func+0x38>)
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	e7f3      	b.n	8007ebe <__assert_func+0x12>
 8007ed6:	bf00      	nop
 8007ed8:	2000001c 	.word	0x2000001c
 8007edc:	08009505 	.word	0x08009505
 8007ee0:	08009512 	.word	0x08009512
 8007ee4:	08009540 	.word	0x08009540

08007ee8 <fiprintf>:
 8007ee8:	b40e      	push	{r1, r2, r3}
 8007eea:	b503      	push	{r0, r1, lr}
 8007eec:	4601      	mov	r1, r0
 8007eee:	ab03      	add	r3, sp, #12
 8007ef0:	4805      	ldr	r0, [pc, #20]	; (8007f08 <fiprintf+0x20>)
 8007ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef6:	6800      	ldr	r0, [r0, #0]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	f000 f867 	bl	8007fcc <_vfiprintf_r>
 8007efe:	b002      	add	sp, #8
 8007f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f04:	b003      	add	sp, #12
 8007f06:	4770      	bx	lr
 8007f08:	2000001c 	.word	0x2000001c

08007f0c <__retarget_lock_init_recursive>:
 8007f0c:	4770      	bx	lr

08007f0e <__retarget_lock_acquire_recursive>:
 8007f0e:	4770      	bx	lr

08007f10 <__retarget_lock_release_recursive>:
 8007f10:	4770      	bx	lr

08007f12 <__ascii_mbtowc>:
 8007f12:	b082      	sub	sp, #8
 8007f14:	b901      	cbnz	r1, 8007f18 <__ascii_mbtowc+0x6>
 8007f16:	a901      	add	r1, sp, #4
 8007f18:	b142      	cbz	r2, 8007f2c <__ascii_mbtowc+0x1a>
 8007f1a:	b14b      	cbz	r3, 8007f30 <__ascii_mbtowc+0x1e>
 8007f1c:	7813      	ldrb	r3, [r2, #0]
 8007f1e:	600b      	str	r3, [r1, #0]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	1e10      	subs	r0, r2, #0
 8007f24:	bf18      	it	ne
 8007f26:	2001      	movne	r0, #1
 8007f28:	b002      	add	sp, #8
 8007f2a:	4770      	bx	lr
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	e7fb      	b.n	8007f28 <__ascii_mbtowc+0x16>
 8007f30:	f06f 0001 	mvn.w	r0, #1
 8007f34:	e7f8      	b.n	8007f28 <__ascii_mbtowc+0x16>

08007f36 <memmove>:
 8007f36:	4288      	cmp	r0, r1
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	eb01 0402 	add.w	r4, r1, r2
 8007f3e:	d902      	bls.n	8007f46 <memmove+0x10>
 8007f40:	4284      	cmp	r4, r0
 8007f42:	4623      	mov	r3, r4
 8007f44:	d807      	bhi.n	8007f56 <memmove+0x20>
 8007f46:	1e43      	subs	r3, r0, #1
 8007f48:	42a1      	cmp	r1, r4
 8007f4a:	d008      	beq.n	8007f5e <memmove+0x28>
 8007f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f54:	e7f8      	b.n	8007f48 <memmove+0x12>
 8007f56:	4402      	add	r2, r0
 8007f58:	4601      	mov	r1, r0
 8007f5a:	428a      	cmp	r2, r1
 8007f5c:	d100      	bne.n	8007f60 <memmove+0x2a>
 8007f5e:	bd10      	pop	{r4, pc}
 8007f60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f68:	e7f7      	b.n	8007f5a <memmove+0x24>

08007f6a <_malloc_usable_size_r>:
 8007f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6e:	1f18      	subs	r0, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfbc      	itt	lt
 8007f74:	580b      	ldrlt	r3, [r1, r0]
 8007f76:	18c0      	addlt	r0, r0, r3
 8007f78:	4770      	bx	lr

08007f7a <__sfputc_r>:
 8007f7a:	6893      	ldr	r3, [r2, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	b410      	push	{r4}
 8007f82:	6093      	str	r3, [r2, #8]
 8007f84:	da08      	bge.n	8007f98 <__sfputc_r+0x1e>
 8007f86:	6994      	ldr	r4, [r2, #24]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	db01      	blt.n	8007f90 <__sfputc_r+0x16>
 8007f8c:	290a      	cmp	r1, #10
 8007f8e:	d103      	bne.n	8007f98 <__sfputc_r+0x1e>
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	f000 b94a 	b.w	800822c <__swbuf_r>
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	1c58      	adds	r0, r3, #1
 8007f9c:	6010      	str	r0, [r2, #0]
 8007f9e:	7019      	strb	r1, [r3, #0]
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <__sfputs_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	4606      	mov	r6, r0
 8007fac:	460f      	mov	r7, r1
 8007fae:	4614      	mov	r4, r2
 8007fb0:	18d5      	adds	r5, r2, r3
 8007fb2:	42ac      	cmp	r4, r5
 8007fb4:	d101      	bne.n	8007fba <__sfputs_r+0x12>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e007      	b.n	8007fca <__sfputs_r+0x22>
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff ffda 	bl	8007f7a <__sfputc_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d1f3      	bne.n	8007fb2 <__sfputs_r+0xa>
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fcc <_vfiprintf_r>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	b09d      	sub	sp, #116	; 0x74
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	4698      	mov	r8, r3
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b118      	cbz	r0, 8007fe4 <_vfiprintf_r+0x18>
 8007fdc:	6983      	ldr	r3, [r0, #24]
 8007fde:	b90b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x18>
 8007fe0:	f000 fb14 	bl	800860c <__sinit>
 8007fe4:	4b89      	ldr	r3, [pc, #548]	; (800820c <_vfiprintf_r+0x240>)
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	d11b      	bne.n	8008022 <_vfiprintf_r+0x56>
 8007fea:	6875      	ldr	r5, [r6, #4]
 8007fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d405      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	059a      	lsls	r2, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffa:	f7ff ff88 	bl	8007f0e <__retarget_lock_acquire_recursive>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	071b      	lsls	r3, r3, #28
 8008002:	d501      	bpl.n	8008008 <_vfiprintf_r+0x3c>
 8008004:	692b      	ldr	r3, [r5, #16]
 8008006:	b9eb      	cbnz	r3, 8008044 <_vfiprintf_r+0x78>
 8008008:	4629      	mov	r1, r5
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f96e 	bl	80082ec <__swsetup_r>
 8008010:	b1c0      	cbz	r0, 8008044 <_vfiprintf_r+0x78>
 8008012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008014:	07dc      	lsls	r4, r3, #31
 8008016:	d50e      	bpl.n	8008036 <_vfiprintf_r+0x6a>
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	; 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <_vfiprintf_r+0x244>)
 8008024:	429d      	cmp	r5, r3
 8008026:	d101      	bne.n	800802c <_vfiprintf_r+0x60>
 8008028:	68b5      	ldr	r5, [r6, #8]
 800802a:	e7df      	b.n	8007fec <_vfiprintf_r+0x20>
 800802c:	4b79      	ldr	r3, [pc, #484]	; (8008214 <_vfiprintf_r+0x248>)
 800802e:	429d      	cmp	r5, r3
 8008030:	bf08      	it	eq
 8008032:	68f5      	ldreq	r5, [r6, #12]
 8008034:	e7da      	b.n	8007fec <_vfiprintf_r+0x20>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	0598      	lsls	r0, r3, #22
 800803a:	d4ed      	bmi.n	8008018 <_vfiprintf_r+0x4c>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f7ff ff67 	bl	8007f10 <__retarget_lock_release_recursive>
 8008042:	e7e9      	b.n	8008018 <_vfiprintf_r+0x4c>
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008052:	2330      	movs	r3, #48	; 0x30
 8008054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008218 <_vfiprintf_r+0x24c>
 8008058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800805c:	f04f 0901 	mov.w	r9, #1
 8008060:	4623      	mov	r3, r4
 8008062:	469a      	mov	sl, r3
 8008064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008068:	b10a      	cbz	r2, 800806e <_vfiprintf_r+0xa2>
 800806a:	2a25      	cmp	r2, #37	; 0x25
 800806c:	d1f9      	bne.n	8008062 <_vfiprintf_r+0x96>
 800806e:	ebba 0b04 	subs.w	fp, sl, r4
 8008072:	d00b      	beq.n	800808c <_vfiprintf_r+0xc0>
 8008074:	465b      	mov	r3, fp
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff94 	bl	8007fa8 <__sfputs_r>
 8008080:	3001      	adds	r0, #1
 8008082:	f000 80aa 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	445a      	add	r2, fp
 800808a:	9209      	str	r2, [sp, #36]	; 0x24
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80a2 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ac:	931a      	str	r3, [sp, #104]	; 0x68
 80080ae:	4654      	mov	r4, sl
 80080b0:	2205      	movs	r2, #5
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4858      	ldr	r0, [pc, #352]	; (8008218 <_vfiprintf_r+0x24c>)
 80080b8:	f7f8 f89a 	bl	80001f0 <memchr>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	b9d8      	cbnz	r0, 80080f8 <_vfiprintf_r+0x12c>
 80080c0:	06d1      	lsls	r1, r2, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2320      	movmi	r3, #32
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ca:	0713      	lsls	r3, r2, #28
 80080cc:	bf44      	itt	mi
 80080ce:	232b      	movmi	r3, #43	; 0x2b
 80080d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b2a      	cmp	r3, #42	; 0x2a
 80080da:	d015      	beq.n	8008108 <_vfiprintf_r+0x13c>
 80080dc:	9a07      	ldr	r2, [sp, #28]
 80080de:	4654      	mov	r4, sl
 80080e0:	2000      	movs	r0, #0
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4621      	mov	r1, r4
 80080e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ec:	3b30      	subs	r3, #48	; 0x30
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d94e      	bls.n	8008190 <_vfiprintf_r+0x1c4>
 80080f2:	b1b0      	cbz	r0, 8008122 <_vfiprintf_r+0x156>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e014      	b.n	8008122 <_vfiprintf_r+0x156>
 80080f8:	eba0 0308 	sub.w	r3, r0, r8
 80080fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	46a2      	mov	sl, r4
 8008106:	e7d2      	b.n	80080ae <_vfiprintf_r+0xe2>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfbb      	ittet	lt
 8008114:	425b      	neglt	r3, r3
 8008116:	f042 0202 	orrlt.w	r2, r2, #2
 800811a:	9307      	strge	r3, [sp, #28]
 800811c:	9307      	strlt	r3, [sp, #28]
 800811e:	bfb8      	it	lt
 8008120:	9204      	strlt	r2, [sp, #16]
 8008122:	7823      	ldrb	r3, [r4, #0]
 8008124:	2b2e      	cmp	r3, #46	; 0x2e
 8008126:	d10c      	bne.n	8008142 <_vfiprintf_r+0x176>
 8008128:	7863      	ldrb	r3, [r4, #1]
 800812a:	2b2a      	cmp	r3, #42	; 0x2a
 800812c:	d135      	bne.n	800819a <_vfiprintf_r+0x1ce>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d1a      	adds	r2, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9203      	str	r2, [sp, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb8      	it	lt
 800813a:	f04f 33ff 	movlt.w	r3, #4294967295
 800813e:	3402      	adds	r4, #2
 8008140:	9305      	str	r3, [sp, #20]
 8008142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008228 <_vfiprintf_r+0x25c>
 8008146:	7821      	ldrb	r1, [r4, #0]
 8008148:	2203      	movs	r2, #3
 800814a:	4650      	mov	r0, sl
 800814c:	f7f8 f850 	bl	80001f0 <memchr>
 8008150:	b140      	cbz	r0, 8008164 <_vfiprintf_r+0x198>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	eba0 000a 	sub.w	r0, r0, sl
 8008158:	fa03 f000 	lsl.w	r0, r3, r0
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	4303      	orrs	r3, r0
 8008160:	3401      	adds	r4, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	482c      	ldr	r0, [pc, #176]	; (800821c <_vfiprintf_r+0x250>)
 800816a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800816e:	2206      	movs	r2, #6
 8008170:	f7f8 f83e 	bl	80001f0 <memchr>
 8008174:	2800      	cmp	r0, #0
 8008176:	d03f      	beq.n	80081f8 <_vfiprintf_r+0x22c>
 8008178:	4b29      	ldr	r3, [pc, #164]	; (8008220 <_vfiprintf_r+0x254>)
 800817a:	bb1b      	cbnz	r3, 80081c4 <_vfiprintf_r+0x1f8>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	3307      	adds	r3, #7
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	3308      	adds	r3, #8
 8008186:	9303      	str	r3, [sp, #12]
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	443b      	add	r3, r7
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	e767      	b.n	8008060 <_vfiprintf_r+0x94>
 8008190:	fb0c 3202 	mla	r2, ip, r2, r3
 8008194:	460c      	mov	r4, r1
 8008196:	2001      	movs	r0, #1
 8008198:	e7a5      	b.n	80080e6 <_vfiprintf_r+0x11a>
 800819a:	2300      	movs	r3, #0
 800819c:	3401      	adds	r4, #1
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0c0a 	mov.w	ip, #10
 80081a6:	4620      	mov	r0, r4
 80081a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ac:	3a30      	subs	r2, #48	; 0x30
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d903      	bls.n	80081ba <_vfiprintf_r+0x1ee>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c5      	beq.n	8008142 <_vfiprintf_r+0x176>
 80081b6:	9105      	str	r1, [sp, #20]
 80081b8:	e7c3      	b.n	8008142 <_vfiprintf_r+0x176>
 80081ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80081be:	4604      	mov	r4, r0
 80081c0:	2301      	movs	r3, #1
 80081c2:	e7f0      	b.n	80081a6 <_vfiprintf_r+0x1da>
 80081c4:	ab03      	add	r3, sp, #12
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	462a      	mov	r2, r5
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <_vfiprintf_r+0x258>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7fd fed4 	bl	8005f7c <_printf_float>
 80081d4:	4607      	mov	r7, r0
 80081d6:	1c78      	adds	r0, r7, #1
 80081d8:	d1d6      	bne.n	8008188 <_vfiprintf_r+0x1bc>
 80081da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081dc:	07d9      	lsls	r1, r3, #31
 80081de:	d405      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e0:	89ab      	ldrh	r3, [r5, #12]
 80081e2:	059a      	lsls	r2, r3, #22
 80081e4:	d402      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e8:	f7ff fe92 	bl	8007f10 <__retarget_lock_release_recursive>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	065b      	lsls	r3, r3, #25
 80081f0:	f53f af12 	bmi.w	8008018 <_vfiprintf_r+0x4c>
 80081f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f6:	e711      	b.n	800801c <_vfiprintf_r+0x50>
 80081f8:	ab03      	add	r3, sp, #12
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	462a      	mov	r2, r5
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <_vfiprintf_r+0x258>)
 8008200:	a904      	add	r1, sp, #16
 8008202:	4630      	mov	r0, r6
 8008204:	f7fe f95e 	bl	80064c4 <_printf_i>
 8008208:	e7e4      	b.n	80081d4 <_vfiprintf_r+0x208>
 800820a:	bf00      	nop
 800820c:	0800966c 	.word	0x0800966c
 8008210:	0800968c 	.word	0x0800968c
 8008214:	0800964c 	.word	0x0800964c
 8008218:	080094f4 	.word	0x080094f4
 800821c:	080094fe 	.word	0x080094fe
 8008220:	08005f7d 	.word	0x08005f7d
 8008224:	08007fa9 	.word	0x08007fa9
 8008228:	080094fa 	.word	0x080094fa

0800822c <__swbuf_r>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	460e      	mov	r6, r1
 8008230:	4614      	mov	r4, r2
 8008232:	4605      	mov	r5, r0
 8008234:	b118      	cbz	r0, 800823e <__swbuf_r+0x12>
 8008236:	6983      	ldr	r3, [r0, #24]
 8008238:	b90b      	cbnz	r3, 800823e <__swbuf_r+0x12>
 800823a:	f000 f9e7 	bl	800860c <__sinit>
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <__swbuf_r+0x98>)
 8008240:	429c      	cmp	r4, r3
 8008242:	d12b      	bne.n	800829c <__swbuf_r+0x70>
 8008244:	686c      	ldr	r4, [r5, #4]
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	60a3      	str	r3, [r4, #8]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	d52f      	bpl.n	80082b0 <__swbuf_r+0x84>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b36b      	cbz	r3, 80082b0 <__swbuf_r+0x84>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	6963      	ldr	r3, [r4, #20]
 800825c:	b2f6      	uxtb	r6, r6
 800825e:	4283      	cmp	r3, r0
 8008260:	4637      	mov	r7, r6
 8008262:	dc04      	bgt.n	800826e <__swbuf_r+0x42>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f93c 	bl	80084e4 <_fflush_r>
 800826c:	bb30      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	60a3      	str	r3, [r4, #8]
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	701e      	strb	r6, [r3, #0]
 800827c:	6963      	ldr	r3, [r4, #20]
 800827e:	3001      	adds	r0, #1
 8008280:	4283      	cmp	r3, r0
 8008282:	d004      	beq.n	800828e <__swbuf_r+0x62>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	07db      	lsls	r3, r3, #31
 8008288:	d506      	bpl.n	8008298 <__swbuf_r+0x6c>
 800828a:	2e0a      	cmp	r6, #10
 800828c:	d104      	bne.n	8008298 <__swbuf_r+0x6c>
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f927 	bl	80084e4 <_fflush_r>
 8008296:	b988      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 8008298:	4638      	mov	r0, r7
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <__swbuf_r+0x9c>)
 800829e:	429c      	cmp	r4, r3
 80082a0:	d101      	bne.n	80082a6 <__swbuf_r+0x7a>
 80082a2:	68ac      	ldr	r4, [r5, #8]
 80082a4:	e7cf      	b.n	8008246 <__swbuf_r+0x1a>
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <__swbuf_r+0xa0>)
 80082a8:	429c      	cmp	r4, r3
 80082aa:	bf08      	it	eq
 80082ac:	68ec      	ldreq	r4, [r5, #12]
 80082ae:	e7ca      	b.n	8008246 <__swbuf_r+0x1a>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f81a 	bl	80082ec <__swsetup_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d0cb      	beq.n	8008254 <__swbuf_r+0x28>
 80082bc:	f04f 37ff 	mov.w	r7, #4294967295
 80082c0:	e7ea      	b.n	8008298 <__swbuf_r+0x6c>
 80082c2:	bf00      	nop
 80082c4:	0800966c 	.word	0x0800966c
 80082c8:	0800968c 	.word	0x0800968c
 80082cc:	0800964c 	.word	0x0800964c

080082d0 <__ascii_wctomb>:
 80082d0:	b149      	cbz	r1, 80082e6 <__ascii_wctomb+0x16>
 80082d2:	2aff      	cmp	r2, #255	; 0xff
 80082d4:	bf85      	ittet	hi
 80082d6:	238a      	movhi	r3, #138	; 0x8a
 80082d8:	6003      	strhi	r3, [r0, #0]
 80082da:	700a      	strbls	r2, [r1, #0]
 80082dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082e0:	bf98      	it	ls
 80082e2:	2001      	movls	r0, #1
 80082e4:	4770      	bx	lr
 80082e6:	4608      	mov	r0, r1
 80082e8:	4770      	bx	lr
	...

080082ec <__swsetup_r>:
 80082ec:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <__swsetup_r+0xcc>)
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	4606      	mov	r6, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	b125      	cbz	r5, 8008302 <__swsetup_r+0x16>
 80082f8:	69ab      	ldr	r3, [r5, #24]
 80082fa:	b913      	cbnz	r3, 8008302 <__swsetup_r+0x16>
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f985 	bl	800860c <__sinit>
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <__swsetup_r+0xd0>)
 8008304:	429c      	cmp	r4, r3
 8008306:	d10f      	bne.n	8008328 <__swsetup_r+0x3c>
 8008308:	686c      	ldr	r4, [r5, #4]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008310:	0719      	lsls	r1, r3, #28
 8008312:	d42c      	bmi.n	800836e <__swsetup_r+0x82>
 8008314:	06dd      	lsls	r5, r3, #27
 8008316:	d411      	bmi.n	800833c <__swsetup_r+0x50>
 8008318:	2309      	movs	r3, #9
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	e03e      	b.n	80083a6 <__swsetup_r+0xba>
 8008328:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <__swsetup_r+0xd4>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d101      	bne.n	8008332 <__swsetup_r+0x46>
 800832e:	68ac      	ldr	r4, [r5, #8]
 8008330:	e7eb      	b.n	800830a <__swsetup_r+0x1e>
 8008332:	4b24      	ldr	r3, [pc, #144]	; (80083c4 <__swsetup_r+0xd8>)
 8008334:	429c      	cmp	r4, r3
 8008336:	bf08      	it	eq
 8008338:	68ec      	ldreq	r4, [r5, #12]
 800833a:	e7e6      	b.n	800830a <__swsetup_r+0x1e>
 800833c:	0758      	lsls	r0, r3, #29
 800833e:	d512      	bpl.n	8008366 <__swsetup_r+0x7a>
 8008340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008342:	b141      	cbz	r1, 8008356 <__swsetup_r+0x6a>
 8008344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008348:	4299      	cmp	r1, r3
 800834a:	d002      	beq.n	8008352 <__swsetup_r+0x66>
 800834c:	4630      	mov	r0, r6
 800834e:	f7fd fccb 	bl	8005ce8 <_free_r>
 8008352:	2300      	movs	r3, #0
 8008354:	6363      	str	r3, [r4, #52]	; 0x34
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	2300      	movs	r3, #0
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0308 	orr.w	r3, r3, #8
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	b94b      	cbnz	r3, 8008386 <__swsetup_r+0x9a>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d003      	beq.n	8008386 <__swsetup_r+0x9a>
 800837e:	4621      	mov	r1, r4
 8008380:	4630      	mov	r0, r6
 8008382:	f000 fa05 	bl	8008790 <__smakebuf_r>
 8008386:	89a0      	ldrh	r0, [r4, #12]
 8008388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800838c:	f010 0301 	ands.w	r3, r0, #1
 8008390:	d00a      	beq.n	80083a8 <__swsetup_r+0xbc>
 8008392:	2300      	movs	r3, #0
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	6963      	ldr	r3, [r4, #20]
 8008398:	425b      	negs	r3, r3
 800839a:	61a3      	str	r3, [r4, #24]
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	b943      	cbnz	r3, 80083b2 <__swsetup_r+0xc6>
 80083a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083a4:	d1ba      	bne.n	800831c <__swsetup_r+0x30>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	0781      	lsls	r1, r0, #30
 80083aa:	bf58      	it	pl
 80083ac:	6963      	ldrpl	r3, [r4, #20]
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	e7f4      	b.n	800839c <__swsetup_r+0xb0>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7f7      	b.n	80083a6 <__swsetup_r+0xba>
 80083b6:	bf00      	nop
 80083b8:	2000001c 	.word	0x2000001c
 80083bc:	0800966c 	.word	0x0800966c
 80083c0:	0800968c 	.word	0x0800968c
 80083c4:	0800964c 	.word	0x0800964c

080083c8 <abort>:
 80083c8:	b508      	push	{r3, lr}
 80083ca:	2006      	movs	r0, #6
 80083cc:	f000 fa48 	bl	8008860 <raise>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7fa ff92 	bl	80032fa <_exit>
	...

080083d8 <__sflush_r>:
 80083d8:	898a      	ldrh	r2, [r1, #12]
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	0710      	lsls	r0, r2, #28
 80083e2:	460c      	mov	r4, r1
 80083e4:	d458      	bmi.n	8008498 <__sflush_r+0xc0>
 80083e6:	684b      	ldr	r3, [r1, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc05      	bgt.n	80083f8 <__sflush_r+0x20>
 80083ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc02      	bgt.n	80083f8 <__sflush_r+0x20>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d0f9      	beq.n	80083f2 <__sflush_r+0x1a>
 80083fe:	2300      	movs	r3, #0
 8008400:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008404:	682f      	ldr	r7, [r5, #0]
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	d032      	beq.n	8008470 <__sflush_r+0x98>
 800840a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	075a      	lsls	r2, r3, #29
 8008410:	d505      	bpl.n	800841e <__sflush_r+0x46>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008418:	b10b      	cbz	r3, 800841e <__sflush_r+0x46>
 800841a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800841c:	1ac0      	subs	r0, r0, r3
 800841e:	2300      	movs	r3, #0
 8008420:	4602      	mov	r2, r0
 8008422:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	d106      	bne.n	800843e <__sflush_r+0x66>
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	291d      	cmp	r1, #29
 8008434:	d82c      	bhi.n	8008490 <__sflush_r+0xb8>
 8008436:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <__sflush_r+0x108>)
 8008438:	40ca      	lsrs	r2, r1
 800843a:	07d6      	lsls	r6, r2, #31
 800843c:	d528      	bpl.n	8008490 <__sflush_r+0xb8>
 800843e:	2200      	movs	r2, #0
 8008440:	6062      	str	r2, [r4, #4]
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	6922      	ldr	r2, [r4, #16]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	d504      	bpl.n	8008454 <__sflush_r+0x7c>
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	d101      	bne.n	8008452 <__sflush_r+0x7a>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b903      	cbnz	r3, 8008454 <__sflush_r+0x7c>
 8008452:	6560      	str	r0, [r4, #84]	; 0x54
 8008454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008456:	602f      	str	r7, [r5, #0]
 8008458:	2900      	cmp	r1, #0
 800845a:	d0ca      	beq.n	80083f2 <__sflush_r+0x1a>
 800845c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008460:	4299      	cmp	r1, r3
 8008462:	d002      	beq.n	800846a <__sflush_r+0x92>
 8008464:	4628      	mov	r0, r5
 8008466:	f7fd fc3f 	bl	8005ce8 <_free_r>
 800846a:	2000      	movs	r0, #0
 800846c:	6360      	str	r0, [r4, #52]	; 0x34
 800846e:	e7c1      	b.n	80083f4 <__sflush_r+0x1c>
 8008470:	6a21      	ldr	r1, [r4, #32]
 8008472:	2301      	movs	r3, #1
 8008474:	4628      	mov	r0, r5
 8008476:	47b0      	blx	r6
 8008478:	1c41      	adds	r1, r0, #1
 800847a:	d1c7      	bne.n	800840c <__sflush_r+0x34>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0c4      	beq.n	800840c <__sflush_r+0x34>
 8008482:	2b1d      	cmp	r3, #29
 8008484:	d001      	beq.n	800848a <__sflush_r+0xb2>
 8008486:	2b16      	cmp	r3, #22
 8008488:	d101      	bne.n	800848e <__sflush_r+0xb6>
 800848a:	602f      	str	r7, [r5, #0]
 800848c:	e7b1      	b.n	80083f2 <__sflush_r+0x1a>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7ad      	b.n	80083f4 <__sflush_r+0x1c>
 8008498:	690f      	ldr	r7, [r1, #16]
 800849a:	2f00      	cmp	r7, #0
 800849c:	d0a9      	beq.n	80083f2 <__sflush_r+0x1a>
 800849e:	0793      	lsls	r3, r2, #30
 80084a0:	680e      	ldr	r6, [r1, #0]
 80084a2:	bf08      	it	eq
 80084a4:	694b      	ldreq	r3, [r1, #20]
 80084a6:	600f      	str	r7, [r1, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2300      	movne	r3, #0
 80084ac:	eba6 0807 	sub.w	r8, r6, r7
 80084b0:	608b      	str	r3, [r1, #8]
 80084b2:	f1b8 0f00 	cmp.w	r8, #0
 80084b6:	dd9c      	ble.n	80083f2 <__sflush_r+0x1a>
 80084b8:	6a21      	ldr	r1, [r4, #32]
 80084ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084bc:	4643      	mov	r3, r8
 80084be:	463a      	mov	r2, r7
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	2800      	cmp	r0, #0
 80084c6:	dc06      	bgt.n	80084d6 <__sflush_r+0xfe>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e78e      	b.n	80083f4 <__sflush_r+0x1c>
 80084d6:	4407      	add	r7, r0
 80084d8:	eba8 0800 	sub.w	r8, r8, r0
 80084dc:	e7e9      	b.n	80084b2 <__sflush_r+0xda>
 80084de:	bf00      	nop
 80084e0:	20400001 	.word	0x20400001

080084e4 <_fflush_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b913      	cbnz	r3, 80084f4 <_fflush_r+0x10>
 80084ee:	2500      	movs	r5, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	b118      	cbz	r0, 80084fe <_fflush_r+0x1a>
 80084f6:	6983      	ldr	r3, [r0, #24]
 80084f8:	b90b      	cbnz	r3, 80084fe <_fflush_r+0x1a>
 80084fa:	f000 f887 	bl	800860c <__sinit>
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <_fflush_r+0x6c>)
 8008500:	429c      	cmp	r4, r3
 8008502:	d11b      	bne.n	800853c <_fflush_r+0x58>
 8008504:	686c      	ldr	r4, [r5, #4]
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0ef      	beq.n	80084ee <_fflush_r+0xa>
 800850e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d404      	bmi.n	800851e <_fflush_r+0x3a>
 8008514:	0599      	lsls	r1, r3, #22
 8008516:	d402      	bmi.n	800851e <_fflush_r+0x3a>
 8008518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851a:	f7ff fcf8 	bl	8007f0e <__retarget_lock_acquire_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff59 	bl	80083d8 <__sflush_r>
 8008526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	4605      	mov	r5, r0
 800852c:	d4e0      	bmi.n	80084f0 <_fflush_r+0xc>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d4dd      	bmi.n	80084f0 <_fflush_r+0xc>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f7ff fceb 	bl	8007f10 <__retarget_lock_release_recursive>
 800853a:	e7d9      	b.n	80084f0 <_fflush_r+0xc>
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <_fflush_r+0x70>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d101      	bne.n	8008546 <_fflush_r+0x62>
 8008542:	68ac      	ldr	r4, [r5, #8]
 8008544:	e7df      	b.n	8008506 <_fflush_r+0x22>
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_fflush_r+0x74>)
 8008548:	429c      	cmp	r4, r3
 800854a:	bf08      	it	eq
 800854c:	68ec      	ldreq	r4, [r5, #12]
 800854e:	e7da      	b.n	8008506 <_fflush_r+0x22>
 8008550:	0800966c 	.word	0x0800966c
 8008554:	0800968c 	.word	0x0800968c
 8008558:	0800964c 	.word	0x0800964c

0800855c <std>:
 800855c:	2300      	movs	r3, #0
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	e9c0 3300 	strd	r3, r3, [r0]
 8008566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856a:	6083      	str	r3, [r0, #8]
 800856c:	8181      	strh	r1, [r0, #12]
 800856e:	6643      	str	r3, [r0, #100]	; 0x64
 8008570:	81c2      	strh	r2, [r0, #14]
 8008572:	6183      	str	r3, [r0, #24]
 8008574:	4619      	mov	r1, r3
 8008576:	2208      	movs	r2, #8
 8008578:	305c      	adds	r0, #92	; 0x5c
 800857a:	f7fd fbad 	bl	8005cd8 <memset>
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x38>)
 8008580:	6263      	str	r3, [r4, #36]	; 0x24
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x3c>)
 8008584:	62a3      	str	r3, [r4, #40]	; 0x28
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <std+0x40>)
 8008588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <std+0x44>)
 800858c:	6224      	str	r4, [r4, #32]
 800858e:	6323      	str	r3, [r4, #48]	; 0x30
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	08008899 	.word	0x08008899
 8008598:	080088bb 	.word	0x080088bb
 800859c:	080088f3 	.word	0x080088f3
 80085a0:	08008917 	.word	0x08008917

080085a4 <_cleanup_r>:
 80085a4:	4901      	ldr	r1, [pc, #4]	; (80085ac <_cleanup_r+0x8>)
 80085a6:	f000 b8af 	b.w	8008708 <_fwalk_reent>
 80085aa:	bf00      	nop
 80085ac:	080084e5 	.word	0x080084e5

080085b0 <__sfmoreglue>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	1e4a      	subs	r2, r1, #1
 80085b4:	2568      	movs	r5, #104	; 0x68
 80085b6:	4355      	muls	r5, r2
 80085b8:	460e      	mov	r6, r1
 80085ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085be:	f7fd fbe3 	bl	8005d88 <_malloc_r>
 80085c2:	4604      	mov	r4, r0
 80085c4:	b140      	cbz	r0, 80085d8 <__sfmoreglue+0x28>
 80085c6:	2100      	movs	r1, #0
 80085c8:	e9c0 1600 	strd	r1, r6, [r0]
 80085cc:	300c      	adds	r0, #12
 80085ce:	60a0      	str	r0, [r4, #8]
 80085d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085d4:	f7fd fb80 	bl	8005cd8 <memset>
 80085d8:	4620      	mov	r0, r4
 80085da:	bd70      	pop	{r4, r5, r6, pc}

080085dc <__sfp_lock_acquire>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_acquire+0x8>)
 80085de:	f7ff bc96 	b.w	8007f0e <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	20000540 	.word	0x20000540

080085e8 <__sfp_lock_release>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sfp_lock_release+0x8>)
 80085ea:	f7ff bc91 	b.w	8007f10 <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	20000540 	.word	0x20000540

080085f4 <__sinit_lock_acquire>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__sinit_lock_acquire+0x8>)
 80085f6:	f7ff bc8a 	b.w	8007f0e <__retarget_lock_acquire_recursive>
 80085fa:	bf00      	nop
 80085fc:	2000053b 	.word	0x2000053b

08008600 <__sinit_lock_release>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__sinit_lock_release+0x8>)
 8008602:	f7ff bc85 	b.w	8007f10 <__retarget_lock_release_recursive>
 8008606:	bf00      	nop
 8008608:	2000053b 	.word	0x2000053b

0800860c <__sinit>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	f7ff fff0 	bl	80085f4 <__sinit_lock_acquire>
 8008614:	69a3      	ldr	r3, [r4, #24]
 8008616:	b11b      	cbz	r3, 8008620 <__sinit+0x14>
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f7ff bff0 	b.w	8008600 <__sinit_lock_release>
 8008620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008624:	6523      	str	r3, [r4, #80]	; 0x50
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <__sinit+0x68>)
 8008628:	4a13      	ldr	r2, [pc, #76]	; (8008678 <__sinit+0x6c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	62a2      	str	r2, [r4, #40]	; 0x28
 800862e:	42a3      	cmp	r3, r4
 8008630:	bf04      	itt	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	61a3      	streq	r3, [r4, #24]
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f820 	bl	800867c <__sfp>
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f81c 	bl	800867c <__sfp>
 8008644:	60a0      	str	r0, [r4, #8]
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f818 	bl	800867c <__sfp>
 800864c:	2200      	movs	r2, #0
 800864e:	60e0      	str	r0, [r4, #12]
 8008650:	2104      	movs	r1, #4
 8008652:	6860      	ldr	r0, [r4, #4]
 8008654:	f7ff ff82 	bl	800855c <std>
 8008658:	68a0      	ldr	r0, [r4, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	2109      	movs	r1, #9
 800865e:	f7ff ff7d 	bl	800855c <std>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	2202      	movs	r2, #2
 8008666:	2112      	movs	r1, #18
 8008668:	f7ff ff78 	bl	800855c <std>
 800866c:	2301      	movs	r3, #1
 800866e:	61a3      	str	r3, [r4, #24]
 8008670:	e7d2      	b.n	8008618 <__sinit+0xc>
 8008672:	bf00      	nop
 8008674:	080092cc 	.word	0x080092cc
 8008678:	080085a5 	.word	0x080085a5

0800867c <__sfp>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4607      	mov	r7, r0
 8008680:	f7ff ffac 	bl	80085dc <__sfp_lock_acquire>
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <__sfp+0x84>)
 8008686:	681e      	ldr	r6, [r3, #0]
 8008688:	69b3      	ldr	r3, [r6, #24]
 800868a:	b913      	cbnz	r3, 8008692 <__sfp+0x16>
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ffbd 	bl	800860c <__sinit>
 8008692:	3648      	adds	r6, #72	; 0x48
 8008694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	d503      	bpl.n	80086a4 <__sfp+0x28>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	b30b      	cbz	r3, 80086e4 <__sfp+0x68>
 80086a0:	6836      	ldr	r6, [r6, #0]
 80086a2:	e7f7      	b.n	8008694 <__sfp+0x18>
 80086a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086a8:	b9d5      	cbnz	r5, 80086e0 <__sfp+0x64>
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <__sfp+0x88>)
 80086ac:	60e3      	str	r3, [r4, #12]
 80086ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b2:	6665      	str	r5, [r4, #100]	; 0x64
 80086b4:	f7ff fc2a 	bl	8007f0c <__retarget_lock_init_recursive>
 80086b8:	f7ff ff96 	bl	80085e8 <__sfp_lock_release>
 80086bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086c4:	6025      	str	r5, [r4, #0]
 80086c6:	61a5      	str	r5, [r4, #24]
 80086c8:	2208      	movs	r2, #8
 80086ca:	4629      	mov	r1, r5
 80086cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d0:	f7fd fb02 	bl	8005cd8 <memset>
 80086d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086dc:	4620      	mov	r0, r4
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	3468      	adds	r4, #104	; 0x68
 80086e2:	e7d9      	b.n	8008698 <__sfp+0x1c>
 80086e4:	2104      	movs	r1, #4
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ff62 	bl	80085b0 <__sfmoreglue>
 80086ec:	4604      	mov	r4, r0
 80086ee:	6030      	str	r0, [r6, #0]
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1d5      	bne.n	80086a0 <__sfp+0x24>
 80086f4:	f7ff ff78 	bl	80085e8 <__sfp_lock_release>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	e7ee      	b.n	80086dc <__sfp+0x60>
 80086fe:	bf00      	nop
 8008700:	080092cc 	.word	0x080092cc
 8008704:	ffff0001 	.word	0xffff0001

08008708 <_fwalk_reent>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4606      	mov	r6, r0
 800870e:	4688      	mov	r8, r1
 8008710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008714:	2700      	movs	r7, #0
 8008716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871a:	f1b9 0901 	subs.w	r9, r9, #1
 800871e:	d505      	bpl.n	800872c <_fwalk_reent+0x24>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	2c00      	cmp	r4, #0
 8008724:	d1f7      	bne.n	8008716 <_fwalk_reent+0xe>
 8008726:	4638      	mov	r0, r7
 8008728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872c:	89ab      	ldrh	r3, [r5, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d907      	bls.n	8008742 <_fwalk_reent+0x3a>
 8008732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008736:	3301      	adds	r3, #1
 8008738:	d003      	beq.n	8008742 <_fwalk_reent+0x3a>
 800873a:	4629      	mov	r1, r5
 800873c:	4630      	mov	r0, r6
 800873e:	47c0      	blx	r8
 8008740:	4307      	orrs	r7, r0
 8008742:	3568      	adds	r5, #104	; 0x68
 8008744:	e7e9      	b.n	800871a <_fwalk_reent+0x12>

08008746 <__swhatbuf_r>:
 8008746:	b570      	push	{r4, r5, r6, lr}
 8008748:	460e      	mov	r6, r1
 800874a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874e:	2900      	cmp	r1, #0
 8008750:	b096      	sub	sp, #88	; 0x58
 8008752:	4614      	mov	r4, r2
 8008754:	461d      	mov	r5, r3
 8008756:	da07      	bge.n	8008768 <__swhatbuf_r+0x22>
 8008758:	2300      	movs	r3, #0
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	89b3      	ldrh	r3, [r6, #12]
 800875e:	061a      	lsls	r2, r3, #24
 8008760:	d410      	bmi.n	8008784 <__swhatbuf_r+0x3e>
 8008762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008766:	e00e      	b.n	8008786 <__swhatbuf_r+0x40>
 8008768:	466a      	mov	r2, sp
 800876a:	f000 f8fb 	bl	8008964 <_fstat_r>
 800876e:	2800      	cmp	r0, #0
 8008770:	dbf2      	blt.n	8008758 <__swhatbuf_r+0x12>
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008778:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800877c:	425a      	negs	r2, r3
 800877e:	415a      	adcs	r2, r3
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	e7ee      	b.n	8008762 <__swhatbuf_r+0x1c>
 8008784:	2340      	movs	r3, #64	; 0x40
 8008786:	2000      	movs	r0, #0
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	b016      	add	sp, #88	; 0x58
 800878c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008790 <__smakebuf_r>:
 8008790:	898b      	ldrh	r3, [r1, #12]
 8008792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008794:	079d      	lsls	r5, r3, #30
 8008796:	4606      	mov	r6, r0
 8008798:	460c      	mov	r4, r1
 800879a:	d507      	bpl.n	80087ac <__smakebuf_r+0x1c>
 800879c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	6123      	str	r3, [r4, #16]
 80087a4:	2301      	movs	r3, #1
 80087a6:	6163      	str	r3, [r4, #20]
 80087a8:	b002      	add	sp, #8
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	ab01      	add	r3, sp, #4
 80087ae:	466a      	mov	r2, sp
 80087b0:	f7ff ffc9 	bl	8008746 <__swhatbuf_r>
 80087b4:	9900      	ldr	r1, [sp, #0]
 80087b6:	4605      	mov	r5, r0
 80087b8:	4630      	mov	r0, r6
 80087ba:	f7fd fae5 	bl	8005d88 <_malloc_r>
 80087be:	b948      	cbnz	r0, 80087d4 <__smakebuf_r+0x44>
 80087c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c4:	059a      	lsls	r2, r3, #22
 80087c6:	d4ef      	bmi.n	80087a8 <__smakebuf_r+0x18>
 80087c8:	f023 0303 	bic.w	r3, r3, #3
 80087cc:	f043 0302 	orr.w	r3, r3, #2
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	e7e3      	b.n	800879c <__smakebuf_r+0xc>
 80087d4:	4b0d      	ldr	r3, [pc, #52]	; (800880c <__smakebuf_r+0x7c>)
 80087d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	6020      	str	r0, [r4, #0]
 80087dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	9b00      	ldr	r3, [sp, #0]
 80087e4:	6163      	str	r3, [r4, #20]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	6120      	str	r0, [r4, #16]
 80087ea:	b15b      	cbz	r3, 8008804 <__smakebuf_r+0x74>
 80087ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f8c9 	bl	8008988 <_isatty_r>
 80087f6:	b128      	cbz	r0, 8008804 <__smakebuf_r+0x74>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f023 0303 	bic.w	r3, r3, #3
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	89a0      	ldrh	r0, [r4, #12]
 8008806:	4305      	orrs	r5, r0
 8008808:	81a5      	strh	r5, [r4, #12]
 800880a:	e7cd      	b.n	80087a8 <__smakebuf_r+0x18>
 800880c:	080085a5 	.word	0x080085a5

08008810 <_raise_r>:
 8008810:	291f      	cmp	r1, #31
 8008812:	b538      	push	{r3, r4, r5, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	460d      	mov	r5, r1
 8008818:	d904      	bls.n	8008824 <_raise_r+0x14>
 800881a:	2316      	movs	r3, #22
 800881c:	6003      	str	r3, [r0, #0]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008826:	b112      	cbz	r2, 800882e <_raise_r+0x1e>
 8008828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800882c:	b94b      	cbnz	r3, 8008842 <_raise_r+0x32>
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f830 	bl	8008894 <_getpid_r>
 8008834:	462a      	mov	r2, r5
 8008836:	4601      	mov	r1, r0
 8008838:	4620      	mov	r0, r4
 800883a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800883e:	f000 b817 	b.w	8008870 <_kill_r>
 8008842:	2b01      	cmp	r3, #1
 8008844:	d00a      	beq.n	800885c <_raise_r+0x4c>
 8008846:	1c59      	adds	r1, r3, #1
 8008848:	d103      	bne.n	8008852 <_raise_r+0x42>
 800884a:	2316      	movs	r3, #22
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	2001      	movs	r0, #1
 8008850:	e7e7      	b.n	8008822 <_raise_r+0x12>
 8008852:	2400      	movs	r4, #0
 8008854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008858:	4628      	mov	r0, r5
 800885a:	4798      	blx	r3
 800885c:	2000      	movs	r0, #0
 800885e:	e7e0      	b.n	8008822 <_raise_r+0x12>

08008860 <raise>:
 8008860:	4b02      	ldr	r3, [pc, #8]	; (800886c <raise+0xc>)
 8008862:	4601      	mov	r1, r0
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	f7ff bfd3 	b.w	8008810 <_raise_r>
 800886a:	bf00      	nop
 800886c:	2000001c 	.word	0x2000001c

08008870 <_kill_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	; (8008890 <_kill_r+0x20>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f7fa fd2c 	bl	80032da <_kill>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d102      	bne.n	800888c <_kill_r+0x1c>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b103      	cbz	r3, 800888c <_kill_r+0x1c>
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	20000534 	.word	0x20000534

08008894 <_getpid_r>:
 8008894:	f7fa bd19 	b.w	80032ca <_getpid>

08008898 <__sread>:
 8008898:	b510      	push	{r4, lr}
 800889a:	460c      	mov	r4, r1
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	f000 f894 	bl	80089cc <_read_r>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	bfab      	itete	ge
 80088a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088aa:	89a3      	ldrhlt	r3, [r4, #12]
 80088ac:	181b      	addge	r3, r3, r0
 80088ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088b2:	bfac      	ite	ge
 80088b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80088b6:	81a3      	strhlt	r3, [r4, #12]
 80088b8:	bd10      	pop	{r4, pc}

080088ba <__swrite>:
 80088ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	461f      	mov	r7, r3
 80088c0:	898b      	ldrh	r3, [r1, #12]
 80088c2:	05db      	lsls	r3, r3, #23
 80088c4:	4605      	mov	r5, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	4616      	mov	r6, r2
 80088ca:	d505      	bpl.n	80088d8 <__swrite+0x1e>
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	2302      	movs	r3, #2
 80088d2:	2200      	movs	r2, #0
 80088d4:	f000 f868 	bl	80089a8 <_lseek_r>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	4632      	mov	r2, r6
 80088e6:	463b      	mov	r3, r7
 80088e8:	4628      	mov	r0, r5
 80088ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	f000 b817 	b.w	8008920 <_write_r>

080088f2 <__sseek>:
 80088f2:	b510      	push	{r4, lr}
 80088f4:	460c      	mov	r4, r1
 80088f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fa:	f000 f855 	bl	80089a8 <_lseek_r>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	bf15      	itete	ne
 8008904:	6560      	strne	r0, [r4, #84]	; 0x54
 8008906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800890a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800890e:	81a3      	strheq	r3, [r4, #12]
 8008910:	bf18      	it	ne
 8008912:	81a3      	strhne	r3, [r4, #12]
 8008914:	bd10      	pop	{r4, pc}

08008916 <__sclose>:
 8008916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891a:	f000 b813 	b.w	8008944 <_close_r>
	...

08008920 <_write_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d07      	ldr	r5, [pc, #28]	; (8008940 <_write_r+0x20>)
 8008924:	4604      	mov	r4, r0
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	2200      	movs	r2, #0
 800892c:	602a      	str	r2, [r5, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f7fa fd0a 	bl	8003348 <_write>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_write_r+0x1e>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_write_r+0x1e>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20000534 	.word	0x20000534

08008944 <_close_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	; (8008960 <_close_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7fa fd16 	bl	8003380 <_close>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_close_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_close_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	20000534 	.word	0x20000534

08008964 <_fstat_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d07      	ldr	r5, [pc, #28]	; (8008984 <_fstat_r+0x20>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	4611      	mov	r1, r2
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	f7fa fd11 	bl	8003398 <_fstat>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d102      	bne.n	8008980 <_fstat_r+0x1c>
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	b103      	cbz	r3, 8008980 <_fstat_r+0x1c>
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	bd38      	pop	{r3, r4, r5, pc}
 8008982:	bf00      	nop
 8008984:	20000534 	.word	0x20000534

08008988 <_isatty_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d06      	ldr	r5, [pc, #24]	; (80089a4 <_isatty_r+0x1c>)
 800898c:	2300      	movs	r3, #0
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	f7fa fd10 	bl	80033b8 <_isatty>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_isatty_r+0x1a>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_isatty_r+0x1a>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	20000534 	.word	0x20000534

080089a8 <_lseek_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d07      	ldr	r5, [pc, #28]	; (80089c8 <_lseek_r+0x20>)
 80089ac:	4604      	mov	r4, r0
 80089ae:	4608      	mov	r0, r1
 80089b0:	4611      	mov	r1, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	602a      	str	r2, [r5, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f7fa fd09 	bl	80033ce <_lseek>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_lseek_r+0x1e>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_lseek_r+0x1e>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	20000534 	.word	0x20000534

080089cc <_read_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d07      	ldr	r5, [pc, #28]	; (80089ec <_read_r+0x20>)
 80089d0:	4604      	mov	r4, r0
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	602a      	str	r2, [r5, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f7fa fc97 	bl	800330e <_read>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_read_r+0x1e>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_read_r+0x1e>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000534 	.word	0x20000534

080089f0 <_init>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr

080089fc <_fini>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr
